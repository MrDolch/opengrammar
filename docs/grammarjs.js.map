{"version":3,"sources":["webpack://grammarjs/webpack/universalModuleDefinition","webpack://grammarjs/../node_modules/source-map-loader/dist/node_modules/plantuml-encoder/browser-index.js","webpack://grammarjs/../node_modules/source-map-loader/dist/node_modules/plantuml-encoder/dist/plantuml-decoder.js","webpack://grammarjs/../node_modules/source-map-loader/dist/node_modules/plantuml-encoder/dist/plantuml-encoder.js","webpack://grammarjs/./kotlin/text/regex/RegexExtensions.kt","webpack://grammarjs/./kotlin/generated/_Collections.kt","webpack://grammarjs/./kotlin/collections/Collections.kt","webpack://grammarjs/./kotlin/collections/Sets.kt","webpack://grammarjs/./kotlin/collections/Maps.kt","webpack://grammarjs/../src/main/kotlin/main.kt","webpack://grammarjs/./kotlin/kotlin/text/string.kt","webpack://grammarjs/./kotlin/text/Strings.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/definitions/DefinitionReader.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/definitions/GitHubIoDefinitionReader.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/definitions/DefinitionsProvider.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/definitions/Line.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/definitions/LocalStorageDefinitionReader.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/phraser/Phrase.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/phraser/Phraser.kt","webpack://grammarjs/./kotlin/util/Standard.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/rules/Fragment.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/rules/GoedelObjekt.kt","webpack://grammarjs/./kotlin/generated/_Arrays.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/rules/Rule.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/rules/Rules.kt","webpack://grammarjs/../src/main/kotlin/tech/dolch/grammar/rules/RuleService.kt","webpack://grammarjs/./kotlin-dce/wrapper.js","webpack://grammarjs/./kotlin-dce/arrayUtils.js","webpack://grammarjs/./kotlin-dce/callableReferenceUtils.js","webpack://grammarjs/./kotlin-dce/conversions.js","webpack://grammarjs/./kotlin-dce/core.js","webpack://grammarjs/./kotlin-dce/misc.js","webpack://grammarjs/./kotlin-dce/polyfills.js","webpack://grammarjs/./kotlin-dce/markerFunctions.js","webpack://grammarjs/./kotlin-dce/rtti.js","webpack://grammarjs/./kotlin-dce/long.js","webpack://grammarjs/./kotlin-dce/runtime/arrayUtils.kt","webpack://grammarjs/./kotlin-dce/runtime/Enum.kt","webpack://grammarjs/./kotlin-dce/primitiveCompanionObjects.kt","webpack://grammarjs/./kotlin-dce/generated/_Arrays.kt","webpack://grammarjs/./kotlin-dce/generated/_Ranges.kt","webpack://grammarjs/./kotlin-dce/kotlin/UByte.kt","webpack://grammarjs/./kotlin-dce/kotlin/UInt.kt","webpack://grammarjs/./kotlin-dce/kotlin/UShort.kt","webpack://grammarjs/./kotlin-dce/Ranges.kt","webpack://grammarjs/./kotlin-dce/collections/Collections.kt","webpack://grammarjs/./kotlin-dce/collections/Maps.kt","webpack://grammarjs/./kotlin-dce/collections/Sets.kt","webpack://grammarjs/./kotlin-dce/collections/Sequences.kt","webpack://grammarjs/./kotlin-dce/generated/_Collections.kt","webpack://grammarjs/./kotlin-dce/collections/Iterables.kt","webpack://grammarjs/./kotlin-dce/generated/_Sequences.kt","webpack://grammarjs/./kotlin-dce/util/Preconditions.kt","webpack://grammarjs/./kotlin-dce/Iterators.kt","webpack://grammarjs/./kotlin-dce/ProgressionIterators.kt","webpack://grammarjs/./kotlin-dce/CharCode.kt","webpack://grammarjs/./kotlin-dce/Progressions.kt","webpack://grammarjs/./kotlin-dce/text/StringNumberConversions.kt","webpack://grammarjs/./kotlin-dce/time/Duration.kt","webpack://grammarjs/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://grammarjs/./kotlin-dce/Collections.kt","webpack://grammarjs/./kotlin-dce/Range.kt","webpack://grammarjs/./kotlin-dce/Unit.kt","webpack://grammarjs/./kotlin-dce/internal/progressionUtil.kt","webpack://grammarjs/./kotlin-dce/kotlin/builtins.kt","webpack://grammarjs/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://grammarjs/./kotlin-dce/util/Standard.kt","webpack://grammarjs/./kotlin-dce/util/Result.kt","webpack://grammarjs/./kotlin-dce/coroutines/Continuation.kt","webpack://grammarjs/./kotlin-dce/kotlin/exceptions.kt","webpack://grammarjs/./kotlin-dce/kotlin/kotlin.kt","webpack://grammarjs/./kotlin-dce/generated/_ArraysJs.kt","webpack://grammarjs/./kotlin-dce/generated/_CollectionsJs.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/ArraySorting.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://grammarjs/./kotlin-dce/kotlin/Comparator.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://grammarjs/./kotlin-dce/kotlin/console.kt","webpack://grammarjs/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://grammarjs/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://grammarjs/./kotlin-dce/kotlin/math.kt","webpack://grammarjs/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://grammarjs/./kotlin-dce/kotlin/numbers.kt","webpack://grammarjs/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://grammarjs/./kotlin-dce/kotlin/regexp.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/char.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/regex.kt","webpack://grammarjs/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://grammarjs/./kotlin-dce/kotlin/jsOperators.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/string.kt","webpack://grammarjs/./kotlin-dce/generated/_Strings.kt","webpack://grammarjs/./kotlin-dce/text/Strings.kt","webpack://grammarjs/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://grammarjs/./kotlin-dce/collections/AbstractCollection.kt","webpack://grammarjs/./kotlin-dce/collections/AbstractIterator.kt","webpack://grammarjs/./kotlin-dce/collections/AbstractList.kt","webpack://grammarjs/./kotlin-dce/collections/AbstractMap.kt","webpack://grammarjs/./kotlin-dce/collections/AbstractSet.kt","webpack://grammarjs/./kotlin-dce/collections/MapWithDefault.kt","webpack://grammarjs/./kotlin-dce/collections/MutableCollections.kt","webpack://grammarjs/./kotlin-dce/comparisons/Comparisons.kt","webpack://grammarjs/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://grammarjs/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://grammarjs/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://grammarjs/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://grammarjs/./kotlin-dce/random/Random.kt","webpack://grammarjs/./kotlin-dce/random/XorWowRandom.kt","webpack://grammarjs/./kotlin-dce/ranges/Ranges.kt","webpack://grammarjs/./kotlin-dce/text/Appendable.kt","webpack://grammarjs/./kotlin-dce/text/Char.kt","webpack://grammarjs/./kotlin-dce/text/regex/MatchResult.kt","webpack://grammarjs/./kotlin-dce/util/Tuples.kt","webpack://grammarjs/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/numberConversions_js-v1.kt","webpack://grammarjs/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://grammarjs/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://grammarjs/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://grammarjs/./kotlin-dce/util/DeepRecursive.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/BigDecimal.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/kotlin/math.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/BigInteger.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/generated/_Collections.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/kotlin/collections.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/MutableBigInteger.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/runtime/arrayUtils.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/util/Preconditions.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/kotlin/text/numberConversions.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/util/Standard.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/kotlin/text/string.kt","webpack://grammarjs/../node_modules/kt-math/kotlin/experimental/bitwiseOperations.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/Utils.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/BitSieve.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/MathContext.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/RoundingMode.kt","webpack://grammarjs/../src/commonMain/kotlin/org/gciatto/kt/math/SignedMutableBigInteger.kt","webpack://grammarjs/../src/jsMain/kotlin/org/gciatto/kt/math/ActualUtils.kt","webpack://grammarjs/webpack/bootstrap","webpack://grammarjs/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","encode","decode","r","e","n","t","o","i","f","u","a","Error","code","p","call","length","1","require","pako","data","inflateRaw","to","2","decode6bit","cc","c","charCodeAt","extract3bytes","c1","c2","c3","substring","String","fromCharCode","3","inflate","decode64","encoded","deflated","4","zlib_inflate","utils","strings","msg","ZStream","GZheader","toString","Object","prototype","Inflate","options","assign","chunkSize","windowBits","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Z_OK","header","inflateGetHeader","dictionary","string2buf","Uint8Array","inflateSetDictionary","input","inflator","push","result","mode","_mode","next_out_utf8","tail","utf8str","allowBufError","Z_FINISH","Z_NO_FLUSH","binstring2buf","next_in","avail_in","output","Buf8","next_out","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","onEnd","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","onData","shrinkBuf","inflateEnd","chunk","join","flattenChunks","ungzip","5","TYPED_OK","Uint16Array","Int32Array","_has","obj","key","hasOwnProperty","sources","Array","slice","arguments","source","shift","TypeError","buf","size","subarray","fnTyped","dest","src","src_offs","len","dest_offs","set","l","pos","fnUntyped","concat","apply","setTyped","on","Buf16","Buf32","6","STR_APPLY_OK","STR_APPLY_UIA_OK","__","_utf8len","q","buf2binstring","str","m_pos","str_len","buf_len","max","out","c_len","utf16buf","7","adler","s1","s2","8","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","9","crcTable","table","k","makeTable","crc","end","10","text","time","xflags","os","extra","extra_len","name","comment","hcrc","done","11","start","state","_in","last","_out","beg","dmax","wsize","whave","wnext","s_window","hold","bits","lcode","dcode","lmask","dmask","here","op","dist","from","from_source","window","lencode","distcode","lenbits","distbits","top","dolen","dodist","sane","12","adler32","crc32","inflate_fast","inflate_table","TYPE","BAD","zswap32","InflateState","wrap","havedict","flags","check","total","head","wbits","offset","ncode","nlen","ndist","have","next","lens","work","lendyn","distdyn","back","was","inflateResetKeep","total_in","total_out","inflateReset","inflateReset2","ret","lenfix","distfix","virgin","fixedtables","sym","updatewindow","copy","inflateInit","flush","put","left","here_bits","here_op","here_val","last_bits","last_op","last_val","opts","hbuf","order","inf_leave","data_type","dictLength","inflateInfo","13","MAXBITS","lbase","lext","dbase","dext","type","lens_index","codes","table_index","incr","fill","low","mask","min","curr","drop","used","huff","base","base_index","count","offs","extra_index","14","0","15","deflateRaw","level","encode6bit","b","append3bytes","b1","b2","b3","c4","deflate","encode64","puml","zlib_deflate","Deflate","method","memLevel","strategy","gzip","deflateInit2","deflateSetHeader","dict","deflateSetDictionary","_dict_set","deflator","deflateEnd","configuration_table","trees","MAX_MATCH","MIN_LOOKAHEAD","HCRC_STATE","BUSY_STATE","FINISH_STATE","errorCode","rank","zero","flush_pending","s","pending","pending_buf","pending_out","flush_block_only","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","longest_match","cur_match","match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","prev","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","m","more","_w_size","window_size","hash_size","insert","ins_h","hash_shift","hash_mask","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","MIN_MATCH","last_lit","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","DeflateState","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","HEAP_SIZE","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","_tr_init","deflateReset","max_block_size","max_start","deflateInit","old_flush","val","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","avail","tmpDict","deflateInfo","LITERALS","L_CODES","D_CODES","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","put_short","w","send_bits","value","send_code","tree","bi_reverse","res","gen_codes","next_code","init_block","END_BLOCK","bi_windup","smaller","_n2","_m2","pqdownheap","v","j","compress_block","ltree","dtree","lc","lx","build_tree","desc","node","stree","h","xbits","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","stored_len","copy_block","LENGTH_CODES","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","BL_CODES","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","STATIC_TREES","bi_flush","startIndex","regex","replacement","isBlank","Kotlin","_","isCharArray","$type$","isArray","isArrayish","ArrayBuffer","isView","arrayToString","map","getCallableRef","callableName","toShort","toByte","toChar","numberToInt","Long","toInt","doubleToInt","toBoxedChar","BoxedChar","unboxChar","equals","obj1","obj2","hashCode","objType","getObjectHashCode","numberHashCode","Number","hash","getStringHashCode","bufFloat64","bufInt32","lowIndex","highIndex","OBJECT_HASH_CODE_PROPERTY_NAME","Math","random","defineProperty","throwMarkerError","imul","isInheritanceFromInterface","ctor","iface","metadata","$metadata$","interfaces","superPrototype","getPrototypeOf","superConstructor","constructor","identityHashCode","low_","high_","high","IntCache_","fromInt","cachedObj","fromNumber","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","indexOf","radixToPower","pow","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","kotlin","ranges","LongRange","defineInlineFunction","fun","wrapFunction","suspendCall","coroutineResult","coroutineReceiver","compareTo","typeA","doubleCompareTo","primitiveCompareTo","ia","imulEmulated","Float64Array","Float32Array","doubleToBits","doubleToRawBits","NaN","doubleFromBits","ensureNotNull","x","throwNPE","startsWith","searchString","position","lastIndexOf","endsWith","subjectString","undefined","lastIndex","sign","trunc","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","Int8Array","O","relativeStart","relativeEnd","finalValue","normalizeOffset","typedArraySlice","begin","arrays","Int16Array","TypedArray","Function","self","array","callback","totalOrderComparator","sort","compareFunction","Kind","isType","object","klass","proto","kind","OBJECT","klassMetadata","INTERFACE","isChar","isCharSequence","CharSequence","ordinal","initValue","fillArrayVal","init","element","index","NoSuchElementException","IntRange","destination","item","emptySequence","iterator","hasNext","isEmpty","single","emptyList","listOf","optimizeReadOnlyList","emptySet","setOf","optimizeReadOnlySet","separator","prefix","postfix","truncated","transform","buffer","first","step","EMPTY","minimumValue","maximumValue","FilteringSequence","predicate","it","TakeSequence","TransformingSequence","DistinctSequence","selector","CharIterator","IntIterator","LongIterator","getProgressionLastElement","endInclusive","sortedList","NotImplementedError","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","current","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","cause","message","Exception","RuntimeException","dst","srcLen","dstLen","newSize","defaultValue","ArrayList","fromIndex","toIndex","sortArray","midPoint","reverseIndex","tmp","toArray","copyToArrayImpl","collection","list","copyToArray","comparator","collectionsSort","naturalOrder","endIndex","destinationOffset","rangeSize","subrange","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","initialCapacity","elements","getStableSortingIsSupported","comparison","mergeSort","_stableSortingIsSupported","median","leftIndex","rightIndex","right","leftValue","rightValue","target","checkIsMutable","remove","modified","_index","changed","times","hasPrevious","newValue","oldValue","entries","clear","iter","entry","modCount","splice","pop","arrayCopy","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","createJsMap","keys","BaseOutput","BufferedOutput","initialResult","ClassCastException","NEGATIVE_INFINITY","toRawBits","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","content","toUpperCase","uppercase","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","char","pattern","RegExp","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","lastEntry","_head","_tail","old","newEntry","build","println","outputStream","write","messageString","console","cur","IndexOutOfBoundsException","reversed","isLowSurrogate","isHighSurrogate","concatToString","string","toInsert","newLength","dstIndex","stringCsq","reset","exec","test","findNext","Regex","replace","lastStart","sb","foundMatch","range","collectionSizeOrDefault","nonGlobalOptions","subSequence","literal","AbstractList","ignoreCase","JsMath","n1","n2","toLowerCase","regionMatchesImpl","thisOffset","otherOffset","MatchGroup","computeNext","previous","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","filterInPlace","predicateResultToRemove","writeIndex","readIndex","removeIndex","asSequence","values","contains","isVarargs","FlatteningSequence","AbstractIterator","GeneratorSequence","seedFunction","nextFunction","nextItem","nextState","itemIterator","nextItemIterator","SubSequence","DistinctIterator","toCollection","safe","getOrThrow","acc","removed","interceptor","CombinedContext","operation","initial","newLeft","Random","defaultPlatformRandom","accumulator","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","boundsErrorMessage","v0","takeUpperBits","seed1","seed2","uppercaseChar","thisUpper","otherUpper","checkRadix","firstChar","limitBeforeMul","limitForMaxRadix","digitOf","digit","NumberFormatException","chars","indices","regionMatches","currentStartIndex","findAnyOf","currentIndex","second","nextSearchIndex","groupValues","Pair","that","resultSize","asList","addAll","toIntExactOrNull","sequenceOf","fillFrom","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","stack","arrayCopyResize","delegate","NullPointerException","round","numberFormatError","lastIndexOfAny","charArrayOf","delimiters","delimiter","currentOffset","isLimited","DelimitedRangesSequence","isNode","NodeJsOutput","BufferedOutputToConsoleLog","throwOnFailure","Comparator","unscaledValue","scl","adjustedScale","augend","mc","precision","plus","lhs","signum","lhsIsZero","augendIsZero","scale","preferredScale","precisionDiff","setScale","padding","arg","small","big","smallHighDigitPos","estResultUlpScale","subtrahend","minus","multiplicand","productScale","roundingMode","divisor","ArithmeticException","MathContext","quotient","dividend","xscale","yscale","maxDigits","divideToIntegralValue","product","divideAndRemainder","temp","scaleAdjust","stripTrailingZeros","stripped","strippedScale","zeroWithFinalPreferredScale","scaleByPowerOfTen","ONE_TENTH","working","TEN","toDouble","guessPrecision","targetPrecision","originalPrecision","guess","workingPrecision","ONE_HALF","mcTmp","targetRm","ulp","rm","neighborUp","neighborDown","absoluteValue","errUp","errDown","err_comp_errUp","err_comp_errDown","newScale","workmc","mag","elength","seenbit","oldScale","rs","raise","num","xs","ys","xsign","ysign","cmp","sdiff","xae","yae","xDec","val2","LONG_MASK","sc","trailingZeros","intString","insertionPoint","insertChar","StringBuilder","toBigInteger","toLong","intVal","toLongExact","removeRange","intCompact","q2","charPos","compactCharArray","DIGIT_ONES","DIGIT_TENS","i2","TWO","of","longArrayOf","lowInt","coeff","toCharArray","sbHelper","stringBuilder","adjusted","coeffLen","pad","appendCharArray","sci","sig","asInt","negexp","unscaledVal","prec","ctx","UNLIMITED","pows","curLen","newLen","copyOf","tab","bounds","tenpower","numberOfLeadingZeros","bitLength","d","bd","wasDivided","mcp","compactVal","tenPow","ldividend","ldivisor","qsign","increment","cmpFracHalf","oddQuot","bdividend","mdividend","mq","isRemainderZero","bdivisor","mdivisor","mr","qr","testBit","sum","scale1","scale2","scaledX","bigsum","scaledY","snd","rscale","sameSigns","fst","xraise","scaledXs","rb","scaledYs","dividend0","dividend1","d0_lo","d1_lo","d1","d0_hi","d2","d1_hi","d3","d0","dividendHi","dividendLo","q1","r_tmp","q0","u1","v1","rq","u2","u0","diff","hi","lo","one","two","ax","ay","rsign","m0_lo","m1_lo","m1","m0_hi","m2","m1_hi","m3","m0","mHi","mLo","idx","hi0","hi1","lo0","lo1","divisorScale","dividendScale","scaledDividend","scaledDivisor","isneg","dot","isDigit","toBits","valBits","exponent","significand","magnitude","lsb","numberOfTrailingZeros","nextVal","searchLen","candidate","rounds","certainty","sizeInBits","thisPlusOne","thisMinusOne","shr","iterations","z","modPow","resultMag","xlen","ylen","resultSign","rmag","dh","carry","rstart","dl","copyOfRange","fullsize","upperSize","lowerSize","sliceSize","intSlice","borrow","lowerInts","upperLen","upperInts","half","xh","xl","xhs","shl","xls","t1","t2","tm1","da1","a2","a1","a0","vm1","vinf","ss","partToSquare","powersOfTwo","bitsToShift","remainingBits","scaleFactor","baseToPow2","workingExponent","newSign","answer","invertResult","base2","modInverse","y2","modLen","ebits","tblmask","n0","normalize","toIntArray","bitpos","elen","eIndex","multpos","isone","mult","expOffset","numInts","excessBits","modVal","newMag","nInts","magLen","nBits","newMagLen","nBits2","onesLost","lastSum","setBit","clearBit","intNum","pow2","magBitLength","bc","magTrailingZeroCount","len1","len2","highWord","xInt","xm","maxNumDigitGroups","numGroups","digitGroup","r2","numLeadingZeros","byteLen","bytesCopied","intIndex","byteArray","magInt","fn","mlen","ylong","zlong","numBytes","randomBits","highBit","highMask","searchSieve","n8","v2","replaceFirst","radixed","xIndex","bigger","yIndex","little","difference","bigIndex","littleIndex","yl","ystart","xstart","yh","p1","p3","p2","db1","alen","blen","largest","b0","zlen","lastProductLowWord","piece","bitsInHighWord","nEnd","arg1","arg2","kLong","results","expectedDigits","cacheLine","oldLength","cacheLine2","pc","requireNoNulls","keep","vlen","off","indexBound","intLength","bytesRemaining","bytesToTransfer","numBytesToTransfer","extraInt","cursor","index1","index2","numDigits","numWords","firstGroupLen","group","groupVal","superRadix","nextPrime","bitIndex","unitIndex","convertedStep","intLen","bval","ints","bstart","bv","hb","numZeros","xLong","addend","resultLen","xLen","yLen","zval","dividendValue","divisorLong","remLong","dividendEstimate","needRemainder","KNUTH_POW2_THRESH_LEN","trailingZeroBits","KNUTH_POW2_THRESH_ZEROS","n32","bShifted","sigma","aShifted","ri","qi","aUpper","a12","blockLength","blockStart","blockEnd","numBlocks","dlen","remarr","rFrom","qhat","qrem","skipCorrection","nh","nm","nh2","nChunk","dhLong","nl","estProduct","xk","xk1","uOdd","tsign","lb","isEven","oddMod","powersOf2","isOne","oddPart","evenPart","temp1","temp2","pLong","tLong","sTemp","g","swapper","t0","srcFrom","dstFrom","dLong","aZeros","bZeros","DEBUG","logImpl","lazyObject","destIndex","srcIndex","insertCharSeq","charArray","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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0C,EACf,gBAASA,GAAK,GAAWm0C,EAAW,GACpC,gBAASn0C,GAAK,GAAWm0C,GAAY,GAQzC,kBAAa,WAAa,GAAb,MACb,gBAAW,iBAAY,IAEvB,IAAK,IAAL,EAAU,EAAV,GAA4B,GAA5B,IACI,kBAAW,GAAK,CAAQ,YAAK,eAAF,KAC3B,gBAAS,GDjsGwB,GAAWtqB,ICisGzB,GAI3B,UAKW,GAAW,eAAS,GAAI,GAEnC,SAKU,KAAAijB,GAAG,GAEb,SAKU,KAAAA,GAAG,GAEb,oBAG2B,KAAAA,IAAI,GAE/B,SAKU,KAAAA,GAAG,IAstBb,iCAAmC,gBAAW,EAAG,GAAI,GAAI,IAAK,IAAK,KAAM,aAyPzE,aACoB,WAAqB,GAArB,MAGhB,aAAM,IAAM,kEACZ,IAAK,IAAL,EAAU,EAAV,GAAa,GAAb,IACI,aAAM,GAAK,eAAM,KQrtI+DtrC,URqtI/C,EAAG,GA6J5C,qBAW4B,gBACxB,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAGJ,iBAAwB,CACpB,KACA,KACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBAGJ,oBAG2B,gBACvB,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGJ,gBAAuB,gBACnB,EACA,EACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,UACA,I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","file":"grammarjs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grammarjs\"] = factory();\n\telse\n\t\troot[\"grammarjs\"] = factory();\n})(this, function() {\nreturn ","module.exports = {\n  encode: require('./dist/plantuml-encoder').encode,\n  decode: require('./dist/plantuml-decoder').decode\n}\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.plantumlEncoder = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict'\n\nvar pako = require('pako/lib/inflate.js')\n\nmodule.exports = function (data) {\n  return pako.inflateRaw(data, { to: 'string' })\n}\n\n},{\"pako/lib/inflate.js\":4}],2:[function(require,module,exports){\n'use strict'\n\n// Reverse of\n// http://plantuml.sourceforge.net/codejavascript2.html\n\n// It is described as being \"a transformation close to base64\"\n// The code has been slightly modified to pass linters\n\nfunction decode6bit (cc) {\n  var c = cc.charCodeAt(0)\n  if (cc === '_') return 63\n  if (cc === '-') return 62\n  if (c >= 97) return c - 61 // - 97 + 26 + 10\n  if (c >= 65) return c - 55 // - 65 + 10\n  if (c >= 48) return c - 48\n  return '?'\n}\n\nfunction extract3bytes (data) {\n  var c1 = decode6bit(data[0])\n  var c2 = decode6bit(data[1])\n  var c3 = decode6bit(data[2])\n  var c4 = decode6bit(data[3])\n  var b1 = c1 << 2 | (c2 >> 4) & 0x3F\n  var b2 = (c2 << 4) & 0xF0 | (c3 >> 2) & 0xF\n  var b3 = (c3 << 6) & 0xC0 | c4 & 0x3F\n\n  return [b1, b2, b3]\n}\n\nmodule.exports = function (data) {\n  var r = ''\n  var i = 0\n  for (i = 0; i < data.length; i += 4) {\n    var t = extract3bytes(data.substring(i, i + 4))\n    r = r + String.fromCharCode(t[0])\n    r = r + String.fromCharCode(t[1])\n    r = r + String.fromCharCode(t[2])\n  }\n  return r\n}\n\n},{}],3:[function(require,module,exports){\n'use strict'\n\nvar inflate = require('./inflate')\nvar decode64 = require('./decode64')\n\nmodule.exports.decode = function (encoded) {\n  var deflated = decode64(encoded)\n  return inflate(deflated)\n}\n\n},{\"./decode64\":2,\"./inflate\":1}],4:[function(require,module,exports){\n'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n},{\"./utils/common\":5,\"./utils/strings\":6,\"./zlib/constants\":8,\"./zlib/gzheader\":10,\"./zlib/inflate\":12,\"./zlib/messages\":14,\"./zlib/zstream\":15}],5:[function(require,module,exports){\n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n},{}],6:[function(require,module,exports){\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n},{\"./common\":5}],7:[function(require,module,exports){\n'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n},{\"../utils/common\":5,\"./adler32\":7,\"./crc32\":9,\"./inffast\":11,\"./inftrees\":13}],13:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n},{\"../utils/common\":5}],14:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n},{}]},{},[3])(3)\n});\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.plantumlEncoder = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict'\n\nvar pako = require('pako/lib/deflate.js')\n\nmodule.exports = function (data) {\n  return pako.deflateRaw(data, { level: 9, to: 'string' })\n}\n\n},{\"pako/lib/deflate.js\":4}],2:[function(require,module,exports){\n'use strict'\n\n// Encode code taken from the PlantUML website:\n// http://plantuml.sourceforge.net/codejavascript2.html\n\n// It is described as being \"a transformation close to base64\"\n// The code has been slightly modified to pass linters\n\nfunction encode6bit (b) {\n  if (b < 10) {\n    return String.fromCharCode(48 + b)\n  }\n  b -= 10\n  if (b < 26) {\n    return String.fromCharCode(65 + b)\n  }\n  b -= 26\n  if (b < 26) {\n    return String.fromCharCode(97 + b)\n  }\n  b -= 26\n  if (b === 0) {\n    return '-'\n  }\n  if (b === 1) {\n    return '_'\n  }\n  return '?'\n}\n\nfunction append3bytes (b1, b2, b3) {\n  var c1 = b1 >> 2\n  var c2 = ((b1 & 0x3) << 4) | (b2 >> 4)\n  var c3 = ((b2 & 0xF) << 2) | (b3 >> 6)\n  var c4 = b3 & 0x3F\n  var r = ''\n  r += encode6bit(c1 & 0x3F)\n  r += encode6bit(c2 & 0x3F)\n  r += encode6bit(c3 & 0x3F)\n  r += encode6bit(c4 & 0x3F)\n  return r\n}\n\nmodule.exports = function (data) {\n  var r = ''\n  for (var i = 0; i < data.length; i += 3) {\n    if (i + 2 === data.length) {\n      r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), 0)\n    } else if (i + 1 === data.length) {\n      r += append3bytes(data.charCodeAt(i), 0, 0)\n    } else {\n      r += append3bytes(data.charCodeAt(i),\n        data.charCodeAt(i + 1),\n        data.charCodeAt(i + 2))\n    }\n  }\n  return r\n}\n\n},{}],3:[function(require,module,exports){\n'use strict'\n\nvar deflate = require('./deflate')\nvar encode64 = require('./encode64')\n\nmodule.exports.encode = function (puml) {\n  var deflated = deflate(puml)\n  return encode64(deflated)\n}\n\n},{\"./deflate\":1,\"./encode64\":2}],4:[function(require,module,exports){\n'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n},{\"./utils/common\":5,\"./utils/strings\":6,\"./zlib/deflate\":9,\"./zlib/messages\":10,\"./zlib/zstream\":12}],5:[function(require,module,exports){\n'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n},{}],6:[function(require,module,exports){\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n},{\"./common\":5}],7:[function(require,module,exports){\n'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n},{\"../utils/common\":5,\"./adler32\":7,\"./crc32\":8,\"./messages\":10,\"./trees\":11}],10:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n},{\"../utils/common\":5}],12:[function(require,module,exports){\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n},{}]},{},[3])(3)\n});\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n",null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean\n\ninternal fun CharSequence?.contentEqualsIgnoreCaseImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this.equals(other, ignoreCase = true)\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (!this[i].equals(other[i], ignoreCase = true)) {\n            return false\n        }\n    }\n\n    return true\n}\n\ninternal fun CharSequence?.contentEqualsImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this == other\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (this[i] != other[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and throws an exception otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrict\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrict(): Boolean = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> throw IllegalArgumentException(\"The string doesn't represent a boolean value: $this\")\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and `null` otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrictOrNull\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrictOrNull(): Boolean? = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> null\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    if (a === null) return \"null\"\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null || !Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    if (arr === null) return 0\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                    Math.max(len + relativeStart, 0) :\n                    Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                              len : end >> 0;\n\n            // Step 11.\n            var finalValue = relativeEnd < 0 ?\n                             Math.max(len + relativeEnd, 0) :\n                             Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < finalValue) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'fill', {\n                value: Array.prototype.fill\n            });\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}",null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the array was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.code, last.code + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.code, last.code + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toInt().toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toInt().toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toInt().toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toInt().toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = div(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = rem(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /**\n     * Shifts this value left by the [bitCount] number of bits.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n\n    /**\n     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.code + last.code)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\nimport kotlin.random.Random\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfSequences\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfLists\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n *\n * @sample samples.collections.Sequences.Transformations.unzip\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(): Sequence<T> = shuffled(Random)\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled\n * using the specified [random] instance as the source of randomness.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(random: Random): Sequence<T> = sequence<T> {\n    val buffer = toMutableList()\n    while (buffer.isNotEmpty()) {\n        val j = random.nextInt(buffer.size)\n        val last = @OptIn(ExperimentalStdlibApi::class) buffer.removeLast()\n        val value = if (j < buffer.size) buffer.set(j, last) else last\n        yield(value)\n    }\n}\n\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\ninternal fun <T, C, R> flatMapIndexed(source: Sequence<T>, transform: (Int, T) -> C, iterator: (C) -> Iterator<R>): Sequence<R> =\n    sequence {\n        var index = 0\n        for (element in source) {\n            val result = transform(checkIndexOverflow(index++), element)\n            yieldAll(iterator(result))\n        }\n    }\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or `null` if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement: Int = last.code\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first.code else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement: Int = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement: Long = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Long = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Creates a Char with the specified [code], or throws an exception if the [code] is out of `Char.MIN_VALUE.code..Char.MAX_VALUE.code`.\n *\n * If the program that calls this function is written in a way that only valid [code] is passed as the argument,\n * using the overload that takes a [UShort] argument is preferable (`Char(intValue.toUShort())`).\n * That overload doesn't check validity of the argument, and may improve program performance when the function is called routinely inside a loop.\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Char(code: Int): Char {\n    if (code < Char.MIN_VALUE.code || code > Char.MAX_VALUE.code) {\n        throw IllegalArgumentException(\"Invalid Char code: $code\")\n    }\n    return Char(code.toUShort())\n}\n\n/**\n * Creates a Char with the specified [code].\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun Char(code: UShort): Char\n\n/**\n * Returns the code of this Char.\n *\n * Code of a Char is the value it was constructed with, and the UTF-16 code unit corresponding to this Char.\n *\n * @sample samples.text.Chars.code\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline val Char.code: Int get() = this.toInt()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.code, endInclusive.code, step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.code + last.code) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.contracts.*\nimport kotlin.jvm.JvmInline\nimport kotlin.math.abs\nimport kotlin.math.roundToInt\nimport kotlin.math.sign\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * The type can store duration values up to ±146 years with nanosecond precision,\n * and up to ±146 million years with millisecond precision.\n *\n * To construct a duration, use either the extension function [toDuration] available on [Int], [Long], and [Double] numeric types,\n * or the `Duration` companion object functions [Duration.hours], [Duration.minutes], [Duration.seconds], and so on,\n * taking [Int], [Long], or [Double] numbers as parameters.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inWholeHours], [inWholeMinutes], [inWholeSeconds], [inWholeNanoseconds], and so on.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@JvmInline\npublic value class Duration internal constructor(private val rawValue: Long) : Comparable<Duration> {\n\n    private val value: Long get() = rawValue shr 1\n    private inline val unitDiscriminator: Int get() = rawValue.toInt() and 1\n    private fun isInNanos() = unitDiscriminator == 0\n    private fun isInMillis() = unitDiscriminator == 1\n    private val storageUnit get() = if (isInNanos()) DurationUnit.NANOSECONDS else DurationUnit.MILLISECONDS\n\n    init {\n        // TODO: disable assertions in final version\n        if (isInNanos()) {\n            if (value !in -MAX_NANOS..MAX_NANOS) throw AssertionError(\"$value ns is out of nanoseconds range\")\n        } else {\n            if (value !in -MAX_MILLIS..MAX_MILLIS) throw AssertionError(\"$value ms is out of milliseconds range\")\n            if (value in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) throw AssertionError(\"$value ms is denormalized\")\n        }\n    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0L)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = durationOfMillis(MAX_MILLIS)\n        internal val NEG_INFINITE: Duration = durationOfMillis(-MAX_MILLIS)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Int): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Long): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of nanoseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun nanoseconds(value: Double): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Int): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Long): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of microseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun microseconds(value: Double): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Int): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Long): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of milliseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun milliseconds(value: Double): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Int): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Long): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of seconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun seconds(value: Double): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Int): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Long): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of minutes.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun minutes(value: Double): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Int): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Long): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of hours.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun hours(value: Double): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Int): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Long): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of days.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        public fun days(value: Double): Duration = value.toDuration(DurationUnit.DAYS)\n\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = durationOf(-value, unitDiscriminator)\n\n    /**\n     * Returns a duration whose value is the sum of this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when adding infinite durations of different sign.\n     */\n    public operator fun plus(other: Duration): Duration {\n        when {\n            this.isInfinite() -> {\n                if (other.isFinite() || (this.rawValue xor other.rawValue >= 0))\n                    return this\n                else\n                    throw IllegalArgumentException(\"Summing infinite durations of different signs yields an undefined result.\")\n            }\n            other.isInfinite() -> return other\n        }\n\n        return when {\n            this.unitDiscriminator == other.unitDiscriminator -> {\n                val result = this.value + other.value // never overflows long, but can overflow long63\n                when {\n                    isInNanos() ->\n                        durationOfNanosNormalized(result)\n                    else ->\n                        durationOfMillisNormalized(result)\n                }\n            }\n            this.isInMillis() ->\n                addValuesMixedRanges(this.value, other.value)\n            else ->\n                addValuesMixedRanges(other.value, this.value)\n        }\n    }\n\n    private fun addValuesMixedRanges(thisMillis: Long, otherNanos: Long): Duration {\n        val otherMillis = nanosToMillis(otherNanos)\n        val resultMillis = thisMillis + otherMillis\n        return if (resultMillis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n            val otherNanoRemainder = otherNanos - millisToNanos(otherMillis)\n            durationOfNanos(millisToNanos(resultMillis) + otherNanoRemainder)\n        } else {\n            durationOfMillis(resultMillis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n        }\n    }\n\n    /**\n     * Returns a duration whose value is the difference between this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when subtracting infinite durations of the same sign.\n     */\n    public operator fun minus(other: Duration): Duration = this + (-other)\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Int): Duration {\n        if (isInfinite()) {\n            return when {\n                scale == 0 -> throw IllegalArgumentException(\"Multiplying infinite duration by zero yields an undefined result.\")\n                scale > 0 -> this\n                else -> -this\n            }\n        }\n        if (scale == 0) return ZERO\n\n        val value = value\n        val result = value * scale\n        return if (isInNanos()) {\n            if (value in (MAX_NANOS / Int.MIN_VALUE)..(-MAX_NANOS / Int.MIN_VALUE)) {\n                // can't overflow nanos range for any scale\n                durationOfNanos(result)\n            } else {\n                if (result / scale == value) {\n                    durationOfNanosNormalized(result)\n                } else {\n                    val millis = nanosToMillis(value)\n                    val remNanos = value - millisToNanos(millis)\n                    val resultMillis = millis * scale\n                    val totalMillis = resultMillis + nanosToMillis(remNanos * scale)\n                    if (resultMillis / scale == millis && totalMillis xor resultMillis >= 0) {\n                        durationOfMillis(totalMillis.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n                    } else {\n                        if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n                    }\n                }\n            }\n        } else {\n            if (result / scale == value) {\n                durationOfMillis(result.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n            } else {\n                if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n            }\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale) {\n            return times(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) * scale\n        return result.toDuration(unit)\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing zero duration by zero.\n     */\n    public operator fun div(scale: Int): Duration {\n        if (scale == 0) {\n            return when {\n                isPositive() -> INFINITE\n                isNegative() -> NEG_INFINITE\n                else -> throw IllegalArgumentException(\"Dividing zero duration by zero yields an undefined result.\")\n            }\n        }\n        if (isInNanos()) {\n            return durationOfNanos(value / scale)\n        } else {\n            if (isInfinite())\n                return this * scale.sign\n\n            val result = value / scale\n\n            if (result in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n                val rem = millisToNanos(value - (result * scale)) / scale\n                return durationOfNanos(millisToNanos(result) + rem)\n            }\n            return durationOfMillis(result)\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing an infinite duration by infinity or zero duration by zero.\n     */\n    public operator fun div(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale && intScale != 0) {\n            return div(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) / scale\n        return result.toDuration(unit)\n    }\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double {\n        val coarserUnit = maxOf(this.storageUnit, other.storageUnit)\n        return this.toDouble(coarserUnit) / other.toDouble(coarserUnit)\n    }\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = rawValue < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = rawValue > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = rawValue == INFINITE.rawValue || rawValue == NEG_INFINITE.rawValue\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = !isInfinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int {\n        val compareBits = this.rawValue xor other.rawValue\n        if (compareBits < 0 || compareBits.toInt() and 1 == 0) // different signs or same sign/same range\n            return this.rawValue.compareTo(other.rawValue)\n        // same sign/different ranges\n        val r = this.unitDiscriminator - other.unitDiscriminator // compare ranges\n        return if (isNegative()) -r else r\n    }\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (days: Int, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.DAYS), hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.HOURS), minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(toInt(DurationUnit.MINUTES), secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *   If the value doesn't fit in [Long] range, i.e. it's greater than [Long.MAX_VALUE] or less than [Long.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeSeconds, nanosecondsComponent)\n    }\n\n    @PublishedApi\n    internal val hoursComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeHours % 24).toInt()\n\n    @PublishedApi\n    internal val minutesComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeMinutes % 60).toInt()\n\n    @PublishedApi\n    internal val secondsComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeSeconds % 60).toInt()\n\n    @PublishedApi\n    internal val nanosecondsComponent: Int\n        get() = when {\n            isInfinite() -> 0\n            isInMillis() -> millisToNanos(value % 1_000).toInt()\n            else -> (value % 1_000_000_000).toInt()\n        }\n\n\n    // conversion to units\n\n    /**\n     * Returns the value of this duration expressed as a [Double] number of the specified [unit].\n     *\n     * An infinite duration value is converted either to [Double.POSITIVE_INFINITY] or [Double.NEGATIVE_INFINITY] depending on its sign.\n     */\n    public fun toDouble(unit: DurationUnit): Double {\n        return when (rawValue) {\n            INFINITE.rawValue -> Double.POSITIVE_INFINITY\n            NEG_INFINITE.rawValue -> Double.NEGATIVE_INFINITY\n            else -> {\n                // TODO: whether it's ok to convert to Double before scaling\n                convertDurationUnit(value.toDouble(), storageUnit, unit)\n            }\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public fun toLong(unit: DurationUnit): Long {\n        return when (rawValue) {\n            INFINITE.rawValue -> Long.MAX_VALUE\n            NEG_INFINITE.rawValue -> Long.MIN_VALUE\n            else -> convertDurationUnit(value, storageUnit, unit)\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Int] type, it is coerced into that range:\n     * - [Int.MIN_VALUE] is returned if it's less than `Int.MIN_VALUE`,\n     * - [Int.MAX_VALUE] is returned if it's greater than `Int.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Int.MAX_VALUE] or [Int.MIN_VALUE] depending on its sign.\n     */\n    public fun toInt(unit: DurationUnit): Int =\n        toLong(unit).coerceIn(Int.MIN_VALUE.toLong(), Int.MAX_VALUE.toLong()).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    @Deprecated(\"Use inWholeDays property instead or convert toDouble(DAYS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.DAYS)\"))\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    @Deprecated(\"Use inWholeHours property instead or convert toDouble(HOURS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.HOURS)\"))\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    @Deprecated(\"Use inWholeMinutes property instead or convert toDouble(MINUTES) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MINUTES)\"))\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    @Deprecated(\"Use inWholeSeconds property instead or convert toDouble(SECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.SECONDS)\"))\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    @Deprecated(\"Use inWholeMilliseconds property instead or convert toDouble(MILLISECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MILLISECONDS)\"))\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    @Deprecated(\"Use inWholeMicroseconds property instead or convert toDouble(MICROSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MICROSECONDS)\"))\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    @Deprecated(\"Use inWholeNanoseconds property instead or convert toDouble(NANOSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.NANOSECONDS)\"))\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n\n    /**\n     * The value of this duration expressed as a [Long] number of days.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeDays: Long\n        get() = toLong(DurationUnit.DAYS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of hours.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeHours: Long\n        get() = toLong(DurationUnit.HOURS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of minutes.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMinutes: Long\n        get() = toLong(DurationUnit.MINUTES)\n\n    /**\n     * The value of this duration expressed as a [Long] number of seconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeSeconds: Long\n        get() = toLong(DurationUnit.SECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMilliseconds: Long\n        get() {\n            return if (isInMillis() && isFinite()) value else toLong(DurationUnit.MILLISECONDS)\n        }\n\n    /**\n     * The value of this duration expressed as a [Long] number of microseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeMicroseconds: Long\n        get() = toLong(DurationUnit.MICROSECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    @SinceKotlin(\"1.5\")\n    public val inWholeNanoseconds: Long\n        get() {\n            val value = value\n            return when {\n                isInNanos() -> value\n                value > Long.MAX_VALUE / NANOS_IN_MILLIS -> Long.MAX_VALUE\n                value < Long.MIN_VALUE / NANOS_IN_MILLIS -> Long.MIN_VALUE\n                else -> millisToNanos(value)\n            }\n        }\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    @Deprecated(\"Use inWholeNanoseconds property instead.\", ReplaceWith(\"this.inWholeNanoseconds\"))\n    public fun toLongNanoseconds(): Long = inWholeNanoseconds\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    @Deprecated(\"Use inWholeMilliseconds property instead.\", ReplaceWith(\"this.inWholeMilliseconds\"))\n    public fun toLongMilliseconds(): Long = inWholeMilliseconds\n\n    /**\n     * Returns a string representation of this duration value expressed in the unit which yields the most compact and readable number value.\n     *\n     * Special cases:\n     *  - zero duration is formatted as `\"0s\"`\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *  - very small durations (less than 1e-15 s) are expressed in seconds and formatted in scientific notation\n     *  - very big durations (more than 1e+7 days) are expressed in days and formatted in scientific notation\n     *\n     * @return the value of duration in the automatically determined unit followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when (rawValue) {\n        0L -> \"0s\"\n        INFINITE.rawValue -> \"Infinity\"\n        NEG_INFINITE.rawValue -> \"-Infinity\"\n        else -> {\n            val absNs = absoluteValue.toDouble(DurationUnit.NANOSECONDS)\n            var scientific = false\n            var maxDecimals = 0\n            val unit = when {\n                absNs < 1e-6 -> DurationUnit.SECONDS.also { scientific = true }\n                absNs < 1 -> DurationUnit.NANOSECONDS.also { maxDecimals = 7 }\n                absNs < 1e3 -> DurationUnit.NANOSECONDS\n                absNs < 1e6 -> DurationUnit.MICROSECONDS\n                absNs < 1e9 -> DurationUnit.MILLISECONDS\n                absNs < 1000e9 -> DurationUnit.SECONDS\n                absNs < 60_000e9 -> DurationUnit.MINUTES\n                absNs < 3600_000e9 -> DurationUnit.HOURS\n                absNs < 86400e9 * 1e7 -> DurationUnit.DAYS\n                else -> DurationUnit.DAYS.also { scientific = true }\n            }\n            val value = toDouble(unit)\n            when {\n                scientific -> formatScientific(value)\n                maxDecimals > 0 -> formatUpToDecimals(value, maxDecimals)\n                else -> formatToExactDecimals(value, precision(abs(value)))\n            } + unit.shortName()\n        }\n    }\n\n    private fun precision(value: Double): Int = when {\n        value < 1 -> 3\n        value < 10 -> 2\n        value < 100 -> 1\n        else -> 0\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        val number = toDouble(unit)\n        if (number.isInfinite()) return number.toString()\n        return when {\n            abs(number) < 1e14 -> formatToExactDecimals(number, decimals.coerceAtMost(12))\n            else -> formatScientific(number)\n        } + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * If the hours component absolute value of this duration is greater than [Int.MAX_VALUE], it is replaced with [Int.MAX_VALUE],\n     * so the infinite duration is formatted as `\"PT2147483647H\".\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    @OptIn(ExperimentalStdlibApi::class)\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            val hasHours = hours != 0\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                append(seconds)\n                if (nanoseconds != 0) {\n                    append('.')\n                    val nss = nanoseconds.toString().padStart(9, '0')\n                    when {\n                        nanoseconds % 1_000_000 == 0 -> appendRange(nss, 0, 3)\n                        nanoseconds % 1_000 == 0 -> appendRange(nss, 0, 6)\n                        else -> append(nss)\n                    }\n                }\n                append('S')\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Int.toDuration(unit: DurationUnit): Duration {\n    return if (unit <= DurationUnit.SECONDS) {\n        durationOfNanos(convertDurationUnitOverflow(this.toLong(), unit, DurationUnit.NANOSECONDS))\n    } else\n        toLong().toDuration(unit)\n}\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Long.toDuration(unit: DurationUnit): Duration {\n    val maxNsInUnit = convertDurationUnitOverflow(MAX_NANOS, DurationUnit.NANOSECONDS, unit)\n    if (this in -maxNsInUnit..maxNsInUnit) {\n        return durationOfNanos(convertDurationUnitOverflow(this, unit, DurationUnit.NANOSECONDS))\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS)\n        return durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n}\n\n/**\n * Returns a [Duration] equal to this [Double] number of the specified [unit].\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Double.toDuration(unit: DurationUnit): Duration {\n    val valueInNs = convertDurationUnit(this, unit, DurationUnit.NANOSECONDS)\n    require(!valueInNs.isNaN()) { \"Duration value cannot be NaN.\" }\n    val nanos = valueInNs.toLong()\n    return if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS).toLong()\n        durationOfMillisNormalized(millis)\n    }\n}\n\n// constructing from number of units\n// extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of nanoseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.nanoseconds() function instead.\", ReplaceWith(\"Duration.nanoseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of microseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.microseconds() function instead.\", ReplaceWith(\"Duration.microseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of milliseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.milliseconds() function instead.\", ReplaceWith(\"Duration.milliseconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of seconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.seconds() function instead.\", ReplaceWith(\"Duration.seconds(this)\", \"kotlin.time.Duration\"))\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/**\n * Returns a [Duration] equal to this [Double] number of minutes.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.minutes() function instead.\", ReplaceWith(\"Duration.minutes(this)\", \"kotlin.time.Duration\"))\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of hours.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.hours() function instead.\", ReplaceWith(\"Duration.hours(this)\", \"kotlin.time.Duration\"))\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of days.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use Duration.days() function instead.\", ReplaceWith(\"Duration.days(this)\", \"kotlin.time.Duration\"))\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/**\n * Returns a duration whose value is the specified [duration] value multiplied by this number.\n *\n * @throws IllegalArgumentException if the operation results in a `NaN` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\n// The ranges are chosen so that they are:\n// - symmetric relative to zero: this greatly simplifies operations with sign, e.g. unaryMinus and minus.\n// - non-overlapping, but adjacent: the first value that doesn't fit in nanos range, can be exactly represented in millis.\n\ninternal const val NANOS_IN_MILLIS = 1_000_000\n// maximum number duration can store in nanosecond range\ninternal const val MAX_NANOS = Long.MAX_VALUE / 2 / NANOS_IN_MILLIS * NANOS_IN_MILLIS - 1 // ends in ..._999_999\n// maximum number duration can store in millisecond range, also encodes an infinite value\ninternal const val MAX_MILLIS = Long.MAX_VALUE / 2\n// MAX_NANOS expressed in milliseconds\nprivate const val MAX_NANOS_IN_MILLIS = MAX_NANOS / NANOS_IN_MILLIS\n\nprivate fun nanosToMillis(nanos: Long): Long = nanos / NANOS_IN_MILLIS\nprivate fun millisToNanos(millis: Long): Long = millis * NANOS_IN_MILLIS\n\n@ExperimentalTime private fun durationOfNanos(normalNanos: Long) = Duration(normalNanos shl 1)\n@ExperimentalTime private fun durationOfMillis(normalMillis: Long) = Duration((normalMillis shl 1) + 1)\n@ExperimentalTime private fun durationOf(normalValue: Long, unitDiscriminator: Int) = Duration((normalValue shl 1) + unitDiscriminator)\n@ExperimentalTime private fun durationOfNanosNormalized(nanos: Long) =\n    if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        durationOfMillis(nanosToMillis(nanos))\n    }\n\n@ExperimentalTime private fun durationOfMillisNormalized(millis: Long) =\n    if (millis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n        durationOfNanos(millisToNanos(millis))\n    } else {\n        durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\ninternal expect fun formatScientific(value: Double): String","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant in its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant in its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant in its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant in its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant in its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant in its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant in its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        throw NotImplementedError()\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The mutable map is invariant in its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(@Suppress(\"UNUSED_PARAMETER\") baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        // Using uncropped stack traces due to KT-37563.\n        // Precise stack traces are implemented in JS IR compiler and stdlib\n        js(\"Error\").captureStackTrace(instance);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmInline\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@SinceKotlin(\"1.3\")\n@JvmInline\npublic value class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError\n@SinceKotlin(\"1.4\")\nconstructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Reverses elements in the list in-place.\n */\npublic actual fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant in its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it !in elements }\n    }\n\n    actual override fun clear(): Unit {\n        checkIsMutable()\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable collection.\n     * Mutable collections that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit { }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant in its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it !in elements }\n    }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            set(last, element)\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n\n        internal override fun checkIsMutable(): Unit = list.checkIsMutable()\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is invariant in its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            // Should check if the map containing this entry is mutable.\n            // However, to not increase entry memory footprint it might be worthwhile not to check it here and\n            // force subclasses that implement `build()` (freezing) operation to implement their own `MutableEntry`.\n//            this@AbstractMutableMap.checkIsMutable()\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    // intermediate abstract class to workaround KT-43321\n    internal abstract class AbstractEntrySet<E : Map.Entry<K, V>, K, V> : AbstractMutableSet<E>() {\n        final override fun contains(element: E): Boolean = containsEntry(element)\n        abstract fun containsEntry(element: Map.Entry<K, V>): Boolean\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        checkIsMutable()\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        checkIsMutable()\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable map.\n     * Mutable maps that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant in its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    @PublishedApi\n    internal fun build(): List<E> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        checkIsMutable()\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        checkIsMutable()\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        checkIsMutable()\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        checkIsMutable()\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T> toArray(array: Array<T>): Array<T> {\n        if (array.size < size) {\n            return toArray() as Array<T>\n        }\n\n        (this.array as Array<T>).copyInto(array)\n\n        if (array.size > size) {\n            array[size] = null as T // null-terminate\n        }\n\n        return array\n    }\n\n    override fun toArray(): Array<Any?> {\n        return js(\"[]\").slice.call(array)\n    }\n\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<in T>) {\n    if (fromIndex < toIndex - 1) {\n        mergeSort(array.unsafeCast<Array<T>>(), fromIndex, toIndex - 1, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        for (i in start..endInclusive) array[i] = result[i]\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual fun interface Comparator<T> {\n    @JsName(\"compare\")\n    public actual fun compare(a: T, b: T): Int\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\n// Classes that extend HashMap and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@HashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\n// Classes that extend HashSet and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    internal val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private inner class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n\n        override fun setValue(newValue: V): V {\n            this@LinkedHashMap.checkIsMutable()\n            return super.setValue(newValue)\n        }\n    }\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n                this@EntrySet.checkIsMutable()\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@LinkedHashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            checkIsMutable()\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n\n        override fun checkIsMutable(): Unit = this@LinkedHashMap.checkIsMutable()\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    @PublishedApi\n    internal fun build(): Map<K, V> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        checkIsMutable()\n\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    @PublishedApi\n    internal fun build(): Set<E> {\n        (map as LinkedHashMap<E, Any>).build()\n        return this\n    }\n\n    internal override fun checkIsMutable(): Unit = map.checkIsMutable()\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.JsMath as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x)\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x)\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x)\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = JsMath.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n        this.appendRange(value ?: \"null\", startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun append(value: CharArray): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString()\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun append(value: String): StringBuilder = append(value)\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: String?): StringBuilder {\n        this.string += value ?: \"null\"\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    actual fun capacity(): Int = length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun ensureCapacity(minimumCapacity: Int) {\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun insert(index: Int, value: String): StringBuilder = insert(index, value)\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: String?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val toInsert = value ?: \"null\"\n        this.string = this.string.substring(0, index) + toInsert + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun trimToSize() {\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        @OptIn(ExperimentalStdlibApi::class)\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        @OptIn(ExperimentalStdlibApi::class)\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = lowercaseChar()\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercaseChar(): Char = lowercase()[0]\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercase(): String = toString().asDynamic().toLowerCase().unsafeCast<String>()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = uppercaseChar()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Char.uppercaseChar(): Char {\n    val uppercase = uppercase()\n    return if (uppercase.length > 1) this else uppercase[0]\n}\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.uppercase(): String = toString().asDynamic().toUpperCase().unsafeCast<String>()\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.titlecaseChar(): Char = titlecaseCharImpl()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic actual val Char.category: CharCategory\n    get() = CharCategory.valueOf(getCategoryValue())\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDefined(): Boolean {\n    if (this < '\\u0080') {\n        return true\n    }\n    return getCategoryValue() != CharCategory.UNASSIGNED.value\n}\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetter(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetterOrDigit(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z' || this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n\n    return isDigitImpl() || isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDigit(): Boolean {\n    if (this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isDigitImpl()\n}\n\n/**\n * Returns `true` if this character is an upper case letter.\n *\n * A character is considered to be an upper case letter if its [category] is [CharCategory.UPPERCASE_LETTER].\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isUpperCase(): Boolean {\n    if (this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isUpperCaseImpl()\n}\n\n/**\n * Returns `true` if this character is a lower case letter.\n *\n * A character is considered to be a lower case letter if its [category] is [CharCategory.LOWERCASE_LETTER].\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLowerCase(): Boolean {\n    if (this in 'a'..'z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLowerCaseImpl()\n}\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isTitleCase(): Boolean {\n    if (this < '\\u0080') {\n        return false\n    }\n    return getCategoryValue() == CharCategory.TITLECASE_LETTER.value\n}\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isISOControl(): Boolean {\n    return this <= '\\u001F' || this in '\\u007F'..'\\u009F'\n}\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic actual fun Char.isWhitespace(): Boolean = isWhitespaceImpl()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n *\n * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].\n */\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.lowercase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun String.isNaN(): Boolean = when (this.lowercase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.joinToString(separator = \"\", prefix = \"gu\") { it.value })\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return nativePattern.findNext(input.toString(), startIndex)\n    }\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return generateSequence({ find(input, startIndex) }, { match -> match.next() })\n    }\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOf(transform: (Char) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the char sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOfOrNull(transform: (Char) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * \n * @throws NoSuchElementException if no such character is found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character,\n * and returns the char sequence itself afterwards.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S : CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean\n\ninternal fun CharSequence?.contentEqualsIgnoreCaseImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this.equals(other, ignoreCase = true)\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (!this[i].equals(other[i], ignoreCase = true)) {\n            return false\n        }\n    }\n\n    return true\n}\n\ninternal fun CharSequence?.contentEqualsImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this == other\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (this[i] != other[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and throws an exception otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrict\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrict(): Boolean = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> throw IllegalArgumentException(\"The string doesn't represent a boolean value: $this\")\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and `null` otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrictOrNull\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrictOrNull(): Boolean? = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> null\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@OptIn(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    when {\n        this == null -> other == null\n        !ignoreCase -> this == other\n        other == null -> false\n        else -> {\n            val thisLower = this.lowercase()\n            val otherLower = other.lowercase()\n            thisLower == otherLower || (thisLower.uppercase() == otherLower.uppercase())\n        }\n    }\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n * @sample samples.text.Strings.repeat\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n/**\n * Returns a new string obtained by replacing all occurrences of the [oldValue] substring in this string\n * with the specified [newValue] string.\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gui\" else \"gu\"), Regex.escapeReplacement(newValue))\n\n/**\n * Returns a new string with all occurrences of [oldChar] replaced with [newChar].\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gui\" else \"gu\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"ui\" else \"u\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"ui\" else \"u\"), newChar.toString())\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n\nprivate enum class State {\n    Ready,\n    NotReady,\n    Done,\n    Failed\n}\n\n/**\n * A base class to simplify implementing iterators so that implementations only have to implement [computeNext]\n * to implement the iterator, calling [done] when the iteration is complete.\n */\npublic abstract class AbstractIterator<T> : Iterator<T> {\n    private var state = State.NotReady\n    private var nextValue: T? = null\n\n    override fun hasNext(): Boolean {\n        require(state != State.Failed)\n        return when (state) {\n            State.Done -> false\n            State.Ready -> true\n            else -> tryToComputeNext()\n        }\n    }\n\n    override fun next(): T {\n        if (!hasNext()) throw NoSuchElementException()\n        state = State.NotReady\n        @Suppress(\"UNCHECKED_CAST\")\n        return nextValue as T\n    }\n\n    private fun tryToComputeNext(): Boolean {\n        state = State.Failed\n        computeNext()\n        return state == State.Ready\n    }\n\n    /**\n     * Computes the next item in the iterator.\n     *\n     * This callback method should call one of these two methods:\n     *\n     * * [setNext] with the next value of the iteration\n     * * [done] to indicate there are no more elements\n     *\n     * Failure to call either method will result in the iteration terminating with a failed state\n     */\n    abstract protected fun computeNext(): Unit\n\n    /**\n     * Sets the next value in the iteration, called from the [computeNext] function\n     */\n    protected fun setNext(value: T): Unit {\n        nextValue = value\n        state = State.Ready\n    }\n\n    /**\n     * Sets the state to done so that the iteration terminates.\n     */\n    protected fun done() {\n        state = State.Done\n    }\n}\n\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is covariant in its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n}\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     *\n     * @sample samples.random.Randoms.nextBits\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextInt\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextLong\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     *\n     * @sample samples.random.Randoms.nextBoolean\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextDouble\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextFloat\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random(), Serializable {\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        private object Serialized : Serializable {\n            private const val serialVersionUID = 0L\n\n            private fun readResolve(): Any = Random\n        }\n\n        private fun writeReplace(): Any = Serialized\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray =\n            defaultRandom.nextBytes(array, fromIndex, toIndex)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@OptIn(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom internal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random(), Serializable {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n\n    private companion object {\n        private const val serialVersionUID: Long = 0L\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than or equal to [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T : Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this Appendable. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(): Appendable = append('\\n')\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: CharSequence?): Appendable = append(value).appendLine()\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: Char): Appendable = append(value).appendLine()\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Returns the numeric value of the decimal digit that this Char represents.\n * Throws an exception if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(): Int {\n    return digitOf(this, 10).also {\n        if (it < 0) throw IllegalArgumentException(\"Char $this is not a decimal digit\")\n    }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this Char is not a valid digit in the specified [radix].\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(radix: Int): Int {\n    return digitToIntOrNull(radix) ?: throw IllegalArgumentException(\"Char $this is not a digit in the given radix=$radix\")\n}\n\n/**\n *\n * Returns the numeric value of the decimal digit that this Char represents, or `null` if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(): Int? {\n    return digitOf(this, 10).takeIf { it >= 0 }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix], or `null` if this Char is not a valid digit in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36`.\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n    return digitOf(this, radix).takeIf { it >= 0 }\n}\n\n/**\n * Returns the Char that represents this decimal digit.\n * Throws an exception if this value is not in the range `0..9`.\n *\n * If this value is in `0..9`, the decimal digit Char with code `'0'.code + this` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(): Char {\n    if (this in 0..9) {\n        return '0' + this\n    }\n    throw IllegalArgumentException(\"Int $this is not a decimal digit\")\n}\n\n/**\n * Returns the Char that represents this numeric digit value in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this value is not in the range `0 until radix`.\n *\n * If this value is less than `10`, the decimal digit Char with code `'0'.code + this` is returned.\n * Otherwise, the uppercase Latin letter with code `'A'.code + this - 10` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(radix: Int): Char {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"Invalid radix: $radix. Valid radix values are in range 2..36\")\n    }\n    if (this < 0 || this >= radix) {\n        throw IllegalArgumentException(\"Digit $this does not represent a valid digit in radix $radix\")\n    }\n    return if (this < 10) {\n        '0' + this\n    } else {\n        'A' + this - 10\n    }\n}\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toLowerCase(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercaseChar(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercase(): String\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toUpperCase(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercaseChar(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercase(): String\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.titlecaseChar(): Char\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.titlecase()` returns `\"\\u0046\\u0066\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no title case mapping, the result of [uppercase] is returned instead.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic fun Char.titlecase(): String = titlecaseImpl()\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [uppercaseChar] to each character produces the same result\n *   - Applying the method [lowercaseChar] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    val thisUpper = this.uppercaseChar()\n    val otherUpper = other.uppercaseChar()\n\n    return thisUpper == otherUpper || thisUpper.lowercaseChar() == otherUpper.lowercaseChar()\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic expect val Char.category: CharCategory\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDefined(): Boolean\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetter(): Boolean\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetterOrDigit(): Boolean\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDigit(): Boolean\n\n/**\n * Returns `true` if this character is an upper case letter.\n *\n * A character is considered to be an upper case letter if its [category] is [CharCategory.UPPERCASE_LETTER].\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isUpperCase(): Boolean\n\n/**\n * Returns `true` if this character is a lower case letter.\n *\n * A character is considered to be a lower case letter if its [category] is [CharCategory.LOWERCASE_LETTER].\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLowerCase(): Boolean\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isTitleCase(): Boolean\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isISOControl(): Boolean\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic expect fun Char.isWhitespace(): Boolean\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Long.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].code\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].code\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.native.concurrent.SharedImmutable\n\n/**\n * Defines deep recursive function that keeps its stack on the heap,\n * which allows very deep recursive computations that do not use the actual call stack.\n * To initiate a call to this deep recursive function use its [invoke] function.\n * As a rule of thumb, it should be used if recursion goes deeper than a thousand calls.\n *\n * The [DeepRecursiveFunction] takes one parameter of type [T] and returns a result of type [R].\n * The [block] of code defines the body of a recursive function. In this block\n * [callRecursive][DeepRecursiveScope.callRecursive] function can be used to make a recursive call\n * to the declared function. Other instances of [DeepRecursiveFunction] can be called\n * in this scope with `callRecursive` extension, too.\n *\n * For example, take a look at the following recursive tree class and a deeply\n * recursive instance of this tree with 100K nodes:\n *\n * ```\n * class Tree(val left: Tree? = null, val right: Tree? = null)\n * val deepTree = generateSequence(Tree()) { Tree(it) }.take(100_000).last()\n * ```\n *\n * A regular recursive function can be defined to compute a depth of a tree:\n *\n * ```\n * fun depth(t: Tree?): Int =\n *     if (t == null) 0 else max(depth(t.left), depth(t.right)) + 1\n * println(depth(deepTree)) // StackOverflowError\n * ```\n *\n * If this `depth` function is called for a `deepTree` it produces [StackOverflowError] because of deep recursion.\n * However, the `depth` function can be rewritten using `DeepRecursiveFunction` in the following way, and then\n * it successfully computes [`depth(deepTree)`][DeepRecursiveFunction.invoke] expression:\n *\n * ```\n * val depth = DeepRecursiveFunction<Tree?, Int> { t ->\n *     if (t == null) 0 else max(callRecursive(t.left), callRecursive(t.right)) + 1\n * }\n * println(depth(deepTree)) // Ok\n * ```\n *\n * Deep recursive functions can also mutually call each other using a heap for the stack via\n * [callRecursive][DeepRecursiveScope.callRecursive] extension. For example, the\n * following pair of mutually recursive functions computes the number of tree nodes at even depth in the tree.\n *\n * ```\n * val mutualRecursion = object {\n *     val even: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else odd.callRecursive(t.left) + odd.callRecursive(t.right) + 1\n *     }\n *     val odd: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else even.callRecursive(t.left) + even.callRecursive(t.right)\n *     }\n * }\n * ```\n *\n * @param [T] the function parameter type.\n * @param [R] the function result type.\n * @param block the function body.\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic class DeepRecursiveFunction<T, R>(\n    internal val block: suspend DeepRecursiveScope<T, R>.(T) -> R\n)\n\n/**\n * Initiates a call to this deep recursive function, forming a root of the call tree.\n *\n * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for\n * initial recursive invocation. From inside of [DeepRecursiveScope] use\n * [callRecursive][DeepRecursiveScope.callRecursive].\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R =\n    DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()\n\n/**\n * A scope class for [DeepRecursiveFunction] function declaration that defines [callRecursive] methods to\n * recursively call this function or another [DeepRecursiveFunction] putting the call activation frame on the heap.\n *\n * @param [T] function parameter type.\n * @param [R] function result type.\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\npublic sealed class DeepRecursiveScope<T, R> {\n    /**\n     * Makes recursive call to this [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular recursive call.\n     */\n    public abstract suspend fun callRecursive(value: T): R\n\n    /**\n     * Makes call to the specified [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular call.\n     */\n    public abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S\n\n    @Deprecated(\n        level = DeprecationLevel.ERROR,\n        message =\n        \"'invoke' should not be called from DeepRecursiveScope. \" +\n                \"Use 'callRecursive' to do recursion in the heap instead of the call stack.\",\n        replaceWith = ReplaceWith(\"this.callRecursive(value)\")\n    )\n    @Suppress(\"UNUSED_PARAMETER\")\n    public operator fun DeepRecursiveFunction<*, *>.invoke(value: Any?): Nothing =\n        throw UnsupportedOperationException(\"Should not be called from DeepRecursiveScope\")\n}\n\n// ================== Implementation ==================\n\n@ExperimentalStdlibApi\nprivate typealias DeepRecursiveFunctionBlock = suspend DeepRecursiveScope<*, *>.(Any?) -> Any?\n\n@SharedImmutable\nprivate val UNDEFINED_RESULT = Result.success(COROUTINE_SUSPENDED)\n\n@Suppress(\"UNCHECKED_CAST\")\n@ExperimentalStdlibApi\nprivate class DeepRecursiveScopeImpl<T, R>(\n    block: suspend DeepRecursiveScope<T, R>.(T) -> R,\n    value: T\n) : DeepRecursiveScope<T, R>(), Continuation<R> {\n    // Active function block\n    private var function: DeepRecursiveFunctionBlock = block as DeepRecursiveFunctionBlock\n\n    // Value to call function with\n    private var value: Any? = value\n\n    // Continuation of the current call\n    private var cont: Continuation<Any?>? = this as Continuation<Any?>\n\n    // Completion result (completion of the whole call stack)\n    private var result: Result<Any?> = UNDEFINED_RESULT\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<R>) {\n        this.cont = null\n        this.result = result\n    }\n\n    override suspend fun callRecursive(value: T): R = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling the same function that is currently active\n        this.cont = cont as Continuation<Any?>\n        this.value = value\n        COROUTINE_SUSPENDED\n    }\n\n    override suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling another recursive function\n        val function = block as DeepRecursiveFunctionBlock\n        with(this@DeepRecursiveScopeImpl) {\n            val currentFunction = this.function\n            if (function !== currentFunction) {\n                // calling a different function -- create a trampoline to restore function ref\n                this.function = function\n                this.cont = crossFunctionCompletion(currentFunction, cont as Continuation<Any?>)\n            } else {\n                // calling the same function -- direct\n                this.cont = cont as Continuation<Any?>\n            }\n            this.value = value\n        }\n        COROUTINE_SUSPENDED\n    }\n\n    private fun crossFunctionCompletion(\n        currentFunction: DeepRecursiveFunctionBlock,\n        cont: Continuation<Any?>\n    ): Continuation<Any?> = Continuation(EmptyCoroutineContext) {\n        this.function = currentFunction\n        // When going back from a trampoline we cannot just call cont.resume (stack usage!)\n        // We delegate the cont.resumeWith(it) call to runCallLoop\n        this.cont = cont\n        this.result = it\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun runCallLoop(): R {\n        while (true) {\n            // Note: cont is set to null in DeepRecursiveScopeImpl.resumeWith when the whole computation completes\n            val result = this.result\n            val cont = this.cont\n                ?: return (result as Result<R>).getOrThrow() // done -- final result\n            // The order of comparison is important here for that case of rogue class with broken equals\n            if (UNDEFINED_RESULT == result) {\n                // call \"function\" with \"value\" using \"cont\" as completion\n                val r = try {\n                    // This is block.startCoroutine(this, value, cont)\n                    function.startCoroutineUninterceptedOrReturn(this, value, cont)\n                } catch (e: Throwable) {\n                    cont.resumeWithException(e)\n                    continue\n                }\n                // If the function returns without suspension -- calls its continuation immediately\n                if (r !== COROUTINE_SUSPENDED)\n                    cont.resume(r as R)\n            } else {\n                // we returned from a crossFunctionCompletion trampoline -- call resume here\n                this.result = UNDEFINED_RESULT // reset result back\n                cont.resumeWith(result)\n            }\n        }\n    }\n}\n","package org.gciatto.kt.math\n\n/*\n * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n * Portions Copyright IBM Corporation, 2001. All Rights Reserved.\n */\n\nimport org.gciatto.kt.math.BigInteger.Companion.LONG_MASK\nimport kotlin.js.JsName\nimport kotlin.math.*\n\n/**\n * Immutable, arbitrary-precision signed decimal numbers.  A\n * [BigDecimal] consists of an arbitrary precision integer\n * *unscaled value* and a 32-bit integer *scale*.  If zero\n * or positive, the scale is the number of digits to the right of the\n * decimal point.  If negative, the unscaled value of the number is\n * multiplied by ten to the power of the negation of the scale.  The\n * value of the number represented by the [BigDecimal] is\n * therefore `unscaledValue  10^(-scale)`.\n *\n *\n * The [BigDecimal] class provides operations for\n * arithmetic, scale manipulation, rounding, comparison, hashing, and\n * format conversion.  The [BigDecimal.toString] method provides a\n * canonical representation of a [BigDecimal].\n *\n *\n * The [BigDecimal] class gives its user complete control\n * over rounding behavior.  If no rounding mode is specified and the\n * exact result cannot be represented, an exception is thrown;\n * otherwise, calculations can be carried out to a chosen _precision\n * and rounding mode by supplying an appropriate [MathContext]\n * object to the operation.  In either case, eight *rounding\n * modes* are provided for the control of rounding.  Using the\n * integer fields in this class (such as [BigDecimal.ROUND_HALF_UP]) to\n * represent rounding mode is deprecated; the enumeration values\n * of the [RoundingMode] `enum`, (such as [RoundingMode.HALF_UP]) should be used instead.\n *\n *\n * When a [MathContext] object is supplied with a _precision\n * setting of 0 (for example, [MathContext.UNLIMITED]),\n * arithmetic operations are exact, as are the arithmetic methods\n * which take no [MathContext] object.  (This is the only\n * behavior that was supported in releases prior to 5.)  As a\n * corollary of computing the exact result, the rounding mode setting\n * of a [MathContext] object with a _precision setting of 0 is\n * not used and thus irrelevant.  In the case of div, the exact\n * quotient could have an infinitely long decimal expansion; for\n * example, 1 divided by 3.  If the quotient has a nonterminating\n * decimal expansion and the operation is specified to return an exact\n * result, an [ArithmeticException] is thrown.  Otherwise, the\n * exact result of the division is returned, as done for other\n * operations.\n *\n *\n * When the _precision setting is not 0, the rules of\n * [BigDecimal] arithmetic are broadly compatible with selected\n * modes of operation of the arithmetic defined in ANSI X3.274-1996\n * and ANSI X3.274-1996/AM 1-2000 (section 7.4).  Unlike those\n * standards, [BigDecimal] includes many rounding modes, which\n * were mandatory for division in [BigDecimal] releases prior\n * to 5.  Any conflicts between these ANSI standards and the\n * [BigDecimal] specification are resolved in favor of\n * [BigDecimal].\n *\n *\n * Since the same numerical value can have different\n * representations (with different scales), the rules of arithmetic\n * and rounding must specify both the numerical result and the scale\n * used in the result's representation.\n *\n *\n *\n * In general the rounding modes and precision setting determine\n * how operations return results with a limited number of digits when\n * the exact result has more digits (perhaps infinitely many in the\n * case of division and square root) than the number of digits returned.\n *\n * First, the\n * total number of digits to return is specified by the\n * [MathContext]'s `precision` setting; this determines\n * the result's *precision*.  The digit count starts from the\n * leftmost nonzero digit of the exact result.  The rounding mode\n * determines how any discarded trailing digits affect the returned\n * result.\n *\n *\n * For all arithmetic operators , the operation is carried out as\n * though an exact intermediate result were first calculated and then\n * rounded to the number of digits specified by the precision setting\n * (if necessary), using the selected rounding mode.  If the exact\n * result is not returned, some digit positions of the exact result\n * are discarded.  When rounding increases the magnitude of the\n * returned result, it is possible for a new digit position to be\n * created by a carry propagating to a leading &quot;9&quot; digit.\n * For example, rounding the value 999.9 to three digits rounding up\n * would be numerically equal to one thousand, represented as\n * `10010^1`.  In such cases, the new &quot;1&quot; is\n * the leading digit position of the returned result.\n *\n *\n * Besides a logical exact result, each arithmetic operation has a\n * preferred scale for representing a result.  The preferred\n * scale for each operation is listed in the table below.\n *\n * <table class=\"striped\" style=\"text-align:left\">\n * <caption>Preferred Scales for Results of Arithmetic Operations\n</caption> *\n * <thead>\n * <tr><th scope=\"col\">Operation</th><th scope=\"col\">Preferred Scale of Result</th></tr>\n</thead> *\n * <tbody>\n * <tr><th scope=\"row\">Add</th><td>max(addend.scale, augend.scale)</td>\n</tr> * <tr><th scope=\"row\">Subtract</th><td>max(minuend.scale, subtrahend.scale)</td>\n</tr> * <tr><th scope=\"row\">Multiply</th><td>multiplier.scale + multiplicand.scale</td>\n</tr> * <tr><th scope=\"row\">Divide</th><td>dividend.scale - divisor.scale</td>\n</tr> * <tr><th scope=\"row\">Square root</th><td>radicand.scale/2</td>\n</tr></tbody> *\n</table> *\n *\n * These scales are the ones used by the methods which return exact\n * arithmetic results; except that an exact div may have to use a\n * larger scale since the exact result may have more digits.  For\n * example, `1/32` is `0.03125`.\n *\n *\n * Before rounding, the scale of the logical exact intermediate\n * result is the preferred scale for that operation.  If the exact\n * numerical result cannot be represented in `precision`\n * digits, rounding selects the set of digits to return and the scale\n * of the result is reduced from the scale of the intermediate result\n * to the least scale which can represent the `precision`\n * digits actually returned.  If the exact result can be represented\n * with at most `precision` digits, the representation\n * of the result with the scale closest to the preferred scale is\n * returned.  In particular, an exactly representable quotient may be\n * represented in fewer than `precision` digits by removing\n * trailing zeros and decreasing the scale.  For example, rounding to\n * three digits using the [floor][RoundingMode.FLOOR]\n * rounding mode, <br></br>\n *\n * `19/100 = 0.19   // integer=19,  scale=2` <br></br>\n *\n * but<br></br>\n *\n * `21/110 = 0.190  // integer=190, scale=3` <br></br>\n *\n *\n * Note that for plus, minus, and timesLong, the reduction in\n * scale will equal the number of digit positions of the exact result\n * which are discarded. If the rounding causes a carry propagation to\n * create a new high-order digit position, an additional digit of the\n * result is discarded than when no new digit position is created.\n *\n *\n * Other methods may have slightly different rounding semantics.\n * For example, the result of the `pow` method using the\n * [specified algorithm][BigDecimal.pow] can\n * occasionally differ from the rounded mathematical result by more\n * than one unit in the last place, one *[ulp][BigDecimal.ulp]*.\n *\n *\n * Two types of operations are provided for manipulating the scale\n * of a [BigDecimal]: scaling/rounding operations and decimal\n * point motion operations.  Scaling/rounding operations ([setScale][BigDecimal.setScale] and [round][BigDecimal.round]) return a\n * [BigDecimal] whose value is approximately (or exactly) equal\n * to that of the operand, but whose scale or _precision is the\n * specified value; that is, they increase or decrease the _precision\n * of the stored number with minimal effect on its value.  Decimal\n * point motion operations ([movePointLeft][BigDecimal.movePointLeft] and\n * [movePointRight][BigDecimal.movePointRight]) return a\n * [BigDecimal] created from the operand by moving the decimal\n * point a specified distance in the specified direction.\n *\n *\n * For the sake of brevity and clarity, pseudo-code is used\n * throughout the descriptions of [BigDecimal] methods.  The\n * pseudo-code expression `(i + j)` is shorthand for \"a\n * [BigDecimal] whose value is that of the [BigDecimal]\n * `i` added to that of the [BigDecimal]\n * `j`.\" The pseudo-code expression `(i == j)` is\n * shorthand for \"`true` if and only if the\n * [BigDecimal] `i` represents the same value as the\n * [BigDecimal] `j`.\" Other pseudo-code expressions\n * are interpreted similarly.  Square brackets are used to represent\n * the particular [BigInteger] and scale pair defining a\n * [BigDecimal] value; for example `[19, 2]` is the\n * [BigDecimal] numerically equal to 0.19 having a scale of 2.\n *\n *\n *\n * All methods and constructors for this class throw\n * [NullPointerException] when passed a `null` object\n * reference for any input parameter.\n *\n * @apiNote Care should be exercised if [BigDecimal] objects\n * are used as keys in sorted data structures,\n * since [BigDecimal]'s *natural ordering* is *inconsistent\n * with equals*.  See [Comparable], for more information.\n *\n * @see BigInteger\n *\n * @see MathContext\n *\n * @see RoundingMode\n *\n *\n * @author  Josh Bloch\n * @author  Mike Cowlishaw\n * @author  Joseph D. Darcy\n * @author  Sergey V. Kuksenko\n * @since 1.1\n */\n@Suppress(\"NAME_SHADOWING\", \"DEPRECATION\", \"UNREACHABLE_CODE\", \"UNUSED_PARAMETER\")\nclass BigDecimal : Comparable<BigDecimal> {\n\n    /**\n     * The unscaled value of this BigDecimal, as returned by [BigDecimal.unscaledValue].\n     *\n     * @serial\n     * @see BigDecimal.unscaledValue\n     */\n    private val _intVal: BigInteger?\n\n    /**\n     * The scale of this [BigDecimal], as returned by [BigDecimal.scale].\n     *\n     * @serial\n     * @see BigDecimal.scale\n     */\n    private val _scale: Int  // Note: this may have any value, so\n    // calculations must be done in longs\n\n    /**\n     * The number of decimal digits in this BigDecimal, or 0 if the\n     * number of digits are not known (lookaside information).  If\n     * nonzero, the value is guaranteed correct.  Use the [BigDecimal.precision]\n     * property to obtain and set the value if it might be 0.  This\n     * field is mutable until set nonzero.\n     *\n     * @since  1.5\n     */\n    private var _precision: Int = 0\n\n    /**\n     * Used to store the canonical string representation, if computed.\n     */\n    private var _stringCache: String? = null\n\n    /**\n     * If the absolute value of the significand of this BigDecimal is\n     * less than or equal to [Long.MAX_VALUE], the value can be\n     * compactly stored in this field and used in computations.\n     */\n    private val _intCompact: Long\n\n    private val isPowerOfTen: Boolean\n        get() = BigInteger.ONE == this.unscaledValue\n\n    // Constructors\n\n    /**\n     * Trusted package private constructor.\n     * Trusted simply means if val is [INFLATED], [_intVal] could not be null and\n     * if [_intVal] is null, val could not be [INFLATED].\n     */\n    internal constructor(intVal: BigInteger?, `val`: Long, scale: Int, prec: Int) {\n        this._scale = scale\n        this._precision = prec\n        this._intCompact = `val`\n        this._intVal = intVal\n    }\n\n    /**\n     * Translates a character array representation of a\n     * [BigDecimal] into a [BigDecimal], accepting the\n     * same sequence of characters as the aforementioned\n     * constructor, while allowing a sub-array to be specified and\n     * with rounding according to the context settings.\n     *\n     * @implNote If the sequence of characters is already available\n     * within a character array, using this constructor is faster than\n     * converting the [CharArray] to string and using the\n     * `BigDecimal(String)` constructor.\n     *\n     * @param  in [CharArray] that is the source of characters.\n     * @param  offset first character in the array to inspect.\n     * @param  len number of characters to consider.\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is [UNNECESSARY][RoundingMode.UNNECESSARY].\n     * @throws NumberFormatException if `in` is not a valid\n     * representation of a [BigDecimal] or the defined subarray\n     * is not wholly within `in`.\n     * @since  1.5\n     */\n    internal constructor(`in`: CharArray, offset: Int = 0, len: Int = `in`.size, mc: MathContext = MathContext.UNLIMITED) {\n        var offset = offset\n        var len = len\n        // protect against huge length.\n        if (offset + len > `in`.size || offset < 0)\n            throw NumberFormatException(\"Bad offset or len arguments for char[] input.\")\n        // This is the primary string to BigDecimal constructor; all\n        // incoming strings end up here; it uses explicit (inline)\n        // parsing for speed and generates at most one intermediate\n        // (temporary) object (a char[] array) for non-compact case.\n\n        // Use locals for all fields values until completion\n        var prec = 0                 // record precision value\n        var scl = 0                  // record scale value\n        var rs: Long = 0                  // the compact value in long\n        var rb: BigInteger? = null         // the inflated value in BigInteger\n        // use array bounds checking to handle too-long, len == 0,\n        // bad offset, etc.\n        try {\n            // handle the sign\n            var isneg = false          // assume positive\n            if (`in`[offset] == '-') {\n                isneg = true               // leading minus means negative\n                offset++\n                len--\n            } else if (`in`[offset] == '+') { // leading + allowed\n                offset++\n                len--\n            }\n\n            // should now be at numeric part of the significand\n            var dot = false             // true when there is a '.'\n            var exp: Long = 0                    // exponent\n            var c: Char                          // current character\n            val isCompact = len <= MAX_COMPACT_DIGITS\n            // integer significand array & idx is the index to it. The array\n            // is ONLY used when we can't use a compact representation.\n            var idx = 0\n            if (isCompact) {\n                // First compact case, we need not to preserve the character\n                // and we can just compute the value in place.\n                while (len > 0) {\n                    c = `in`[offset]\n                    if (c == '0') { // have zero\n                        if (prec == 0)\n                            prec = 1\n                        else if (rs != 0L) {\n                            rs *= 10\n                            ++prec\n                        } // else digit is a redundant leading zero\n                        if (dot)\n                            ++scl\n                    } else if (c in '1'..'9') { // have digit\n                        val digit = c - '0'\n                        if (prec != 1 || rs != 0L)\n                            ++prec // prec unchanged if preceded by 0s\n                        rs = rs * 10 + digit\n                        if (dot)\n                            ++scl\n                    } else if (c == '.') {   // have dot\n                        // have dot\n                        if (dot)\n                        // two dots\n                            throw NumberFormatException(\"Character array\" + \" contains more than one decimal point.\")\n                        dot = true\n                    } else if (c.isDigit()) { // slow path\n                        val digit = c.toDigit(10)\n                        if (digit == 0) {\n                            if (prec == 0)\n                                prec = 1\n                            else if (rs != 0L) {\n                                rs *= 10\n                                ++prec\n                            } // else digit is a redundant leading zero\n                        } else {\n                            if (prec != 1 || rs != 0L)\n                                ++prec // prec unchanged if preceded by 0s\n                            rs = rs * 10 + digit\n                        }\n                        if (dot)\n                            ++scl\n                    } else if (c == 'e' || c == 'E') {\n                        exp = parseExp(`in`, offset, len)\n                        // Next test is required for backwards compatibility\n                        if (exp.toInt().toLong() != exp)\n                        // overflow\n                            throw NumberFormatException(\"Exponent overflow.\")\n                        break // [saves a test]\n                    } else {\n                        throw NumberFormatException(\n                            \"Character \" + c\n                                    + \" is neither a decimal digit number, decimal point, nor\"\n                                    + \" \\\"e\\\" notation exponential mark.\"\n                        )\n                    }\n                    offset++\n                    len--\n                }\n                if (prec == 0)\n                // no digits found\n                    throw NumberFormatException(\"No digits found.\")\n                // Adjust _scale if exp is not zero.\n                if (exp != 0L) { // had significant exponent\n                    scl = adjustScale(scl, exp)\n                }\n                rs = if (isneg) -rs else rs\n                val mcp = mc.precision\n                var drop = prec - mcp // prec has range [1, MAX_INT], mcp has range [0, MAX_INT];\n                // therefore, this minus cannot overflow\n                if (mcp > 0 && drop > 0) {  // do rounding\n                    while (drop > 0) {\n                        scl = checkScaleNonZero(scl.toLong() - drop)\n                        rs = divideAndRound(rs, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                        prec = longDigitLength(rs)\n                        drop = prec - mcp\n                    }\n                }\n            } else {\n                val coeff = CharArray(len)\n                while (len > 0) {\n                    c = `in`[offset]\n                    // have digit\n                    if (c in '0'..'9' || c.isDigit()) {\n                        // First compact case, we need not to preserve the character\n                        // and we can just compute the value in place.\n                        if (c == '0' || c.toDigit(10) == 0) {\n                            if (prec == 0) {\n                                coeff[idx] = c\n                                prec = 1\n                            } else if (idx != 0) {\n                                coeff[idx++] = c\n                                ++prec\n                            } // else c must be a redundant leading zero\n                        } else {\n                            if (prec != 1 || idx != 0)\n                                ++prec // prec unchanged if preceded by 0s\n                            coeff[idx++] = c\n                        }\n                        if (dot)\n                            ++scl\n                        offset++\n                        len--\n                        continue\n                    }\n                    // have dot\n                    if (c == '.') {\n                        // have dot\n                        if (dot)\n                        // two dots\n                            throw NumberFormatException(\"Character array\" + \" contains more than one decimal point.\")\n                        dot = true\n                        offset++\n                        len--\n                        continue\n                    }\n                    // exponent expected\n                    if (c != 'e' && c != 'E')\n                        throw NumberFormatException(\"Character array\" + \" is missing \\\"e\\\" notation exponential mark.\")\n                    exp = parseExp(`in`, offset, len)\n                    // Next test is required for backwards compatibility\n                    if (exp.toInt().toLong() != exp)\n                    // overflow\n                        throw NumberFormatException(\"Exponent overflow.\")\n                    break // [saves a test]\n                    offset++\n                    len--\n                }\n                // here when no characters left\n                if (prec == 0)\n                // no digits found\n                    throw NumberFormatException(\"No digits found.\")\n                // Adjust _scale if exp is not zero.\n                if (exp != 0L) { // had significant exponent\n                    scl = adjustScale(scl, exp)\n                }\n                // Remove leading zeros from _precision (digits count)\n                rb = BigInteger(coeff, if (isneg) -1 else 1, prec)\n                rs = compactValFor(rb)\n                val mcp = mc.precision\n                if (mcp in 1 until prec) {\n                    if (rs == INFLATED) {\n                        var drop = prec - mcp\n                        while (drop > 0) {\n                            scl = checkScaleNonZero(scl.toLong() - drop)\n                            rb = divideAndRoundByTenPow(rb!!, drop, mc.roundingMode.oldMode)\n                            rs = compactValFor(rb)\n                            if (rs != INFLATED) {\n                                prec = longDigitLength(rs)\n                                break\n                            }\n                            prec = bigDigitLength(rb)\n                            drop = prec - mcp\n                        }\n                    }\n                    if (rs != INFLATED) {\n                        var drop = prec - mcp\n                        while (drop > 0) {\n                            scl = checkScaleNonZero(scl.toLong() - drop)\n                            rs = divideAndRound(rs, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                            prec = longDigitLength(rs)\n                            drop = prec - mcp\n                        }\n                        rb = null\n                    }\n                }\n            }\n        } catch (e: IndexOutOfBoundsException) {\n            val nfe = NumberFormatException()\n            throw nfe\n        } catch (e: RuntimeException) {\n            val nfe = NumberFormatException()\n            throw nfe\n        }\n\n        this._scale = scl\n        this._precision = prec\n        this._intCompact = rs\n        this._intVal = rb\n    }\n\n    private fun adjustScale(scl: Int, exp: Long): Int {\n        var scl = scl\n        val adjustedScale = scl - exp\n        if (adjustedScale > Int.MAX_VALUE || adjustedScale < Int.MIN_VALUE)\n            throw NumberFormatException(\"Scale out of range.\")\n        scl = adjustedScale.toInt()\n        return scl\n    }\n\n    /**\n     * Translates a character array representation of a\n     * [BigDecimal] into a [BigDecimal], accepting the\n     * same sequence of characters as the aforementioned\n     * constructor and with rounding according to the context\n     * settings.\n     *\n     * @implNote If the sequence of characters is already available\n     * as a character array, using this constructor is faster than\n     * converting the `char` array to string and using the\n     * `BigDecimal(String)` constructor.\n     *\n     * @param  in `Char` array that is the source of characters.\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @throws NumberFormatException if `in` is not a valid\n     * representation of a [BigDecimal].\n     * @since  1.5\n     */\n    internal constructor(`in`: CharArray, mc: MathContext) : this(`in`, 0, `in`.size, mc)\n\n    /**\n     * Translates the string representation of a [BigDecimal]\n     * into a [BigDecimal].  The string representation consists\n     * of an optional sign, `'+'` (` '&#92;u002B'`) or\n     * `'-'` (`'&#92;u002D'`), followed by a sequence of\n     * zero or more decimal digits (\"the integer\"), optionally\n     * followed by a fraction, optionally followed by an exponent.\n     *\n     *\n     * The fraction consists of a decimal point followed by zero\n     * or more decimal digits.  The string must contain at least one\n     * digit in either the integer or the fraction.  The number formed\n     * by the sign, the integer and the fraction is referred to as the\n     * *significand*.\n     *\n     *\n     * The exponent consists of the character `'e'`\n     * (`'&#92;u0065'`) or `'E'` (`'&#92;u0045'`)\n     * followed by one or more decimal digits.  The value of the\n     * exponent must lie between -[Int.MAX_VALUE] ([ ][Int.MIN_VALUE]+1) and [Int.MAX_VALUE], inclusive.\n     *\n     *\n     * More formally, the strings this constructor accepts are\n     * described by the following grammar:\n     * <blockquote>\n     * <dl>\n     * <dt>*BigDecimalString:*\n    </dt> * <dd>*Sign<sub>opt</sub> Significand Exponent<sub>opt</sub>*\n    </dd> * <dt>*Sign:*\n    </dt> * <dd>`+`\n    </dd> * <dd>`-`\n    </dd> * <dt>*Significand:*\n    </dt> * <dd>*IntegerPart* `.` *FractionPart<sub>opt</sub>*\n    </dd> * <dd>`.` *FractionPart*\n    </dd> * <dd>*IntegerPart*\n    </dd> * <dt>*IntegerPart:*\n    </dt> * <dd>*Digits*\n    </dd> * <dt>*FractionPart:*\n    </dt> * <dd>*Digits*\n    </dd> * <dt>*Exponent:*\n    </dt> * <dd>*ExponentIndicator SignedInteger*\n    </dd> * <dt>*ExponentIndicator:*\n    </dt> * <dd>`e`\n    </dd> * <dd>`E`\n    </dd> * <dt>*SignedInteger:*\n    </dt> * <dd>*Sign<sub>opt</sub> Digits*\n    </dd> * <dt>*Digits:*\n    </dt> * <dd>*Digit*\n    </dd> * <dd>*Digits Digit*\n    </dd> * <dt>*Digit:*\n    </dt> * <dd>any character for which [Character.isDigit]\n     * returns `true`, including 0, 1, 2 ...\n    </dd></dl> *\n    </blockquote> *\n     *\n     *\n     * The _scale of the returned [BigDecimal] will be the\n     * number of digits in the fraction, or zero if the string\n     * contains no decimal point, subject to adjustment for any\n     * exponent; if the string contains an exponent, the exponent is\n     * subtracted from the _scale.  The value of the resulting _scale\n     * must lie between `Int.MIN_VALUE` and\n     * `Int.MAX_VALUE`, inclusive.\n     *\n     *\n     * The character-to-digit mapping is provided by [ ][java.lang.Character.digit] set to convert to radix 10.  The\n     * String may not contain any extraneous characters (whitespace,\n     * for example).\n     *\n     *\n     * **Examples:**<br></br>\n     * The value of the returned [BigDecimal] is equal to\n     * *significand*  10<sup>&nbsp;*exponent*</sup>.\n     * For each string on the left, the resulting representation\n     * [[BigInteger], `_scale`] is shown on the right.\n     * <pre>\n     * \"0\"            [0,0]\n     * \"0.00\"         [0,2]\n     * \"123\"          [123,0]\n     * \"-123\"         [-123,0]\n     * \"1.23E3\"       [123,-1]\n     * \"1.23E+3\"      [123,-1]\n     * \"12.3E+7\"      [123,-6]\n     * \"12.0\"         [120,1]\n     * \"12.3\"         [123,1]\n     * \"0.00123\"      [123,5]\n     * \"-1.23E-12\"    [-123,14]\n     * \"1234.5E-4\"    [12345,5]\n     * \"0E+7\"         [0,-7]\n     * \"-0\"           [0,0]\n    </pre> *\n     *\n     * @apiNote For values other than `float` and\n     * `double` NaN and Infinity, this constructor is\n     * compatible with the values returned by [Float.toString]\n     * and [Double.toString].  This is generally the preferred\n     * way to convert a `float` or `double` into a\n     * BigDecimal, as it doesn't suffer from the unpredictability of\n     * the aforementioned constructor.\n     *\n     * @param val String representation of [BigDecimal].\n     *\n     * @throws NumberFormatException if `val` is not a valid\n     * representation of a [BigDecimal].\n     */\n    internal constructor(`val`: String) : this(`val`.toCharArray(), 0, `val`.length)\n\n    /**\n     * Translates the string representation of a [BigDecimal]\n     * into a [BigDecimal], accepting the same strings as the\n     * aforementioned constructor, with rounding\n     * according to the context settings.\n     *\n     * @param  val string representation of a [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @throws NumberFormatException if `val` is not a valid\n     * representation of a BigDecimal.\n     * @since  1.5\n     */\n    internal constructor(`val`: String, mc: MathContext) : this(`val`.toCharArray(), 0, `val`.length, mc)\n\n    /**\n     * Translates a `double` into a [BigDecimal], with\n     * rounding according to the context settings.  The _scale of the\n     * [BigDecimal] is the smallest value such that\n     * `(10<sup>_scale</sup>  val)` is an integer.\n     *\n     *\n     * The results of this constructor can be somewhat unpredictable\n     * and its use is generally not recommended; see the notes under\n     * the aforementioned constructor.\n     *\n     * @param  val `double` value to be converted to\n     * [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * RoundingMode is UNNECESSARY.\n     * @throws NumberFormatException if `val` is infinite or NaN.\n     * @since  1.5\n     */\n    constructor(`val`: Double, mc: MathContext = MathContext.UNLIMITED) {\n        if (`val`.isInfinite() || `val`.isInfinite())\n            throw NumberFormatException(\"Infinite or NaN\")\n        // Translate the double into sign, exponent and significand, according\n        // to the formulae in JLS, Section 20.10.22.\n        val valBits = `val`.toBits()\n        val sign = if (valBits shr 63 == 0L) 1 else -1\n        var exponent = (valBits shr 52 and 0x7ffL).toInt()\n        var significand = if (exponent == 0)\n            valBits and (1L shl 52) - 1 shl 1\n        else\n            valBits and (1L shl 52) - 1 or (1L shl 52)\n        exponent -= 1075\n        // At this point, val == sign * significand * 2**exponent.\n\n        /*\n         * Special case zero to supress nonterminating normalization and bogus\n         * _scale calculation.\n         */\n        if (significand == 0L) {\n            this._intVal = BigInteger.ZERO\n            this._scale = 0\n            this._intCompact = 0\n            this._precision = 1\n            return\n        }\n        // Normalize\n        while (significand and 1 == 0L) { // i.e., significand is even\n            significand = significand shr 1\n            exponent++\n        }\n        var scl = 0\n        // Calculate _intVal and _scale\n        var rb: BigInteger?\n        var compactVal = sign * significand\n        if (exponent == 0) {\n            rb = if (compactVal == INFLATED) INFLATED_BIGINT else null\n        } else {\n            if (exponent < 0) {\n                rb = BigInteger.of(5).pow(-exponent).timesLong(compactVal)\n                scl = -exponent\n            } else { //  (exponent > 0)\n                rb = BigInteger.TWO.pow(exponent).timesLong(compactVal)\n            }\n            compactVal = compactValFor(rb)\n        }\n        var prec = 0\n        val mcp = mc.precision\n        if (mcp > 0) { // do rounding\n            val mode = mc.roundingMode.oldMode\n            var drop: Int\n            if (compactVal == INFLATED) {\n                prec = bigDigitLength(rb!!)\n                drop = prec - mcp\n                while (drop > 0) {\n                    scl = checkScaleNonZero(scl.toLong() - drop)\n                    rb = divideAndRoundByTenPow(rb!!, drop, mode)\n                    compactVal = compactValFor(rb)\n                    if (compactVal != INFLATED) {\n                        break\n                    }\n                    prec = bigDigitLength(rb)\n                    drop = prec - mcp\n                }\n            }\n            if (compactVal != INFLATED) {\n                prec = longDigitLength(compactVal)\n                drop = prec - mcp\n                while (drop > 0) {\n                    scl = checkScaleNonZero(scl.toLong() - drop)\n                    compactVal = divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                    prec = longDigitLength(compactVal)\n                    drop = prec - mcp\n                }\n                rb = null\n            }\n        }\n        this._intVal = rb\n        this._intCompact = compactVal\n        this._scale = scl\n        this._precision = prec\n    }\n\n    /**\n     * Translates a [BigInteger] into a [BigDecimal].\n     * The _scale of the [BigDecimal] is zero.\n     *\n     * @param val [BigInteger] value to be converted to\n     * [BigDecimal].\n     */\n    internal constructor(`val`: BigInteger) {\n        _scale = 0\n        _intVal = `val`\n        _intCompact = compactValFor(`val`)\n    }\n\n    /**\n     * Translates a [BigInteger] into a [BigDecimal]\n     * rounding according to the context settings.  The _scale of the\n     * [BigDecimal] is zero.\n     *\n     * @param val [BigInteger] value to be converted to\n     * [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    internal constructor(`val`: BigInteger, mc: MathContext) : this(`val`, 0, mc) {}\n\n    /**\n     * Translates a [BigInteger] unscaled value and an\n     * `int` _scale into a [BigDecimal].  The value of\n     * the [BigDecimal] is\n     * `(unscaledVal  10<sup>-_scale</sup>)`.\n     *\n     * @param unscaledVal unscaled value of the [BigDecimal].\n     * @param scale _scale of the [BigDecimal].\n     */\n    internal constructor(unscaledVal: BigInteger, scale: Int) {\n        // Negative scales are now allowed\n        this._intVal = unscaledVal\n        this._intCompact = compactValFor(unscaledVal)\n        this._scale = scale\n    }\n\n    /**\n     * Translates a [BigInteger] unscaled value and an\n     * `int` _scale into a [BigDecimal], with rounding\n     * according to the context settings.  The value of the\n     * [BigDecimal] is `(unscaledVal\n     * 10<sup>-_scale</sup>)`, rounded according to the\n     * `_precision` and rounding mode settings.\n     *\n     * @param  unscaledVal unscaled value of the [BigDecimal].\n     * @param  scale _scale of the [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    internal constructor(unscaledVal: BigInteger?, scale: Int, mc: MathContext) {\n        var unscaledVal = unscaledVal\n        var scale = scale\n        var compactVal = compactValFor(unscaledVal!!)\n        val mcp = mc.precision\n        var prec = 0\n        if (mcp > 0) { // do rounding\n            val mode = mc.roundingMode.oldMode\n            if (compactVal == INFLATED) {\n                prec = bigDigitLength(unscaledVal)\n                var drop = prec - mcp\n                while (drop > 0) {\n                    scale = checkScaleNonZero(scale.toLong() - drop)\n                    unscaledVal = divideAndRoundByTenPow(unscaledVal!!, drop, mode)\n                    compactVal = compactValFor(unscaledVal)\n                    if (compactVal != INFLATED) {\n                        break\n                    }\n                    prec = bigDigitLength(unscaledVal)\n                    drop = prec - mcp\n                }\n            }\n            if (compactVal != INFLATED) {\n                prec = longDigitLength(compactVal)\n                var drop = prec - mcp     // drop can't be more than 18\n                while (drop > 0) {\n                    scale = checkScaleNonZero(scale.toLong() - drop)\n                    compactVal = divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mode)\n                    prec = longDigitLength(compactVal)\n                    drop = prec - mcp\n                }\n                unscaledVal = null\n            }\n        }\n        this._intVal = unscaledVal\n        this._intCompact = compactVal\n        this._scale = scale\n        this._precision = prec\n    }\n\n    /**\n     * Translates an `int` into a [BigDecimal].  The\n     * _scale of the [BigDecimal] is zero.\n     *\n     * @param val `int` value to be converted to\n     * [BigDecimal].\n     * @since  1.5\n     */\n    internal constructor(`val`: Int) {\n        this._intCompact = `val`.toLong()\n        this._scale = 0\n        this._intVal = null\n    }\n\n    /**\n     * Translates an `int` into a [BigDecimal], with\n     * rounding according to the context settings.  The _scale of the\n     * [BigDecimal], before any rounding, is zero.\n     *\n     * @param  val `int` value to be converted to [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    internal constructor(`val`: Int, mc: MathContext) {\n        val mcp = mc.precision\n        var compactVal = `val`.toLong()\n        var scl = 0\n        var prec = 0\n        if (mcp > 0) { // do rounding\n            prec = longDigitLength(compactVal)\n            var drop = prec - mcp // drop can't be more than 18\n            while (drop > 0) {\n                scl = checkScaleNonZero(scl.toLong() - drop)\n                compactVal = divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                prec = longDigitLength(compactVal)\n                drop = prec - mcp\n            }\n        }\n        this._intVal = null\n        this._intCompact = compactVal\n        this._scale = scl\n        this._precision = prec\n    }\n\n    /**\n     * Translates a `long` into a [BigDecimal].  The\n     * _scale of the [BigDecimal] is zero.\n     *\n     * @param val `long` value to be converted to [BigDecimal].\n     * @since  1.5\n     */\n    internal constructor(`val`: Long) {\n        this._intCompact = `val`\n        this._intVal = if (`val` == INFLATED) INFLATED_BIGINT else null\n        this._scale = 0\n    }\n\n    /**\n     * Translates a `long` into a [BigDecimal], with\n     * rounding according to the context settings.  The _scale of the\n     * [BigDecimal], before any rounding, is zero.\n     *\n     * @param  val `long` value to be converted to [BigDecimal].\n     * @param  mc the context to use.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    internal constructor(`val`: Long, mc: MathContext) {\n        var `val` = `val`\n        val mcp = mc.precision\n        val mode = mc.roundingMode.oldMode\n        var prec = 0\n        var scl = 0\n        var rb: BigInteger? = if (`val` == INFLATED) INFLATED_BIGINT else null\n        if (mcp > 0) { // do rounding\n            if (`val` == INFLATED) {\n                prec = 19\n                var drop = prec - mcp\n                while (drop > 0) {\n                    scl = checkScaleNonZero(scl.toLong() - drop)\n                    rb = divideAndRoundByTenPow(rb!!, drop, mode)\n                    `val` = compactValFor(rb)\n                    if (`val` != INFLATED) {\n                        break\n                    }\n                    prec = bigDigitLength(rb)\n                    drop = prec - mcp\n                }\n            }\n            if (`val` != INFLATED) {\n                prec = longDigitLength(`val`)\n                var drop = prec - mcp\n                while (drop > 0) {\n                    scl = checkScaleNonZero(scl.toLong() - drop)\n                    `val` = divideAndRound(`val`, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                    prec = longDigitLength(`val`)\n                    drop = prec - mcp\n                }\n                rb = null\n            }\n        }\n        this._intVal = rb\n        this._intCompact = `val`\n        this._scale = scl\n        this._precision = prec\n    }\n\n    // Arithmetic Operations\n    /**\n     * Returns a [BigDecimal] whose value is `(this +\n     * augend)`, and whose _scale is `max(this._scale(),\n     * augend._scale())`.\n     *\n     * @param  augend value to be added to this [BigDecimal].\n     * @return `this + augend`\n     */\n    @JsName(\"plus\")\n    operator fun plus(augend: BigDecimal?): BigDecimal {\n        return if (this._intCompact != INFLATED) {\n            if (augend!!._intCompact != INFLATED) {\n                sum(this._intCompact, this._scale, augend._intCompact, augend._scale)\n            } else {\n                sum(this._intCompact, this._scale, augend._intVal!!, augend._scale)\n            }\n        } else {\n            if (augend!!._intCompact != INFLATED) {\n                sum(augend._intCompact, augend._scale, this._intVal!!, this._scale)\n            } else {\n                sum(this._intVal, this._scale, augend._intVal, augend._scale)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this + augend)`,\n     * with rounding according to the context settings.\n     *\n     * If either number is zero and the _precision setting is nonzero then\n     * the other number, rounded if necessary, is used as the result.\n     *\n     * @param  augend value to be added to this [BigDecimal].\n     * @param  mc the context to use.\n     * @return `this + augend`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    @JsName(\"plusWithContext\")\n    fun plus(augend: BigDecimal?, mc: MathContext): BigDecimal {\n        var augend = augend\n        if (mc.precision == 0)\n            return plus(augend)\n        var lhs = this\n\n        // If either number is zero then the other number, rounded and\n        // scaled if necessary, is used as the result.\n        run {\n            val lhsIsZero = lhs.signum == 0\n            val augendIsZero = augend!!.signum == 0\n\n            if (lhsIsZero || augendIsZero) {\n                val preferredScale = max(lhs.scale, augend!!.scale)\n                val result: BigDecimal? = if (lhsIsZero) doRound(augend, mc) else doRound(lhs, mc)\n\n                if (lhsIsZero && augendIsZero)\n                    return zeroValueOf(preferredScale)\n\n                if (result!!.scale == preferredScale)\n                    return result\n                else if (result.scale > preferredScale) {\n                    return stripZerosToMatchScale(result._intVal, result._intCompact, result._scale, preferredScale)\n                } else { // result._scale < preferredScale\n                    val precisionDiff = mc.precision - result.precision\n                    val scaleDiff = preferredScale - result.scale\n\n                    return if (precisionDiff >= scaleDiff)\n                        result.setScale(preferredScale) // can achieve target _scale\n                    else\n                        result.setScale(result.scale + precisionDiff)\n                }\n            }\n        }\n\n        val padding = lhs._scale.toLong() - augend!!._scale\n        if (padding != 0L) { // scales differ; alignment needed\n            val arg = preAlign(lhs, augend, padding, mc)\n            matchScale(arg)\n            lhs = arg[0]\n            augend = arg[1]\n        }\n        return doRound(lhs.inflated().plus(augend.inflated()), lhs._scale, mc)\n    }\n\n    /**\n     * Returns an array of length two, the sum of whose entries is\n     * equal to the rounded sum of the [BigDecimal] arguments.\n     *\n     *\n     * If the digit positions of the arguments have a sufficient\n     * gap between them, the value smaller in magnitude can be\n     * condensed into a &quot;sticky bit&quot; and the end result will\n     * round the same way *if* the _precision of the final\n     * result does not include the high order digit of the small\n     * magnitude operand.\n     *\n     *\n     * Note that while strictly speaking this is an optimization,\n     * it makes a much wider range of additions practical.\n     *\n     *\n     * This corresponds to a pre-shift operation in a fixed\n     * _precision floating-point adder; this method is complicated by\n     * variable _precision of the result as determined by the\n     * MathContext.  A more nuanced operation could implement a\n     * &quot;right shift&quot; on the smaller magnitude operand so\n     * that the number of digits of the smaller operand could be\n     * reduced even though the significands partially overlapped.\n     */\n    private fun preAlign(lhs: BigDecimal, augend: BigDecimal, padding: Long, mc: MathContext): Array<BigDecimal> {\n        require(padding != 0L)\n        val big: BigDecimal\n        var small: BigDecimal\n\n        if (padding < 0) { // lhs is big; augend is small\n            big = lhs\n            small = augend\n        } else { // lhs is small; augend is big\n            big = augend\n            small = lhs\n        }\n\n        /*\n         * This is the estimated _scale of an ulp of the result; it assumes that\n         * the result doesn't have a carry-out on a true plus (e.g. 999 + 1 =>\n         * 1000) or any subtractive cancellation on borrowing (e.g. 100 - 1.2 =>\n         * 98.8)\n         */\n        val estResultUlpScale = big._scale.toLong() - big.precision + mc.precision\n\n        /*\n         * The low-order digit position of big is big._scale().  This\n         * is true regardless of whether big has a positive or\n         * negative _scale.  The high-order digit position of small is\n         * small._scale - (small._precision() - 1).  To do the full\n         * condensation, the digit positions of big and small must be\n         * disjoint *and* the digit positions of small should not be\n         * directly visible in the result.\n         */\n        val smallHighDigitPos = small._scale.toLong() - small.precision + 1\n        if (smallHighDigitPos > big._scale + 2 && // big and small disjoint\n            smallHighDigitPos > estResultUlpScale + 2\n        ) { // small digits not visible\n            small = BigDecimal.of(\n                small.signum.toLong(),\n                this.checkScale(max(big._scale.toLong(), estResultUlpScale) + 3)\n            )\n        }\n\n        // Since addition is symmetric, preserving input order in\n        // returned operands doesn't matter\n        return arrayOf(big, small)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this -\n     * subtrahend)`, and whose _scale is `max(this._scale(),\n     * subtrahend._scale())`.\n     *\n     * @param  subtrahend value to be subtracted from this [BigDecimal].\n     * @return `this - subtrahend`\n     */\n    @JsName(\"minus\")\n    operator fun minus(subtrahend: BigDecimal): BigDecimal {\n        return if (this._intCompact != INFLATED) {\n            if (subtrahend._intCompact != INFLATED) {\n                sum(this._intCompact, this._scale, -subtrahend._intCompact, subtrahend._scale)\n            } else {\n                sum(this._intCompact, this._scale, subtrahend._intVal!!.unaryMinus(), subtrahend._scale)\n            }\n        } else {\n            if (subtrahend._intCompact != INFLATED) {\n                // Pair of subtrahend values given before pair of\n                // values from this BigDecimal to avoid need for\n                // method overloading on the specialized plus method\n                sum(-subtrahend._intCompact, subtrahend._scale, this._intVal!!, this._scale)\n            } else {\n                sum(this._intVal, this._scale, subtrahend._intVal!!.unaryMinus(), subtrahend._scale)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this - subtrahend)`,\n     * with rounding according to the context settings.\n     *\n     * If `subtrahend` is zero then this, rounded if necessary, is used as the\n     * result.  If this is zero then the result is `subtrahend.unaryMinus(mc)`.\n     *\n     * @param  subtrahend value to be subtracted from this [BigDecimal].\n     * @param  mc the context to use.\n     * @return `this - subtrahend`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    @JsName(\"minusWithContext\")\n    fun minus(subtrahend: BigDecimal, mc: MathContext): BigDecimal {\n        return if (mc.precision == 0) minus(subtrahend) else plus(subtrahend.unaryMinus(), mc)\n        // share the special rounding code in plus()\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this\n     * multiplicand)`, and whose _scale is `(this._scale() +\n     * multiplicand._scale())`.\n     *\n     * @param  multiplicand value to be multiplied by this [BigDecimal].\n     * @return `this * multiplicand`\n     */\n    @JsName(\"times\")\n    operator fun times(multiplicand: BigDecimal?): BigDecimal {\n        val productScale = checkScale(_scale.toLong() + multiplicand!!._scale)\n        return if (this._intCompact != INFLATED) {\n            if (multiplicand._intCompact != INFLATED) {\n                multiply(this._intCompact, multiplicand._intCompact, productScale)\n            } else {\n                multiply(this._intCompact, multiplicand._intVal, productScale)\n            }\n        } else {\n            if (multiplicand._intCompact != INFLATED) {\n                multiply(multiplicand._intCompact, this._intVal, productScale)\n            } else {\n                multiply(this._intVal!!, multiplicand._intVal, productScale)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this\n     * multiplicand)`, with rounding according to the context settings.\n     *\n     * @param  multiplicand value to be multiplied by this [BigDecimal].\n     * @param  mc the context to use.\n     * @return `this * multiplicand`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    @JsName(\"timesWithContext\")\n    fun times(multiplicand: BigDecimal, mc: MathContext): BigDecimal {\n        if (mc.precision == 0)\n            return times(multiplicand)\n        val productScale = checkScale(_scale.toLong() + multiplicand._scale)\n        return if (this._intCompact != INFLATED) {\n            if (multiplicand._intCompact != INFLATED) {\n                multiplyAndRound(this._intCompact, multiplicand._intCompact, productScale, mc)\n            } else {\n                multiplyAndRound(this._intCompact, multiplicand._intVal, productScale, mc)\n            }\n        } else {\n            if (multiplicand._intCompact != INFLATED) {\n                multiplyAndRound(multiplicand._intCompact, this._intVal, productScale, mc)\n            } else {\n                multiplyAndRound(this._intVal!!, multiplicand._intVal, productScale, mc)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, and whose _scale is as specified.  If rounding must\n     * be performed to generate a result with the specified _scale, the\n     * specified rounding mode is applied.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  scale _scale of the [BigDecimal] quotient to be returned.\n     * @param  roundingMode rounding mode to apply.\n     * @return `this / divisor`\n     * @throws ArithmeticException if `divisor` is zero,\n     * `roundingMode==ROUND_UNNECESSARY` and\n     * the specified _scale is insufficient to represent the result\n     * of the division exactly.\n     * @throws IllegalArgumentException if `roundingMode` does not\n     * represent a valid rounding mode.\n     * @see .ROUND_UP\n     *\n     * @see .ROUND_DOWN\n     *\n     * @see .ROUND_CEILING\n     *\n     * @see .ROUND_FLOOR\n     *\n     * @see .ROUND_HALF_UP\n     *\n     * @see .ROUND_HALF_DOWN\n     *\n     * @see .ROUND_HALF_EVEN\n     *\n     * @see .ROUND_UNNECESSARY\n     */\n    @Deprecated(\n        \"The method {@link #div(BigDecimal, int, RoundingMode)}\\n\" +\n                \"      should be used in preference to this legacy method.\\n\" +\n                \"     \\n\" +\n                \"      \"\n    )\n    private fun div(divisor: BigDecimal, scale: Int, roundingMode: Int): BigDecimal {\n        if (roundingMode < ROUND_UP || roundingMode > ROUND_UNNECESSARY)\n            throw IllegalArgumentException(\"Invalid rounding mode\")\n        return if (this._intCompact != INFLATED) {\n            if (divisor._intCompact != INFLATED) {\n                divide(this._intCompact, this._scale, divisor._intCompact, divisor._scale, scale, roundingMode)\n            } else {\n                divide(this._intCompact, this._scale, divisor._intVal, divisor._scale, scale, roundingMode)\n            }\n        } else {\n            if (divisor._intCompact != INFLATED) {\n                divide(this._intVal, this._scale, divisor._intCompact, divisor._scale, scale, roundingMode)\n            } else {\n                divide(this._intVal, this._scale, divisor._intVal, divisor._scale, scale, roundingMode)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, and whose _scale is as specified.  If rounding must\n     * be performed to generate a result with the specified _scale, the\n     * specified rounding mode is applied.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  scale _scale of the [BigDecimal] quotient to be returned.\n     * @param  roundingMode rounding mode to apply.\n     * @return `this / divisor`\n     * @throws ArithmeticException if `divisor` is zero,\n     * `roundingMode==RoundingMode.UNNECESSARY` and\n     * the specified _scale is insufficient to represent the result\n     * of the division exactly.\n     * @since 1.5\n     */\n    private fun div(divisor: BigDecimal, scale: Int, roundingMode: RoundingMode): BigDecimal {\n        return div(divisor, scale, roundingMode.oldMode)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, and whose _scale is `this._scale()`.  If\n     * rounding must be performed to generate a result with the given\n     * _scale, the specified rounding mode is applied.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  roundingMode rounding mode to apply.\n     * @return `this / divisor`\n     * @throws ArithmeticException if `divisor==0`, or\n     * `roundingMode==ROUND_UNNECESSARY` and\n     * `this._scale()` is insufficient to represent the result\n     * of the division exactly.\n     * @throws IllegalArgumentException if `roundingMode` does not\n     * represent a valid rounding mode.\n     * @see .ROUND_UP\n     *\n     * @see .ROUND_DOWN\n     *\n     * @see .ROUND_CEILING\n     *\n     * @see .ROUND_FLOOR\n     *\n     * @see .ROUND_HALF_UP\n     *\n     * @see .ROUND_HALF_DOWN\n     *\n     * @see .ROUND_HALF_EVEN\n     *\n     * @see .ROUND_UNNECESSARY\n     */\n    @Deprecated(\n        \"The method {@link #div(BigDecimal, RoundingMode)}\\n\" +\n                \"      should be used in preference to this legacy method.\\n\" +\n                \"     \\n\" +\n                \"      \"\n    )\n    private fun div(divisor: BigDecimal, roundingMode: Int): BigDecimal {\n        return this.div(divisor, _scale, roundingMode)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, and whose _scale is `this._scale()`.  If\n     * rounding must be performed to generate a result with the given\n     * _scale, the specified rounding mode is applied.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  roundingMode rounding mode to apply.\n     * @return `this / divisor`\n     * @throws ArithmeticException if `divisor==0`, or\n     * `roundingMode==RoundingMode.UNNECESSARY` and\n     * `this._scale()` is insufficient to represent the result\n     * of the division exactly.\n     * @since 1.5\n     */\n    private fun div(divisor: BigDecimal, roundingMode: RoundingMode): BigDecimal {\n        return this.div(divisor, _scale, roundingMode.oldMode)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, and whose preferred _scale is `(this._scale() -\n     * divisor._scale())`; if the exact quotient cannot be\n     * represented (because it has a non-terminating decimal\n     * expansion) an `ArithmeticException` is thrown.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @throws ArithmeticException if the exact quotient does not have a\n     * terminating decimal expansion\n     * @return `this / divisor`\n     * @since 1.5\n     * @author Joseph D. Darcy\n     */\n    @JsName(\"div\")\n    operator fun div(divisor: BigDecimal): BigDecimal {\n        /*\n         * Handle zero cases first.\n         */\n        if (divisor.signum == 0) {   // x/0\n            if (this.signum == 0)\n            // 0/0\n                throw ArithmeticException(\"Division undefined\")  // NaN\n            throw ArithmeticException(\"Division by zero\")\n        }\n\n        // Calculate preferred _scale\n        val preferredScale = saturateLong(this._scale.toLong() - divisor._scale)\n\n        if (this.signum == 0)\n        // 0/y\n            return zeroValueOf(preferredScale)\n        else {\n            /*\n             * If the quotient this/divisor has a terminating decimal\n             * expansion, the expansion can have no more than\n             * (a._precision() + ceil(10*b._precision)/3) digits.\n             * Therefore, create a MathContext object with this\n             * _precision and do a div with the UNNECESSARY rounding\n             * mode.\n             */\n            val mc = MathContext(\n                min(\n                    this.precision + ceil(10.0 * divisor.precision / 3.0).toLong(),\n                    Int.MAX_VALUE.toLong()\n                ).toInt(),\n                RoundingMode.UNNECESSARY\n            )\n            val quotient: BigDecimal?\n            try {\n                quotient = this.div(divisor, mc)\n            } catch (e: ArithmeticException) {\n                throw ArithmeticException(\"Non-terminating decimal expansion; \" + \"no exact representable decimal result.\")\n            }\n\n            val quotientScale = quotient!!.scale\n\n            // div(BigDecimal, mc) tries to adjust the quotient to\n            // the desired one by removing trailing zeros; since the\n            // exact div method does not have an explicit digit\n            // limit, we can plus zeros too.\n            return if (preferredScale > quotientScale) quotient.setScale(\n                preferredScale,\n                ROUND_UNNECESSARY\n            ) else quotient\n\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this /\n     * divisor)`, with rounding according to the context settings.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  mc the context to use.\n     * @return `this / divisor`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY` or\n     * `mc._precision == 0` and the quotient has a\n     * non-terminating decimal expansion.\n     * @since  1.5\n     */\n    @JsName(\"divWithContext\")\n    fun div(divisor: BigDecimal, mc: MathContext): BigDecimal? {\n        val mcp = mc.precision\n        if (mcp == 0)\n            return div(divisor)\n\n        val dividend = this\n        val preferredScale = dividend._scale.toLong() - divisor._scale\n        // Now calculate the answer.  We use the existing\n        // div-and-round method, but as this rounds to _scale we have\n        // to normalize the values here to achieve the desired result.\n        // For x/y we first handle y=0 and x=0, and then normalize x and\n        // y to give x' and y' with the following constraints:\n        //   (a) 0.1 <= x' < 1\n        //   (b)  x' <= y' < 10*x'\n        // Dividing x'/y' with the required _scale set to mc._precision then\n        // will give a result in the range 0.1 to 1 rounded to exactly\n        // the right number of digits (except in the case of a result of\n        // 1.000... which can arise when x=y, or when rounding overflows\n        // The 1.000... case will reduce properly to 1.\n        if (divisor.signum == 0) {      // x/0\n            if (dividend.signum == 0)\n            // 0/0\n                throw ArithmeticException(\"Division undefined\")  // NaN\n            throw ArithmeticException(\"Division by zero\")\n        }\n        if (dividend.signum == 0)\n        // 0/y\n            return zeroValueOf(saturateLong(preferredScale))\n        val xscale = dividend.precision\n        val yscale = divisor.precision\n        return if (dividend._intCompact != INFLATED) {\n            if (divisor._intCompact != INFLATED) {\n                divide(dividend._intCompact, xscale, divisor._intCompact, yscale, preferredScale, mc)\n            } else {\n                divide(dividend._intCompact, xscale, divisor._intVal, yscale, preferredScale, mc)\n            }\n        } else {\n            if (divisor._intCompact != INFLATED) {\n                divide(dividend._intVal, xscale, divisor._intCompact, yscale, preferredScale, mc)\n            } else {\n                divide(dividend._intVal, xscale, divisor._intVal, yscale, preferredScale, mc)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is the integer part\n     * of the quotient `(this / divisor)` rounded down.  The\n     * preferred _scale of the result is `(this._scale() -\n     * divisor._scale())`.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @return The integer part of `this / divisor`.\n     * @throws ArithmeticException if `divisor==0`\n     * @since  1.5\n     */\n    @JsName(\"divideToIntegralValue\")\n    fun divideToIntegralValue(divisor: BigDecimal): BigDecimal? {\n        // Calculate preferred _scale\n        val preferredScale = saturateLong(this._scale.toLong() - divisor._scale)\n        if (this.compareMagnitude(divisor) < 0) {\n            // much faster when this << divisor\n            return zeroValueOf(preferredScale)\n        }\n\n        if (this.signum == 0 && divisor.signum != 0)\n            return this.setScale(preferredScale, ROUND_UNNECESSARY)\n\n        // Perform a div with enough digits to round to a correct\n        // integer value; then remove any fractional digits\n\n        val maxDigits = min(\n            this.precision.toLong() +\n                    ceil(10.0 * divisor.precision / 3.0).toLong() +\n                    abs(this.scale.toLong() - divisor.scale) + 2,\n            Int.MAX_VALUE.toLong()\n        ).toInt()\n        var quotient = this.div(\n            divisor, MathContext(\n                maxDigits,\n                RoundingMode.DOWN\n            )\n        )\n        if (quotient!!._scale > 0) {\n            quotient = quotient.setScale(0, RoundingMode.DOWN)\n            quotient = stripZerosToMatchScale(quotient._intVal, quotient._intCompact, quotient._scale, preferredScale)\n        }\n\n        if (quotient._scale < preferredScale) {\n            // pad with zeros if necessary\n            quotient = quotient.setScale(preferredScale, ROUND_UNNECESSARY)\n        }\n\n        return quotient\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is the integer part\n     * of `(this / divisor)`.  Since the integer part of the\n     * exact quotient does not depend on the rounding mode, the\n     * rounding mode does not affect the values returned by this\n     * method.  The preferred _scale of the result is\n     * `(this._scale() - divisor._scale())`.  An\n     * `ArithmeticException` is thrown if the integer part of\n     * the exact quotient needs more than `mc._precision`\n     * digits.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  mc the context to use.\n     * @return The integer part of `this / divisor`.\n     * @throws ArithmeticException if `divisor==0`\n     * @throws ArithmeticException if `mc._precision` &gt; 0 and the result\n     * requires a _precision of more than `mc._precision` digits.\n     * @since  1.5\n     * @author Joseph D. Darcy\n     */\n    @JsName(\"divideToIntegralValueWithContext\")\n    fun divideToIntegralValue(divisor: BigDecimal, mc: MathContext): BigDecimal? {\n        if (mc.precision == 0 || // exact result\n            this.compareMagnitude(divisor) < 0\n        )\n        // zero result\n            return divideToIntegralValue(divisor)\n\n        // Calculate preferred _scale\n        val preferredScale = saturateLong(this._scale.toLong() - divisor._scale)\n\n        /*\n         * Perform a normal div to mc._precision digits.  If the\n         * remainder has absolute value less than the divisor, the\n         * integer portion of the quotient fits into mc._precision\n         * digits.  Next, remove any fractional digits from the\n         * quotient and adjust the _scale to the preferred value.\n         */\n        var result = this.div(divisor, MathContext(mc.precision, RoundingMode.DOWN))\n\n        if (result!!.scale < 0) {\n            /*\n             * Result is an integer. See if quotient represents the\n             * full integer portion of the exact quotient; if it does,\n             * the computed remainder will be less than the divisor.\n             */\n            val product = result.times(divisor)\n            // If the quotient is the full integer value,\n            // |dividend-product| < |divisor|.\n            if (this.minus(product).compareMagnitude(divisor) >= 0) {\n                throw ArithmeticException(\"Division impossible\")\n            }\n        } else if (result.scale > 0) {\n            /*\n             * Integer portion of quotient will fit into _precision\n             * digits; recompute quotient to _scale 0 to avoid double\n             * rounding and then try to adjust, if necessary.\n             */\n            result = result.setScale(0, RoundingMode.DOWN)\n        }\n        // else result._scale() == 0;\n\n        val precisionDiff: Int\n        if (preferredScale > result.scale) {\n//            (precisionDiff = mc._precision - result._precision()) > 0\n            precisionDiff = mc.precision - result.precision\n\n            if (precisionDiff > 0)\n                return result.setScale(result.scale + min(precisionDiff, preferredScale - result._scale))\n        }\n\n        return stripZerosToMatchScale(result._intVal, result._intCompact, result._scale, preferredScale)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this % divisor)`.\n     *\n     *\n     * The remainder is given by\n     * `this.minus(this.divideToIntegralValue(divisor).timesLong(divisor))`.\n     * Note that this is *not* the modulo operation (the result can be\n     * negative).\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @return `this % divisor`.\n     * @throws ArithmeticException if `divisor==0`\n     * @since  1.5\n     */\n    @JsName(\"rem\")\n    operator fun rem(divisor: BigDecimal): BigDecimal {\n        val divrem = this.divideAndRemainder(divisor)\n        return divrem.second\n    }\n\n\n    /**\n     * Returns a [BigDecimal] whose value is `(this %\n     * divisor)`, with rounding according to the context settings.\n     * The `MathContext` settings affect the implicit div\n     * used to compute the remainder.  The remainder computation\n     * itself is by definition exact.  Therefore, the remainder may\n     * contain more than `mc.getPrecision()` digits.\n     *\n     *\n     * The remainder is given by\n     * `this.minus(this.divideToIntegralValue(divisor,\n     * mc).timesLong(divisor))`.  Note that this is not the modulo\n     * operation (the result can be negative).\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided.\n     * @param  mc the context to use.\n     * @return `this % divisor`, rounded as necessary.\n     * @throws ArithmeticException if `divisor==0`\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`, or `mc._precision`\n     * &gt; 0 and the result of `this.divideToIntgralValue(divisor)` would\n     * require a _precision of more than `mc._precision` digits.\n     * @see .divideToIntegralValue\n     * @since  1.5\n     */\n    @JsName(\"remWithContext\")\n    fun rem(divisor: BigDecimal, mc: MathContext): BigDecimal {\n        val divrem = this.divideAndRemainder(divisor, mc)\n        return divrem.second\n    }\n\n    /**\n     * Returns a two-element [BigDecimal] array containing the\n     * result of `divideToIntegralValue` followed by the result of\n     * `remainder` on the two operands.\n     *\n     *\n     * Note that if both the integer quotient and remainder are\n     * needed, this method is faster than using the\n     * `divideToIntegralValue` and `remainder` methods\n     * separately because the division need only be carried out once.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided,\n     * and the remainder computed.\n     * @return a two element [BigDecimal] array: the quotient\n     * (the result of `divideToIntegralValue`) is the initial element\n     * and the remainder is the final element.\n     * @throws ArithmeticException if `divisor==0`\n     * @see BigDecimal.divideToIntegralValue\n     * @see BigDecimal.rem\n     * @since  1.5\n     */\n    @JsName(\"divideAndRemainder\")\n    fun divideAndRemainder(divisor: BigDecimal): Pair<BigDecimal, BigDecimal> {\n        // we use the identity  x = i * y + r to determine r\n//        val result = arrayOfNulls<BigDecimal>(2)\n//\n//        result[0] = this.divideToIntegralValue(divisor)\n//        result[1] = this.minus(result[0].timesLong(divisor))\n\n        var temp = this.divideToIntegralValue(divisor)!!\n        return Pair(\n            temp,\n            temp.times(divisor)\n        )\n    }\n\n    /**\n     * Returns a two-element [BigDecimal] array containing the\n     * result of `divideToIntegralValue` followed by the result of\n     * `remainder` on the two operands calculated with rounding\n     * according to the context settings.\n     *\n     *\n     * Note that if both the integer quotient and remainder are\n     * needed, this method is faster than using the\n     * `divideToIntegralValue` and `remainder` methods\n     * separately because the division need only be carried out once.\n     *\n     * @param  divisor value by which this [BigDecimal] is to be divided,\n     * and the remainder computed.\n     * @param  mc the context to use.\n     * @return a two element [BigDecimal] array: the quotient\n     * (the result of `divideToIntegralValue`) is the\n     * initial element and the remainder is the final element.\n     * @throws ArithmeticException if `divisor==0`\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`, or `mc._precision`\n     * &gt; 0 and the result of `this.divideToIntgralValue(divisor)` would\n     * require a _precision of more than `mc._precision` digits.\n     * @see BigDecimal.divideToIntegralValue\n     * @see BigDecimal.rem\n     * @since  1.5\n     */\n    @JsName(\"divideAndRemainderWithContext\")\n    fun divideAndRemainder(divisor: BigDecimal, mc: MathContext): Pair<BigDecimal, BigDecimal> {\n        if (mc.precision == 0)\n            return divideAndRemainder(divisor)\n\n//        val result = arrayOfNulls<BigDecimal>(2)\n        val lhs = this\n//\n//        result[0] = lhs.divideToIntegralValue(divisor, mc)\n//        result[1] = lhs.minus(result[0].timesLong(divisor))\n//        return result\n\n        var temp = lhs.divideToIntegralValue(divisor, mc)!!\n        return Pair(\n            temp,\n            lhs.minus(temp.times(divisor))\n        )\n    }\n\n    /**\n     * Returns an approximation to the square root of `this`\n     * with rounding according to the context settings.\n     *\n     *\n     * The preferred _scale of the returned result is equal to\n     * `this._scale()/2`. The value of the returned result is\n     * always within one ulp of the exact decimal value for the\n     * _precision in question.  If the rounding mode is [ ][RoundingMode.HALF_UP], [ HALF_DOWN][RoundingMode.HALF_DOWN], or [HALF_EVEN][RoundingMode.HALF_EVEN], the\n     * result is within one half an ulp of the exact decimal value.\n     *\n     *\n     * Special case:\n     *\n     *  *  The square root of a number numerically equal to `ZERO` is numerically equal to `ZERO` with a preferred\n     * _scale according to the general rule above. In particular, for\n     * `ZERO`, `ZERO.sqrt(mc).equals(ZERO)` is true with\n     * any `MathContext` as an argument.\n     *\n     *\n     * @param mc the context to use.\n     * @return the square root of `this`.\n     * @throws ArithmeticException if `this` is less than zero.\n     * @throws ArithmeticException if an exact result is requested\n     * (`mc.getPrecision()==0`) and there is no finite decimal\n     * expansion of the exact result\n     * @throws ArithmeticException if\n     * `(mc.getRoundingMode()==RoundingMode.UNNECESSARY`) and\n     * the exact result cannot fit in `mc.getPrecision()`\n     * digits.\n     * @see BigInteger.sqrt\n     * @since  9\n     */\n    @JsName(\"sqrt\")\n    fun sqrt(mc: MathContext = MathContext()): BigDecimal {\n        val signum = signum\n        if (signum == 1) {\n            /*\n             * The following code draws on the algorithm presented in\n             * \"Properly Rounded Variable Precision Square Root,\" Hull and\n             * Abrham, ACM Transactions on Mathematical Software, Vol 11,\n             * No. 3, September 1985, Pages 229-237.\n             *\n             * The BigDecimal computational model differs from the one\n             * presented in the paper in several ways: first BigDecimal\n             * numbers aren't necessarily normalized, second many more\n             * rounding modes are supported, including UNNECESSARY, and\n             * exact results can be requested.\n             *\n             * The main steps of the algorithm below are as follows,\n             * first argument reduce the value to the numerical range\n             * [1, 10) using the following relations:\n             *\n             * x = y * 10 ^ exp\n             * sqrt(x) = sqrt(y) * 10^(exp / 2) if exp is even\n             * sqrt(x) = sqrt(y/10) * 10 ^((exp+1)/2) is exp is odd\n             *\n             * Then use Newton's iteration on the reduced value to compute\n             * the numerical digits of the desired result.\n             *\n             * Finally, _scale back to the desired exponent range and\n             * perform any adjustment to get the preferred _scale in the\n             * representation.\n             */\n\n            // The code below favors relative simplicity over checking\n            // for special cases that could run faster.\n\n            val preferredScale = this.scale / 2\n            val zeroWithFinalPreferredScale = of(0L, preferredScale)\n\n            // First phase of numerical normalization, strip trailing\n            // zeros and check for even powers of 10.\n            val stripped = this.stripTrailingZeros()\n            val strippedScale = stripped.scale\n\n            // Numerically sqrt(10^2N) = 10^N\n            if (stripped.isPowerOfTen && strippedScale % 2 == 0) {\n                var result = of(1L, strippedScale / 2)\n                if (result.scale != preferredScale) {\n                    // Adjust to requested _precision and preferred\n                    // _scale as appropriate.\n                    result = result.plus(zeroWithFinalPreferredScale, mc)\n                }\n                return result\n            }\n\n            // After stripTrailingZeros, the representation is normalized as\n            //\n            // unscaledValue * 10^(-_scale)\n            //\n            // where unscaledValue is an integer with the mimimum\n            // _precision for the cohort of the numerical value. To\n            // allow binary floating-point hardware to be used to get\n            // approximately a 15 digit approximation to the square\n            // root, it is helpful to instead normalize this so that\n            // the significand portion is to right of the decimal\n            // point by roughly (_scale() - _precision() +1).\n\n            // Now the _precision / _scale adjustment\n            var scaleAdjust: Int\n            val scale = stripped.scale - stripped.precision + 1\n            if (scale % 2 == 0) {\n                scaleAdjust = scale\n            } else {\n                scaleAdjust = scale - 1\n            }\n\n            val working = stripped.scaleByPowerOfTen(scaleAdjust)\n\n            require(// Verify 0.1 <= working < 10\n                ONE_TENTH.compareTo(working) <= 0 && working.compareTo(TEN) < 0\n            )\n\n            // Use good ole' Math.sqrt to get the initial guess for\n            // the Newton iteration, good to at least 15 decimal\n            // digits. This approach does incur the cost of a\n            //\n            // BigDecimal -> double -> BigDecimal\n            //\n            // conversion cycle, but it avoids the need for several\n            // Newton iterations in BigDecimal arithmetic to get the\n            // working answer to 15 digits of _precision. If many fewer\n            // than 15 digits were needed, it might be faster to do\n            // the loop entirely in BigDecimal arithmetic.\n            //\n            // (A double value might have as much many as 17 decimal\n            // digits of _precision; it depends on the relative density\n            // of binary and decimal numbers at different regions of\n            // the number line.)\n            //\n            // (It would be possible to check for certain special\n            // cases to avoid doing any Newton iterations. For\n            // example, if the BigDecimal -> double conversion was\n            // known to be exact and the rounding mode had a\n            // low-enough _precision, the post-Newton rounding logic\n            // could be applied directly.)\n\n            val guess = BigDecimal(sqrt(working.toDouble()))\n            var guessPrecision = 15\n            val originalPrecision = mc.precision\n            val targetPrecision: Int\n\n            // If an exact value is requested, it must only need about\n            // half of the input digits to represent since multiplying\n            // an N digit number by itself yield a 2N-1 digit or 2N\n            // digit result.\n            if (originalPrecision == 0) {\n                targetPrecision = stripped.precision / 2 + 1\n            } else {\n                targetPrecision = originalPrecision\n            }\n\n            // When setting the _precision to use inside the Newton\n            // iteration loop, take care to avoid the case where the\n            // _precision of the input exceeds the requested _precision\n            // and rounding the input value too soon.\n            var approx = guess\n            val workingPrecision = working.precision\n            do {\n                val tmpPrecision = max(\n                    max(guessPrecision, targetPrecision + 2),\n                    workingPrecision\n                )\n                val mcTmp = MathContext(tmpPrecision, RoundingMode.HALF_EVEN)\n                // approx = 0.5 * (approx + fraction / approx)\n                approx = ONE_HALF.times(approx.plus(working.div(approx, mcTmp), mcTmp))\n                guessPrecision *= 2\n            } while (guessPrecision < targetPrecision + 2)\n\n            var result: BigDecimal?\n            val targetRm = mc.roundingMode\n            if (targetRm === RoundingMode.UNNECESSARY || originalPrecision == 0) {\n                val tmpRm = if (targetRm === RoundingMode.UNNECESSARY) RoundingMode.DOWN else targetRm\n                val mcTmp = MathContext(targetPrecision, tmpRm)\n                result = approx.scaleByPowerOfTen(-scaleAdjust / 2).round(mcTmp)\n\n                // If result*result != this numerically, the square\n                // root isn't exact\n                if (this.minus(result!!.times(result)).compareTo(ZERO) != 0) {\n                    throw ArithmeticException(\"Computed square root not exact.\")\n                }\n            } else {\n                result = approx.scaleByPowerOfTen(-scaleAdjust / 2).round(mc)\n            }\n\n            if (result!!.scale != preferredScale) {\n                // The preferred _scale of an plus is\n                // max(addend._scale(), augend._scale()). Therefore, if\n                // the _scale of the result is first minimized using\n                // stripTrailingZeros(), adding a zero of the\n                // preferred _scale rounding the correct _precision will\n                // perform the proper _scale vs _precision tradeoffs.\n                result = result.stripTrailingZeros().plus(\n                    zeroWithFinalPreferredScale,\n                    MathContext(originalPrecision, RoundingMode.UNNECESSARY)\n                )\n            }\n            require(squareRootResultAssertions(result, mc))\n            return result\n        } else {\n            when (signum) {\n                -1 -> throw ArithmeticException(\"Attempted square root \" + \"of negative BigDecimal\")\n                0 -> return of(0L, scale / 2)\n\n                else -> throw AssertionError(\"Bad value from _signum\")\n            }\n        }\n    }\n\n    /**\n     * For nonzero values, check numerical correctness properties of\n     * the computed result for the chosen rounding mode.\n     *\n     * For the directed roundings, for DOWN and FLOOR, result^2 must\n     * be `<=` the input and (result+ulp)^2 must be `>` the\n     * input. Conversely, for UP and CEIL, result^2 must be `>=` the\n     * input and (result-ulp)^2 must be `<` the input.\n     */\n    private fun squareRootResultAssertions(result: BigDecimal, mc: MathContext): Boolean {\n        if (result.signum == 0) {\n            return squareRootZeroResultAssertions(result, mc)\n        } else {\n            val rm = mc.roundingMode\n            var ulp = result.ulp()\n            val neighborUp = result.plus(ulp)\n            // Make neighbor down accurate even for powers of ten\n            if (this.isPowerOfTen) {\n                ulp = ulp.div(TEN)\n            }\n            val neighborDown = result.minus(ulp)\n\n            // Both the starting value and result should be nonzero and positive.\n            if (result.signum != 1 || this.signum != 1) {\n                return false\n            }\n\n            when (rm) {\n                RoundingMode.DOWN, RoundingMode.FLOOR -> return result.times(result).compareTo(this) <= 0 && neighborUp.times(\n                    neighborUp\n                ).compareTo(this) > 0\n\n                RoundingMode.UP, RoundingMode.CEILING -> return result.times(result).compareTo(this) >= 0 && neighborDown.times(\n                    neighborDown\n                ).compareTo(this) < 0\n\n                RoundingMode.HALF_DOWN, RoundingMode.HALF_EVEN, RoundingMode.HALF_UP -> {\n                    val err = result.times(result).minus(this).absoluteValue\n                    val errUp = neighborUp.times(neighborUp).minus(this)\n                    val errDown = this.minus(neighborDown.times(neighborDown))\n                    // All error values should be positive so don't need to\n                    // compare absolute values.\n\n                    val err_comp_errUp = err.compareTo(errUp)\n                    val err_comp_errDown = err.compareTo(errDown)\n\n                    return errUp.signum == 1 &&\n                            errDown.signum == 1 &&\n\n                            err_comp_errUp <= 0 &&\n                            err_comp_errDown <= 0 &&\n\n                            (if (err_comp_errUp == 0) err_comp_errDown < 0 else true) &&\n                            if (err_comp_errDown == 0) err_comp_errUp < 0 else true\n                }\n                // && could check for digit conditions for ties too\n\n                else // Definition of UNNECESSARY already verified.\n                -> return true\n            }\n        }\n    }\n\n    private fun squareRootZeroResultAssertions(result: BigDecimal, mc: MathContext): Boolean {\n        return this.compareTo(ZERO) == 0\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is\n     * `(this<sup>n</sup>)`, The power is computed exactly, to\n     * unlimited _precision.\n     *\n     *\n     * The parameter `n` must be in the range 0 through\n     * 999999999, inclusive.  `ZERO.pow(0)` returns [BigDecimal.ONE].\n     *\n     * Note that future releases may expand the allowable exponent\n     * range of this method.\n     *\n     * @param  n power to raise this [BigDecimal] to.\n     * @return `this<sup>n</sup>`\n     * @throws ArithmeticException if `n` is out of range.\n     * @since  1.5\n     */\n    @JsName(\"pow\")\n    infix fun pow(n: Int): BigDecimal {\n        if (n < 0 || n > 999999999)\n            throw ArithmeticException(\"Invalid operation\")\n        // No need to calculate pow(n) if result will over/underflow.\n        // Don't attempt to support \"supernormal\" numbers.\n        val newScale = checkScale(_scale.toLong() * n)\n        return BigDecimal(this.inflated().pow(n), newScale)\n    }\n\n\n    /**\n     * Returns a [BigDecimal] whose value is\n     * `(this<sup>n</sup>)`.  The current implementation uses\n     * the core algorithm defined in ANSI standard X3.274-1996 with\n     * rounding according to the context settings.  In general, the\n     * returned numerical value is within two ulps of the exact\n     * numerical value for the chosen _precision.  Note that future\n     * releases may use a different algorithm with a decreased\n     * allowable error bound and increased allowable exponent range.\n     *\n     *\n     * The X3.274-1996 algorithm is:\n     *\n     *\n     *  *  An `ArithmeticException` exception is thrown if\n     *\n     *  * `absoluteValue(n) > 999999999`\n     *  * `mc._precision == 0` and `n < 0`\n     *  * `mc._precision > 0` and `n` has more than\n     * `mc._precision` decimal digits\n     *\n     *\n     *  *  if `n` is zero, [BigDecimal.ONE] is returned even if\n     * `this` is zero, otherwise\n     *\n     *  *  if `n` is positive, the result is calculated via\n     * the repeated squaring technique into a single accumulator.\n     * The individual multiplications with the accumulator use the\n     * same math context settings as in `mc` except for a\n     * _precision increased to `mc._precision + elength + 1`\n     * where `elength` is the number of decimal digits in\n     * `n`.\n     *\n     *  *  if `n` is negative, the result is calculated as if\n     * `n` were positive; this value is then divided into one\n     * using the working _precision specified above.\n     *\n     *  *  The final value from either the positive or negative case\n     * is then rounded to the destination _precision.\n     *\n     *\n     *\n     * @param  n power to raise this [BigDecimal] to.\n     * @param  mc the context to use.\n     * @return `this<sup>n</sup>` using the ANSI standard X3.274-1996\n     * algorithm\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`, or `n` is out\n     * of range.\n     * @since  1.5\n     */\n    @JsName(\"powWithContext\")\n    fun pow(n: Int, mc: MathContext): BigDecimal? {\n        if (mc.precision == 0)\n            return pow(n)\n        if (n < -999999999 || n > 999999999)\n            throw ArithmeticException(\"Invalid operation\")\n        if (n == 0)\n            return ONE                      // x**0 == 1 in X3.274\n        val lhs = this\n        var workmc = mc           // working settings\n        var mag = abs(n)               // magnitude of n\n        if (mc.precision > 0) {\n            val elength = longDigitLength(mag.toLong()) // length of n in digits\n            if (elength > mc.precision)\n            // X3.274 rule\n                throw ArithmeticException(\"Invalid operation\")\n            workmc = MathContext(\n                mc.precision + elength + 1,\n                mc.roundingMode\n            )\n        }\n        // ready to carry out power calculation...\n        var acc = ONE           // accumulator\n        var seenbit = false        // set once we've seen a 1-bit\n        var i = 1\n        while (true) {            // for each bit [top bit ignored]\n            mag += mag                 // shift left 1 bit\n            if (mag < 0) {              // top bit is set\n                seenbit = true         // OK, we're off\n                acc = acc.times(lhs, workmc) // acc=acc*x\n            }\n            if (i == 31)\n                break                  // that was the last bit\n            if (seenbit)\n                acc = acc.times(acc, workmc)   // acc=acc*acc [square]\n            i++\n            // else (!seenbit) no point in squaring ONE\n        }\n        // if negative n, calculate the reciprocal using working _precision\n        if (n < 0)\n        // [hence mc._precision>0]\n            acc = ONE.div(acc, workmc)!!\n        // round to final _precision and strip zeros\n        return doRound(acc, mc)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is the absolute value\n     * of this [BigDecimal], and whose _scale is\n     * `this._scale()`.\n     *\n     * @return `absoluteValue(this)`\n     */\n    val absoluteValue: BigDecimal\n        get() {\n            return if (signum < 0) unaryMinus() else this\n        }\n\n    /**\n     * Returns a [BigDecimal] whose value is the absolute value\n     * of this [BigDecimal], with rounding according to the\n     * context settings.\n     *\n     * @param mc the context to use.\n     * @return `absoluteValue(this)`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since 1.5\n     */\n    @JsName(\"absoluteValueWithContext\")\n    fun absoluteValue(mc: MathContext): BigDecimal? {\n        return if (signum < 0) unaryMinus(mc) else unaryPlus(mc)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(-this)`,\n     * and whose _scale is `this._scale()`.\n     *\n     * @return `-this`.\n     */\n    @JsName(\"unaryMinus\")\n    operator fun unaryMinus(): BigDecimal {\n        return if (_intCompact == INFLATED) {\n            BigDecimal(_intVal!!.unaryMinus(), INFLATED, _scale, _precision)\n        } else {\n            of(-_intCompact, _scale, _precision)\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(-this)`,\n     * with rounding according to the context settings.\n     *\n     * @param mc the context to use.\n     * @return `-this`, rounded as necessary.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @since  1.5\n     */\n    @JsName(\"unaryMinusWithContext\")\n    fun unaryMinus(mc: MathContext): BigDecimal? {\n        return unaryMinus().unaryPlus(mc)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(+this)`, and whose\n     * _scale is `this._scale()`.\n     *\n     *\n     * This method, which simply returns this [BigDecimal]\n     * is included for symmetry with the unary minus method [ ][BigDecimal.unaryMinus].\n     *\n     * @return `this`.\n     * @see .unaryMinus\n     * @since  1.5\n     */\n    @JsName(\"unaryPlus\")\n    operator fun unaryPlus(): BigDecimal {\n        return this\n    }\n\n    /**\n     * Returns a [BigDecimal] whose value is `(+this)`,\n     * with rounding according to the context settings.\n     *\n     *\n     * The effect of this method is identical to that of the [ ][BigDecimal.round] method.\n     *\n     * @param mc the context to use.\n     * @return `this`, rounded as necessary.  A zero result will\n     * have a _scale of 0.\n     * @throws ArithmeticException if the result is inexact but the\n     * rounding mode is `UNNECESSARY`.\n     * @see .round\n     * @since  1.5\n     */\n    @JsName(\"unaryPlusWithContext\")\n    fun unaryPlus(mc: MathContext): BigDecimal? {\n        return if (mc.precision == 0) this else doRound(this, mc)\n    }\n\n    /**\n     * Returns the _signum function of this [BigDecimal].\n     *\n     * @return -1, 0, or 1 as the value of this [BigDecimal]\n     * is negative, zero, or positive.\n     */\n    val signum: Int\n        get() {\n            return if (_intCompact != INFLATED)\n                _intCompact.sign\n            else\n                _intVal!!.signum\n        }\n\n    /**\n     * Returns the *_scale* of this [BigDecimal].  If zero\n     * or positive, the _scale is the number of digits to the right of\n     * the decimal point.  If negative, the unscaled value of the\n     * number is multiplied by ten to the power of the negation of the\n     * _scale.  For example, a _scale of `-3` means the unscaled\n     * value is multiplied by 1000.\n     *\n     * @return the _scale of this [BigDecimal].\n     */\n    val scale: Int\n        get() {\n            return _scale\n        }\n\n    /**\n     * Returns the *_precision* of this [BigDecimal].  (The\n     * _precision is the number of digits in the unscaled value.)\n     *\n     *\n     * The _precision of a zero value is 1.\n     *\n     * @return the _precision of this [BigDecimal].\n     * @since  1.5\n     */\n    val precision: Int\n        get() {\n            var result = _precision\n            if (result == 0) {\n                val s = _intCompact\n                if (s != INFLATED)\n                    result = longDigitLength(s)\n                else\n                    result = bigDigitLength(_intVal!!)\n                _precision = result\n            }\n            return result\n        }\n\n\n    /**\n     * Returns a [BigInteger] whose value is the *unscaled\n     * value* of this [BigDecimal].  (Computes `(this *\n     * 10<sup>this._scale()</sup>)`.)\n     *\n     * @return the unscaled value of this [BigDecimal].\n     * @since  1.2\n     */\n    val unscaledValue: BigInteger\n        get() {\n            return this.inflated()\n        }\n\n\n    // Scaling/Rounding Operations\n\n    /**\n     * Returns a [BigDecimal] rounded according to the\n     * `MathContext` settings.  If the _precision setting is 0 then\n     * no rounding takes place.\n     *\n     *\n     * The effect of this method is identical to that of the\n     * [BigDecimal.plus] method.\n     *\n     * @param mc the context to use.\n     * @return a [BigDecimal] rounded according to the\n     * `MathContext` settings.\n     * @throws ArithmeticException if the rounding mode is\n     * `UNNECESSARY` and the\n     * [BigDecimal]  operation would require rounding.\n     * @see .plus\n     * @since  1.5\n     */\n    @JsName(\"round\")\n    fun round(mc: MathContext): BigDecimal? {\n        return unaryPlus(mc)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose _scale is the specified\n     * value, and whose unscaled value is determined by multiplying or\n     * dividing this [BigDecimal]'s unscaled value by the\n     * appropriate power of ten to maintain its overall value.  If the\n     * _scale is reduced by the operation, the unscaled value must be\n     * divided (rather than multiplied), and the value may be changed;\n     * in this case, the specified rounding mode is applied to the\n     * division.\n     *\n     * @apiNote Since BigDecimal objects are immutable, calls of\n     * this method do *not* result in the original object being\n     * modified, contrary to the usual convention of having methods\n     * named `set*X*` mutate field *`X`*.\n     * Instead, `setScale` returns an object with the proper\n     * _scale; the returned object may or may not be newly allocated.\n     *\n     * @param  newScale _scale of the [BigDecimal] value to be returned.\n     * @param  roundingMode The rounding mode to apply.\n     * @return a [BigDecimal] whose _scale is the specified value,\n     * and whose unscaled value is determined by multiplying or\n     * dividing this [BigDecimal]'s unscaled value by the\n     * appropriate power of ten to maintain its overall value.\n     * @throws ArithmeticException if `roundingMode==UNNECESSARY`\n     * and the specified scaling operation would require\n     * rounding.\n     * @see RoundingMode\n     *\n     * @since  1.5\n     */\n    @JsName(\"setScaleRounding\")\n    fun setScale(newScale: Int, roundingMode: RoundingMode): BigDecimal {\n        return setScale(newScale, roundingMode.oldMode)\n    }\n\n    /**\n     * Returns a [BigDecimal] whose _scale is the specified\n     * value, and whose unscaled value is determined by multiplying or\n     * dividing this [BigDecimal]'s unscaled value by the\n     * appropriate power of ten to maintain its overall value.  If the\n     * _scale is reduced by the operation, the unscaled value must be\n     * divided (rather than multiplied), and the value may be changed;\n     * in this case, the specified rounding mode is applied to the\n     * division.\n     *\n     * @apiNote Since BigDecimal objects are immutable, calls of\n     * this method do *not* result in the original object being\n     * modified, contrary to the usual convention of having methods\n     * named `set*X*` mutate field *`X`*.\n     * Instead, `setScale` returns an object with the proper\n     * _scale; the returned object may or may not be newly allocated.\n     *\n     * @param  newScale _scale of the [BigDecimal] value to be returned.\n     * @param  roundingMode The rounding mode to apply.\n     * @return a [BigDecimal] whose _scale is the specified value,\n     * and whose unscaled value is determined by multiplying or\n     * dividing this [BigDecimal]'s unscaled value by the\n     * appropriate power of ten to maintain its overall value.\n     * @throws ArithmeticException if `roundingMode==ROUND_UNNECESSARY`\n     * and the specified scaling operation would require\n     * rounding.\n     * @throws IllegalArgumentException if `roundingMode` does not\n     * represent a valid rounding mode.\n     * @see .ROUND_UP\n     *\n     * @see .ROUND_DOWN\n     *\n     * @see .ROUND_CEILING\n     *\n     * @see .ROUND_FLOOR\n     *\n     * @see .ROUND_HALF_UP\n     *\n     * @see .ROUND_HALF_DOWN\n     *\n     * @see .ROUND_HALF_EVEN\n     *\n     * @see .ROUND_UNNECESSARY\n     */\n    @Deprecated(\n        \"The method {@link #setScale(int, RoundingMode)} should\\n\" +\n                \"      be used in preference to this legacy method.\\n\" +\n                \"     \\n\" +\n                \"      \"\n    )\n    private fun setScale(newScale: Int, roundingMode: Int): BigDecimal {\n        if (roundingMode < ROUND_UP || roundingMode > ROUND_UNNECESSARY)\n            throw IllegalArgumentException(\"Invalid rounding mode\")\n\n        val oldScale = this._scale\n        if (newScale == oldScale)\n        // easy case\n            return this\n        if (this.signum == 0)\n        // zero can have any _scale\n            return zeroValueOf(newScale)\n        if (this._intCompact != INFLATED) {\n            var rs = this._intCompact\n            if (newScale > oldScale) {\n                val raise = checkScale(newScale.toLong() - oldScale)\n                rs = longMultiplyPowerTen(rs, raise)\n                if (rs != INFLATED) {\n                    return of(rs, newScale)\n                }\n                val rb = bigMultiplyPowerTen(raise)\n                return BigDecimal(rb, INFLATED, newScale, if (_precision > 0) _precision + raise else 0)\n            } else {\n                // newScale < oldScale -- drop some digits\n                // Can't predict the _precision due to the effect of rounding.\n                val drop = checkScale(oldScale.toLong() - newScale)\n                return if (drop < LONG_TEN_POWERS_TABLE.size) {\n                    divideAndRound(rs, LONG_TEN_POWERS_TABLE[drop], newScale, roundingMode, newScale)\n                } else {\n                    divideAndRound(this.inflated(), bigTenToThe(drop), newScale, roundingMode, newScale)\n                }\n            }\n        } else {\n            if (newScale > oldScale) {\n                val raise = checkScale(newScale.toLong() - oldScale)\n                val rb = bigMultiplyPowerTen(this._intVal, raise)\n                return BigDecimal(rb!!, INFLATED, newScale, if (_precision > 0) _precision + raise else 0)\n            } else {\n                // newScale < oldScale -- drop some digits\n                // Can't predict the _precision due to the effect of rounding.\n                val drop = checkScale(oldScale.toLong() - newScale)\n                return if (drop < LONG_TEN_POWERS_TABLE.size)\n                    divideAndRound(\n                        this._intVal!!, LONG_TEN_POWERS_TABLE[drop], newScale, roundingMode,\n                        newScale\n                    )\n                else\n                    divideAndRound(this._intVal!!, bigTenToThe(drop), newScale, roundingMode, newScale)\n            }\n        }\n    }\n\n    /**\n     * Returns a [BigDecimal] whose _scale is the specified\n     * value, and whose value is numerically equal to this\n     * [BigDecimal]'s.  Throws an `ArithmeticException`\n     * if this is not possible.\n     *\n     *\n     * This call is typically used to increase the _scale, in which\n     * case it is guaranteed that there exists a [BigDecimal]\n     * of the specified _scale and the correct value.  The call can\n     * also be used to reduce the _scale if the caller knows that the\n     * [BigDecimal] has sufficiently many zeros at the end of\n     * its fractional part (i.e., factors of ten in its integer value)\n     * to allow for the rescaling without changing its value.\n     *\n     *\n     * This method returns the same result as the two-argument\n     * versions of `setScale`, but saves the caller the trouble\n     * of specifying a rounding mode in cases where it is irrelevant.\n     *\n     * @apiNote Since [BigDecimal] objects are immutable,\n     * calls of this method do *not* result in the original\n     * object being modified, contrary to the usual convention of\n     * having methods named `set*X*` mutate field\n     * *`X`*.  Instead, `setScale` returns an\n     * object with the proper _scale; the returned object may or may\n     * not be newly allocated.\n     *\n     * @param  newScale _scale of the [BigDecimal] value to be returned.\n     * @return a [BigDecimal] whose _scale is the specified value, and\n     * whose unscaled value is determined by multiplying or dividing\n     * this [BigDecimal]'s unscaled value by the appropriate\n     * power of ten to maintain its overall value.\n     * @throws ArithmeticException if the specified scaling operation would\n     * require rounding.\n     * @see .setScale\n     * @see .setScale\n     */\n    @JsName(\"setScale\")\n    fun setScale(newScale: Int): BigDecimal {\n        return setScale(newScale, ROUND_UNNECESSARY)\n    }\n\n\n    // Decimal Point Motion Operations\n\n    /**\n     * Returns a [BigDecimal] which is equivalent to this one\n     * with the decimal point moved `n` places to the left.  If\n     * `n` is non-negative, the call merely adds `n` to\n     * the _scale.  If `n` is negative, the call is equivalent\n     * to `movePointRight(-n)`.  The [BigDecimal]\n     * returned by this call has value `(this\n     * 10<sup>-n</sup>)` and _scale `max(this._scale()+n,\n     * 0)`.\n     *\n     * @param  n number of places to move the decimal point to the left.\n     * @return a [BigDecimal] which is equivalent to this one with the\n     * decimal point moved `n` places to the left.\n     * @throws ArithmeticException if _scale overflows.\n     */\n    @JsName(\"movePointLeft\")\n    fun movePointLeft(n: Int): BigDecimal {\n        // Cannot use movePointRight(-n) in case of n==Int.MIN_VALUE\n        val newScale = checkScale(_scale.toLong() + n)\n        val num = BigDecimal(_intVal!!, _intCompact, newScale, 0)\n        return if (num._scale < 0) num.setScale(0, ROUND_UNNECESSARY) else num\n    }\n\n    /**\n     * Returns a [BigDecimal] which is equivalent to this one\n     * with the decimal point moved `n` places to the right.\n     * If `n` is non-negative, the call merely subtracts\n     * `n` from the _scale.  If `n` is negative, the call\n     * is equivalent to `movePointLeft(-n)`.  The\n     * [BigDecimal] returned by this call has value `(this\n     *  10<sup>n</sup>)` and _scale `max(this._scale()-n,\n     * 0)`.\n     *\n     * @param  n number of places to move the decimal point to the right.\n     * @return a [BigDecimal] which is equivalent to this one\n     * with the decimal point moved `n` places to the right.\n     * @throws ArithmeticException if _scale overflows.\n     */\n    @JsName(\"movePointRight\")\n    fun movePointRight(n: Int): BigDecimal {\n        // Cannot use movePointLeft(-n) in case of n==Int.MIN_VALUE\n        val newScale = checkScale(_scale.toLong() - n)\n        val num = BigDecimal(_intVal!!, _intCompact, newScale, 0)\n        return if (num._scale < 0) num.setScale(0, ROUND_UNNECESSARY) else num\n    }\n\n    /**\n     * Returns a BigDecimal whose numerical value is equal to\n     * (`this` * 10<sup>n</sup>).  The _scale of\n     * the result is `(this._scale() - n)`.\n     *\n     * @param n the exponent power of ten to _scale by\n     * @return a BigDecimal whose numerical value is equal to\n     * (`this` * 10<sup>n</sup>)\n     * @throws ArithmeticException if the _scale would be\n     * outside the range of a 32-bit integer.\n     *\n     * @since 1.5\n     */\n    @JsName(\"scaleByPowerOfTen\")\n    fun scaleByPowerOfTen(n: Int): BigDecimal {\n        return BigDecimal(\n            _intVal, _intCompact,\n            checkScale(_scale.toLong() - n), _precision\n        )\n    }\n\n    /**\n     * Returns a [BigDecimal] which is numerically equal to\n     * this one but with any trailing zeros removed from the\n     * representation.  For example, stripping the trailing zeros from\n     * the [BigDecimal] value `600.0`, which has\n     * [[BigInteger], `_scale`] components equals to\n     * `[6000, 1]`, yields `6E2` with `[BigInteger,\n     * scale]` components equals to `[6, -2]`.  If\n     * this BigDecimal is numerically equal to zero, then\n     * `BigDecimal.ZERO` is returned.\n     *\n     * @return a numerically equal [BigDecimal] with any\n     * trailing zeros removed.\n     * @since 1.5\n     */\n    @JsName(\"stripTrailingZeros\")\n    fun stripTrailingZeros(): BigDecimal {\n        return if (_intCompact == 0L || _intVal != null && _intVal.signum == 0) {\n            BigDecimal.ZERO\n        } else if (_intCompact != INFLATED) {\n            createAndStripZerosToMatchScale(_intCompact, _scale, Long.MIN_VALUE)\n        } else {\n            createAndStripZerosToMatchScale(_intVal!!, _scale, Long.MIN_VALUE)\n        }\n    }\n\n    // Comparison Operations\n\n    /**\n     * Compares this [BigDecimal] with the specified\n     * [BigDecimal].  Two [BigDecimal] objects that are\n     * equal in value but have a different _scale (like 2.0 and 2.00)\n     * are considered equal by this method.  This method is provided\n     * in preference to individual methods for each of the six boolean\n     * comparison operators (&lt;, ==,\n     * &gt;, &gt;=, !=, &lt;=).  The\n     * suggested idiom for performing these comparisons is:\n     * `(x.compareTo(y)` &lt;*op*&gt; `0)`, where\n     * &lt;*op*&gt; is one of the six comparison operators.\n     *\n     * @param  other [BigDecimal] to which this [BigDecimal] is\n     * to be compared.\n     * @return -1, 0, or 1 as this [BigDecimal] is numerically\n     * less than, equal to, or greater than `val`.\n     */\n    override fun compareTo(other: BigDecimal): Int {\n        // Quick path for equal _scale and non-inflated case.\n        if (_scale == other._scale) {\n            val xs = _intCompact\n            val ys = other._intCompact\n            if (xs != INFLATED && ys != INFLATED)\n                return if (xs != ys) if (xs > ys) 1 else -1 else 0\n        }\n        val xsign = this.signum\n        val ysign = other.signum\n        if (xsign != ysign)\n            return if (xsign > ysign) 1 else -1\n        if (xsign == 0)\n            return 0\n        val cmp = compareMagnitude(other)\n        return if (xsign > 0) cmp else -cmp\n    }\n\n    /**\n     * Version of compareTo that ignores sign.\n     */\n    private fun compareMagnitude(`val`: BigDecimal): Int {\n        // Match scales, avoid unnecessary inflation\n        var ys = `val`._intCompact\n        var xs = this._intCompact\n        if (xs == 0L)\n            return if (ys == 0L) 0 else -1\n        if (ys == 0L)\n            return 1\n\n        val sdiff = this._scale.toLong() - `val`._scale\n        if (sdiff != 0L) {\n            // Avoid matching scales if the (adjusted) exponents differ\n            val xae = this.precision.toLong() - this._scale   // [-1]\n            val yae = `val`.precision.toLong() - `val`._scale     // [-1]\n            if (xae < yae)\n                return -1\n            if (xae > yae)\n                return 1\n            if (sdiff < 0) {\n                // The cases sdiff <= Int.MIN_VALUE intentionally fall through.\n                if (sdiff > Int.MIN_VALUE &&\n                    (xs == INFLATED || run{xs = longMultiplyPowerTen(xs, (-sdiff).toInt()); xs} == INFLATED) &&\n                    ys == INFLATED\n                ) {\n                    val rb = bigMultiplyPowerTen((-sdiff).toInt())\n                    return rb.compareMagnitude(`val`._intVal!!)\n                }\n            } else { // sdiff > 0\n                // The cases sdiff > Int.MAX_VALUE intentionally fall through.\n                if (sdiff <= Int.MAX_VALUE &&\n                    (ys == INFLATED || run{ys = longMultiplyPowerTen(ys, sdiff.toInt()); ys} == INFLATED) &&\n                    xs == INFLATED\n                ) {\n                    val rb = `val`.bigMultiplyPowerTen(sdiff.toInt())\n                    return this._intVal!!.compareMagnitude(rb)\n                }\n            }\n        }\n        return if (xs != INFLATED)\n            if (ys != INFLATED) longCompareMagnitude(xs, ys) else -1\n        else if (ys != INFLATED)\n            1\n        else\n            this._intVal!!.compareMagnitude(`val`._intVal!!)\n    }\n\n    /**\n     * Compares this [BigDecimal] with the specified\n     * `Object` for equality.  Unlike [BigDecimal.compareTo], this method considers two\n     * [BigDecimal] objects equal only if they are equal in\n     * value and _scale (thus 2.0 is not equal to 2.00 when compared by\n     * this method).\n     *\n     * @param  other `Object` to which this [BigDecimal] is\n     * to be compared.\n     * @return `true` if and only if the specified `Object` is a\n     * [BigDecimal] whose value and _scale are equal to this\n     * [BigDecimal]'s.\n     * @see .compareTo\n     * @see .hashCode\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other !is BigDecimal)\n            return false\n        val xDec = other as BigDecimal?\n        if (other === this)\n            return true\n        if (_scale != xDec!!._scale)\n            return false\n        val s = this._intCompact\n        var xs = xDec._intCompact\n        if (s != INFLATED) {\n            if (xs == INFLATED)\n                xs = compactValFor(xDec._intVal!!)\n            return xs == s\n        } else if (xs != INFLATED)\n            return xs == compactValFor(this._intVal!!)\n\n        return this.inflated() == xDec.inflated()\n    }\n\n    /**\n     * Returns the minimum of this [BigDecimal] and\n     * `val`.\n     *\n     * @param  val value with which the minimum is to be computed.\n     * @return the [BigDecimal] whose value is the lesser of this\n     * [BigDecimal] and `val`.  If they are equal,\n     * as defined by the [compareTo][BigDecimal.compareTo]\n     * method, `this` is returned.\n     * @see .compareTo\n     */\n    @JsName(\"min\")\n    fun min(`val`: BigDecimal): BigDecimal {\n        return if (this <= `val`) this else `val`\n    }\n\n    /**\n     * Returns the maximum of this [BigDecimal] and `val`.\n     *\n     * @param  val value with which the maximum is to be computed.\n     * @return the [BigDecimal] whose value is the greater of this\n     * [BigDecimal] and `val`.  If they are equal,\n     * as defined by the [compareTo][BigDecimal.compareTo]\n     * method, `this` is returned.\n     * @see .compareTo\n     */\n    @JsName(\"max\")\n    fun max(`val`: BigDecimal): BigDecimal {\n        return if (this >= `val`) this else `val`\n    }\n\n    // Hash Function\n\n    /**\n     * Returns the hash code for this [BigDecimal].  Note that\n     * two [BigDecimal] objects that are numerically equal but\n     * differ in _scale (like 2.0 and 2.00) will generally *not*\n     * have the same hash code.\n     *\n     * @return hash code for this [BigDecimal].\n     * @see .equals\n     */\n    override fun hashCode(): Int {\n        if (_intCompact != INFLATED) {\n            val val2 = if (_intCompact < 0) -_intCompact else _intCompact\n            val temp = (val2.ushr(32).toInt() * 31 + (val2 and LONG_MASK)).toInt()\n            return 31 * (if (_intCompact < 0) -temp else temp) + _scale\n        } else\n            return 31 * _intVal!!.hashCode() + _scale\n    }\n\n    // Format Converters\n\n    /**\n     * Returns the string representation of this [BigDecimal],\n     * using scientific notation if an exponent is needed.\n     *\n     *\n     * A standard canonical string form of the [BigDecimal]\n     * is created as though by the following steps: first, the\n     * absolute value of the unscaled value of the [BigDecimal]\n     * is converted to a string in base ten using the characters\n     * `'0'` through `'9'` with no leading zeros (except\n     * if its value is zero, in which case a single `'0'`\n     * character is used).\n     *\n     *\n     * Next, an *adjusted exponent* is calculated; this is the\n     * negated _scale, plus the number of characters in the converted\n     * unscaled value, less one.  That is,\n     * `-_scale+(ulength-1)`, where `ulength` is the\n     * length of the absolute value of the unscaled value in decimal\n     * digits (its *_precision*).\n     *\n     *\n     * If the _scale is greater than or equal to zero and the\n     * adjusted exponent is greater than or equal to `-6`, the\n     * number will be converted to a character form without using\n     * exponential notation.  In this case, if the _scale is zero then\n     * no decimal point is added and if the _scale is positive a\n     * decimal point will be inserted with the _scale specifying the\n     * number of characters to the right of the decimal point.\n     * `'0'` characters are added to the left of the converted\n     * unscaled value as necessary.  If no character precedes the\n     * decimal point after this insertion then a conventional\n     * `'0'` character is prefixed.\n     *\n     *\n     * Otherwise (that is, if the _scale is negative, or the\n     * adjusted exponent is less than `-6`), the number will be\n     * converted to a character form using exponential notation.  In\n     * this case, if the converted [BigInteger] has more than\n     * one digit a decimal point is inserted after the first digit.\n     * An exponent in character form is then suffixed to the converted\n     * unscaled value (perhaps with inserted decimal point); this\n     * comprises the letter `'E'` followed immediately by the\n     * adjusted exponent converted to a character form.  The latter is\n     * in base ten, using the characters `'0'` through\n     * `'9'` with no leading zeros, and is always prefixed by a\n     * sign character `'-'` (`'&#92;u002D'`) if the\n     * adjusted exponent is negative, `'+'`\n     * (`'&#92;u002B'`) otherwise).\n     *\n     *\n     * Finally, the entire string is prefixed by a minus sign\n     * character `'-'` (`'&#92;u002D'`) if the unscaled\n     * value is less than zero.  No sign character is prefixed if the\n     * unscaled value is zero or positive.\n     *\n     *\n     * **Examples:**\n     *\n     * For each representation `[unscaled value, scale]`\n     * on the left, the resulting string is shown on the right.\n     * <pre>\n     * [123,0]`      \"123\"\n     * [-123,0]     \"-123\"\n     * [123,-1]     \"1.23E+3\"\n     * [123,-3]     \"1.23E+5\"\n     * [123,1]      \"12.3\"\n     * [123,5]      \"0.00123\"\n     * [123,10]     \"1.23E-8\"\n     * [-123,12]    \"-1.23E-10\"\n    </pre> *\n     *\n     * **Notes:**\n     *\n     *\n     *  1. There is a one-to-one mapping between the distinguishable\n     * [BigDecimal] values and the result of this conversion.\n     * That is, every distinguishable [BigDecimal] value\n     * (unscaled value and _scale) has a unique string representation\n     * as a result of using `toString`.  If that string\n     * representation is converted back to a [BigDecimal] using\n     * the aforementioned constructor, then the original\n     * value will be recovered.\n     *\n     *  1. The string produced for a given number is always the same;\n     * it is not affected by locale.  This means that it can be used\n     * as a canonical string representation for exchanging decimal\n     * data, or as a key for a Hashtable, etc.  Locale-sensitive\n     * number formatting and parsing is handled by the ??? class and its subclasses.\n     *\n     *  1. The [BigDecimal.toEngineeringString] method may be used for\n     * presenting numbers with exponents in engineering notation, and the\n     * [setScale][BigDecimal.setScale] method may be used for\n     * rounding a [BigDecimal] so it has a known number of digits after\n     * the decimal point.\n     *\n     *  1. The digit-to-character mapping provided by\n     * `Character.forDigit` is used.\n     *\n     *\n     *\n     * @return string representation of this [BigDecimal].\n     */\n    override fun toString(): String {\n        var sc = _stringCache\n        if (sc == null) {\n            sc = layoutChars(true)\n            _stringCache = sc\n        }\n        return sc\n    }\n\n    /**\n     * Returns a string representation of this [BigDecimal],\n     * using engineering notation if an exponent is needed.\n     *\n     *\n     * Returns a string that represents the [BigDecimal] as\n     * described in the [BigDecimal.toString] method, except that if\n     * exponential notation is used, the power of ten is adjusted to\n     * be a multiple of three (engineering notation) such that the\n     * integer part of nonzero values will be in the range 1 through\n     * 999.  If exponential notation is used for zero values, a\n     * decimal point and one or two fractional zero digits are used so\n     * that the _scale of the zero value is preserved.  Note that\n     * unlike the output of [BigDecimal.toString], the output of this\n     * method is *not* guaranteed to recover the same `[integer,\n     * _scale]` pair of this [BigDecimal] if the output string is\n     * converting back to a [BigDecimal] using the aforementioned.  The result of this method meets\n     * the weaker constraint of always producing a numerically equal\n     * result from applying the string constructor to the method's output.\n     *\n     * @return string representation of this [BigDecimal], using\n     * engineering notation if an exponent is needed.\n     * @since  1.5\n     */\n    @JsName(\"toEngineeringString\")\n    fun toEngineeringString(): String {\n        return layoutChars(false)\n    }\n\n    /**\n     * Returns a string representation of this [BigDecimal]\n     * without an exponent field.  For values with a positive _scale,\n     * the number of digits to the right of the decimal point is used\n     * to indicate _scale.  For values with a zero or negative _scale,\n     * the resulting string is generated as if the value were\n     * converted to a numerically equal value with zero _scale and as\n     * if all the trailing zeros of the zero _scale value were present\n     * in the result.\n     *\n     * The entire string is prefixed by a minus sign character '-'\n     * (`'&#92;u002D'`) if the unscaled value is less than\n     * zero. No sign character is prefixed if the unscaled value is\n     * zero or positive.\n     *\n     * Note that if the result of this method is passed to the\n     * string constructor, only the\n     * numerical value of this [BigDecimal] will necessarily be\n     * recovered; the representation of the new [BigDecimal]\n     * may have a different _scale.  In particular, if this\n     * [BigDecimal] has a negative _scale, the string resulting\n     * from this method will have a _scale of zero when processed by\n     * the string constructor.\n     *\n     * (This method behaves analogously to the `toString`\n     * method in 1.4 and earlier releases.)\n     *\n     * @return a string representation of this [BigDecimal]\n     * without an exponent field.\n     * @since 1.5\n     * @see .toString\n     * @see .toEngineeringString\n     */\n    @JsName(\"toPlainString\")\n    fun toPlainString(): String {\n        if (_scale == 0) {\n            return if (_intCompact != INFLATED) {\n                _intCompact.toString()\n            } else {\n                _intVal!!.toString()\n            }\n        }\n        if (this._scale < 0) { // No decimal point\n            if (signum == 0) {\n                return \"0\"\n            }\n            val trailingZeros = checkScaleNonZero(-_scale.toLong())\n            val buf: StringBuilder\n            if (_intCompact != INFLATED) {\n                buf = StringBuilder(20 + trailingZeros)\n                buf.append(_intCompact)\n            } else {\n                val str = _intVal!!.toString()\n                buf = StringBuilder(str.length + trailingZeros)\n                buf.append(str)\n            }\n            for (i in 0 until trailingZeros) {\n                buf.append('0')\n            }\n            return buf.toString()\n        }\n        val str: String\n        if (_intCompact != INFLATED) {\n            str = _intCompact.absoluteValue.toString() // java.lang.Long.toString(Math.absoluteValue(_intCompact))\n        } else {\n            str = _intVal!!.absoluteValue.toString()\n        }\n        return getValueString(signum, str, _scale)\n    }\n\n    /* Returns a digit.digit string */\n    private fun getValueString(signum: Int, intString: String, scale: Int): String {\n        /* Insert decimal point */\n        val buf: StringBuilder\n        val insertionPoint = intString.length - scale\n        if (insertionPoint == 0) {  /* Point goes right before _intVal */\n            return (if (signum < 0) \"-0.\" else \"0.\") + intString\n        } else if (insertionPoint > 0) { /* Point goes inside _intVal */\n            buf = StringBuilder(intString)\n            buf.insertChar(insertionPoint, '.')\n            if (signum < 0)\n                buf.insertChar(0, '-')\n        } else { /* We must insert zeros between point and _intVal */\n            buf = StringBuilder(3 - insertionPoint + intString.length)\n            buf.append(if (signum < 0) \"-0.\" else \"0.\")\n            for (i in 0 until -insertionPoint) {\n                buf.append('0')\n            }\n            buf.append(intString)\n        }\n        return buf.toString()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a [BigInteger].\n     * This conversion is analogous to the\n     * *narrowing primitive conversion* from `double` to\n     * `long` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * any fractional part of this\n     * [BigDecimal] will be discarded.  Note that this\n     * conversion can lose information about the _precision of the\n     * [BigDecimal] value.\n     *\n     *\n     * To have an exception thrown if the conversion is inexact (in\n     * other words if a nonzero fractional part is discarded), use the\n     * [BigDecimal.toBigIntegerExact] method.\n     *\n     * @return this [BigDecimal] converted to a [BigInteger].\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toBigInteger\")\n    fun toBigInteger(): BigInteger {\n        // force to an integer, quietly\n        return this.setScale(0, ROUND_DOWN).inflated()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a [BigInteger],\n     * checking for lost information.  An exception is thrown if this\n     * [BigDecimal] has a nonzero fractional part.\n     *\n     * @return this [BigDecimal] converted to a [BigInteger].\n     * @throws ArithmeticException if `this` has a nonzero\n     * fractional part.\n     * @since  1.5\n     */\n    @JsName(\"toBigIntegerExact\")\n    fun toBigIntegerExact(): BigInteger {\n        // round to an integer, with Exception if decimal part non-0\n        return this.setScale(0, ROUND_UNNECESSARY).inflated()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `long`.\n     * This conversion is analogous to the\n     * *narrowing primitive conversion* from `double` to\n     * `short` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * any fractional part of this\n     * [BigDecimal] will be discarded, and if the resulting\n     * \"[BigInteger]\" is too big to fit in a\n     * `long`, only the low-order 64 bits are returned.\n     * Note that this conversion can lose information about the\n     * overall magnitude and _precision of this [BigDecimal] value as well\n     * as return a result with the opposite sign.\n     *\n     * @return this [BigDecimal] converted to a `long`.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toLong\")\n    /*override*/ fun toLong(): Long {\n        return if (_intCompact != INFLATED && _scale == 0)\n            _intCompact\n        else\n            toBigInteger().toLong()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `long`, checking\n     * for lost information.  If this [BigDecimal] has a\n     * nonzero fractional part or is out of the possible range for a\n     * `long` result then an `ArithmeticException` is\n     * thrown.\n     *\n     * @return this [BigDecimal] converted to a `long`.\n     * @throws ArithmeticException if `this` has a nonzero\n     * fractional part, or will not fit in a `long`.\n     * @since  1.5\n     */\n    @JsName(\"toLongExact\")\n    fun toLongExact(): Long {\n        if (_intCompact != INFLATED && _scale == 0)\n            return _intCompact\n        // If more than 19 digits in integer part it cannot possibly fit\n        if (precision - _scale > 19)\n        // [OK for negative _scale too]\n            throw ArithmeticException(\"Overflow\")\n        // Fastpath zero and < 1.0 numbers (the latter can be very slow\n        // to round if very small)\n        if (this.signum == 0)\n            return 0\n        if (this.precision - this._scale <= 0)\n            throw ArithmeticException(\"Rounding necessary\")\n        // round to an integer, with Exception if decimal part non-0\n        val num = this.setScale(0, ROUND_UNNECESSARY)\n        if (num.precision >= 19)\n        // need to check carefully\n            LongOverflow.check(num)\n        return num.inflated().toLong()\n    }\n\n    private object LongOverflow {\n        /** BigInteger equal to Long.MIN_VALUE.  */\n        private val LONGMIN = BigInteger.of(Long.MIN_VALUE)\n\n        /** BigInteger equal to Long.MAX_VALUE.  */\n        private val LONGMAX = BigInteger.of(Long.MAX_VALUE)\n\n        fun check(num: BigDecimal) {\n            val intVal = num.inflated()\n            if (intVal < LONGMIN || intVal > LONGMAX)\n                throw ArithmeticException(\"Overflow\")\n        }\n    }\n\n    /**\n     * Converts this [BigDecimal] to an `int`.\n     * This conversion is analogous to the\n     * *narrowing primitive conversion* from `double` to\n     * `short` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * any fractional part of this\n     * [BigDecimal] will be discarded, and if the resulting\n     * \"[BigInteger]\" is too big to fit in an\n     * `int`, only the low-order 32 bits are returned.\n     * Note that this conversion can lose information about the\n     * overall magnitude and _precision of this [BigDecimal]\n     * value as well as return a result with the opposite sign.\n     *\n     * @return this [BigDecimal] converted to an `int`.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toInt\")\n    /*override*/ fun toInt(): Int {\n        return if (_intCompact != INFLATED && _scale == 0)\n            _intCompact.toInt()\n        else\n            toBigInteger().toInt()\n    }\n\n    @JsName(\"toByte\")\n    /*override*/ fun toByte(): Byte {\n        return toInt().toByte()\n    }\n\n    @JsName(\"toChar\")\n    /*override*/ fun toChar(): Char {\n        return toInt().toChar()\n    }\n\n    @JsName(\"toShort\")\n    /*override*/ fun toShort(): Short {\n        return toInt().toShort()\n    }\n\n    /**\n     * Converts this [BigDecimal] to an `int`, checking\n     * for lost information.  If this [BigDecimal] has a\n     * nonzero fractional part or is out of the possible range for an\n     * `int` result then an `ArithmeticException` is\n     * thrown.\n     *\n     * @return this [BigDecimal] converted to an `int`.\n     * @throws ArithmeticException if `this` has a nonzero\n     * fractional part, or will not fit in an `int`.\n     * @since  1.5\n     */\n    @JsName(\"toIntExact\")\n    fun toIntExact(): Int {\n        val num: Long = this.toLongExact() // will check decimal part\n\n        if (num.toInt().toLong() != num)\n            throw ArithmeticException(\"Overflow\")\n        return num.toInt()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `short`, checking\n     * for lost information.  If this [BigDecimal] has a\n     * nonzero fractional part or is out of the possible range for a\n     * `short` result then an `ArithmeticException` is\n     * thrown.\n     *\n     * @return this [BigDecimal] converted to a `short`.\n     * @throws ArithmeticException if `this` has a nonzero\n     * fractional part, or will not fit in a `short`.\n     * @since  1.5\n     */\n    @JsName(\"toShortExact\")\n    fun toShortExact(): Short {\n        val num: Long = this.toLongExact()     // will check decimal part\n\n        if (num.toShort().toLong() != num)\n            throw ArithmeticException(\"Overflow\")\n        return num.toShort()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `byte`, checking\n     * for lost information.  If this [BigDecimal] has a\n     * nonzero fractional part or is out of the possible range for a\n     * `byte` result then an `ArithmeticException` is\n     * thrown.\n     *\n     * @return this [BigDecimal] converted to a `byte`.\n     * @throws ArithmeticException if `this` has a nonzero\n     * fractional part, or will not fit in a `byte`.\n     * @since  1.5\n     */\n    @JsName(\"toByteExact\")\n    fun toByteExact(): Byte {\n        val num: Long = this.toLongExact()     // will check decimal part\n\n        if (num.toByte().toLong() != num)\n            throw ArithmeticException(\"Overflow\")\n        return num.toByte()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `float`.\n     * This conversion is similar to the\n     * *narrowing primitive conversion* from `double` to\n     * `float` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * if this [BigDecimal] has too great a\n     * magnitude to represent as a `float`, it will be\n     * converted to [Float.NEGATIVE_INFINITY] or [ ][Float.POSITIVE_INFINITY] as appropriate.  Note that even when\n     * the return value is finite, this conversion can lose\n     * information about the _precision of the [BigDecimal]\n     * value.\n     *\n     * @return this [BigDecimal] converted to a `float`.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toFloat\")\n    /*override*/ fun toFloat(): Float {\n        if (_intCompact != INFLATED) {\n            if (_scale == 0) {\n                return _intCompact.toFloat()\n            } else {\n                /*\n                 * If both _intCompact and the _scale can be exactly\n                 * represented as float values, perform a single float\n                 * timesLong or div to compute the (properly\n                 * rounded) result.\n                 */\n                if (abs(_intCompact) < 1L shl 22) {\n                    // Don't have too guard against\n                    // Math.absoluteValue(MIN_VALUE) because of outer check\n                    // against INFLATED.\n                    if (_scale > 0 && _scale < FLOAT_10_POW.size) {\n                        return _intCompact.toFloat() / FLOAT_10_POW[_scale]\n                    } else if (_scale < 0 && _scale > -FLOAT_10_POW.size) {\n                        return _intCompact.toFloat() * FLOAT_10_POW[-_scale]\n                    }\n                }\n            }\n        }\n        // Somewhat inefficient, but guaranteed to work.\n        return this.toString().toFloat()\n    }\n\n    /**\n     * Converts this [BigDecimal] to a `double`.\n     * This conversion is similar to the\n     * *narrowing primitive conversion* from `double` to\n     * `float` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * if this [BigDecimal] has too great a\n     * magnitude represent as a `double`, it will be\n     * converted to [Double.NEGATIVE_INFINITY] or [ ][Double.POSITIVE_INFINITY] as appropriate.  Note that even when\n     * the return value is finite, this conversion can lose\n     * information about the _precision of the [BigDecimal]\n     * value.\n     *\n     * @return this [BigDecimal] converted to a `double`.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toDouble\")\n    /*override*/ fun toDouble(): Double {\n        if (_intCompact != INFLATED) {\n            if (_scale == 0) {\n                return _intCompact.toDouble()\n            } else {\n                /*\n                 * If both _intCompact and the _scale can be exactly\n                 * represented as double values, perform a single\n                 * double timesLong or div to compute the (properly\n                 * rounded) result.\n                 */\n                if (abs(_intCompact) < 1L shl 52) {\n                    // Don't have too guard against\n                    // Math.absoluteValue(MIN_VALUE) because of outer check\n                    // against INFLATED.\n                    if (_scale > 0 && _scale < DOUBLE_10_POW.size) {\n                        return _intCompact.toDouble() / DOUBLE_10_POW[_scale]\n                    } else if (_scale < 0 && _scale > -DOUBLE_10_POW.size) {\n                        return _intCompact.toDouble() * DOUBLE_10_POW[-_scale]\n                    }\n                }\n            }\n        }\n        // Somewhat inefficient, but guaranteed to work.\n        return this.toString().toDouble()\n    }\n\n    /**\n     * Returns the size of an ulp, a unit in the last place, of this\n     * [BigDecimal].  An ulp of a nonzero [BigDecimal]\n     * value is the positive distance between this value and the\n     * [BigDecimal] value next larger in magnitude with the\n     * same number of digits.  An ulp of a zero value is numerically\n     * equal to 1 with the _scale of `this`.  The result is\n     * stored with the same _scale as `this` so the result\n     * for zero and nonzero values is equal to `[1,\n     * this._scale()]`.\n     *\n     * @return the size of an ulp of `this`\n     * @since 1.5\n     */\n    @JsName(\"ulp\")\n    fun ulp(): BigDecimal {\n        return BigDecimal.of(1, this.scale, 1)\n    }\n\n    // Private class to build a string representation for BigDecimal object.\n    // \"StringBuilderHelper\" is constructed as a thread local variable so it is\n    // thread safe. The StringBuilder field acts as a buffer to hold the temporary\n    // representation of BigDecimal. The cmpCharArray holds all the characters for\n    // the compact representation of BigDecimal (except for '-' sign' if it is\n    // negative) if its _intCompact field is not INFLATED. It is shared by all\n    // calls to toString() and its variants in that particular thread.\n    internal class StringBuilderHelper(// Placeholder for BigDecimal string\n        // All non negative longs can be made to fit into 19 character array.\n        val sb: StringBuilder = StringBuilder(),// character array to place the _intCompact\n        val compactCharArray: CharArray = CharArray(19)\n    ) {\n\n        // Accessors.\n        val stringBuilder: StringBuilder\n            get() {\n                sb.removeRange(0, sb.length)\n                return sb\n            }\n\n        /**\n         * Places characters representing the _intCompact in `long` into\n         * cmpCharArray and returns the offset to the array where the\n         * representation starts.\n         *\n         * @param intCompact the number to put into the cmpCharArray.\n         * @return offset to the array where the representation starts.\n         * Note: _intCompact must be greater or equal to zero.\n         */\n        fun putIntCompact(intCompact: Long): Int {\n            var intCompact = intCompact\n            require(intCompact >= 0)\n\n            var q: Long\n            var r: Int\n            // since we start from the least significant digit, charPos points to\n            // the last character in cmpCharArray.\n            var charPos = compactCharArray.size\n\n            // Get 2 digits/iteration using longs until quotient fits into an int\n            while (intCompact > Int.MAX_VALUE) {\n                q = intCompact / 100\n                r = (intCompact - q * 100).toInt()\n                intCompact = q\n                compactCharArray[--charPos] = DIGIT_ONES[r]\n                compactCharArray[--charPos] = DIGIT_TENS[r]\n            }\n\n            // Get 2 digits/iteration using ints when i2 >= 100\n            var q2: Int\n            var i2 = intCompact.toInt()\n            while (i2 >= 100) {\n                q2 = i2 / 100\n                r = i2 - q2 * 100\n                i2 = q2\n                compactCharArray[--charPos] = DIGIT_ONES[r]\n                compactCharArray[--charPos] = DIGIT_TENS[r]\n            }\n\n            compactCharArray[--charPos] = DIGIT_ONES[i2]\n            if (i2 >= 10)\n                compactCharArray[--charPos] = DIGIT_TENS[i2]\n\n            return charPos\n        }\n\n        companion object {\n\n            val DIGIT_TENS = charArrayOf(\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '0',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '1',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '2',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '3',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '4',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '5',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '6',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '7',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '8',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9',\n                '9'\n            )\n\n            val DIGIT_ONES = charArrayOf(\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9'\n            )\n        }\n    }\n\n    /**\n     * Lay out this [BigDecimal] into a `char[]` array.\n     * The Java 1.2 equivalent to this was called `getValueString`.\n     *\n     * @param  sci `true` for Scientific exponential notation;\n     * `false` for Engineering\n     * @return string with canonical string representation of this\n     * [BigDecimal]\n     */\n    private fun layoutChars(sci: Boolean): String {\n        if (_scale == 0)\n        // zero _scale is trivial\n            return if (_intCompact != INFLATED)\n                _intCompact.toString()\n            else\n                _intVal!!.toString()\n        if (_scale == 2 &&\n            _intCompact >= 0 && _intCompact < Int.MAX_VALUE\n        ) {\n            // currency fast path\n            val lowInt = _intCompact.toInt() % 100\n            val highInt = _intCompact.toInt() / 100\n            return highInt.toString() + '.'.toString() +\n                    StringBuilderHelper.DIGIT_TENS[lowInt] +\n                    StringBuilderHelper.DIGIT_ONES[lowInt]\n        }\n\n        val sbHelper = StringBuilderHelper()\n        val coeff: CharArray\n        val offset: Int  // offset is the starting index for coeff array\n        // Get the significand as an absolute value\n        if (_intCompact != INFLATED) {\n            offset = sbHelper.putIntCompact(abs(_intCompact))\n            coeff = sbHelper.compactCharArray\n        } else {\n            offset = 0\n            coeff = _intVal!!.absoluteValue.toString().toCharArray()\n        }\n\n        // Construct a buffer, with sufficient capacity for all cases.\n        // If E-notation is needed, length will be: +1 if negative, +1\n        // if '.' needed, +2 for \"E+\", + up to 10 for adjusted exponent.\n        // Otherwise it could have +1 if negative, plus leading \"0.00000\"\n        val buf = sbHelper.stringBuilder\n        if (signum < 0)\n        // prefix '-' if negative\n            buf.append('-')\n        val coeffLen = coeff.size - offset\n        var adjusted = -_scale.toLong() + (coeffLen - 1)\n        if (_scale >= 0 && adjusted >= -6) { // plain number\n            var pad = _scale - coeffLen         // count of padding zeros\n            if (pad >= 0) {                     // 0.xxx form\n                buf.append('0')\n                buf.append('.')\n                while (pad > 0) {\n                    buf.append('0')\n                    pad--\n                }\n                buf.appendCharArray(coeff, offset, coeffLen)\n            } else {                         // xx.xx form\n                buf.appendCharArray(coeff, offset, -pad)\n                buf.append('.')\n                buf.appendCharArray(coeff, -pad + offset, _scale)\n            }\n        } else { // E-notation is needed\n            if (sci) {                       // Scientific notation\n                buf.append(coeff[offset])   // first character\n                if (coeffLen > 1) {          // more to come\n                    buf.append('.')\n                    buf.appendCharArray(coeff, offset + 1, coeffLen - 1)\n                }\n            } else {                         // Engineering notation\n                var sig = (adjusted % 3).toInt()\n                if (sig < 0)\n                    sig += 3                // [adjusted was negative]\n                adjusted -= sig.toLong()             // now a multiple of 3\n                sig++\n                if (signum == 0) {\n                    when (sig) {\n                        1 -> buf.append('0') // exponent is a multiple of three\n                        2 -> {\n                            buf.append(\"0.00\")\n                            adjusted += 3\n                        }\n                        3 -> {\n                            buf.append(\"0.0\")\n                            adjusted += 3\n                        }\n                        else -> throw AssertionError(\"Unexpected sig value $sig\")\n                    }\n                } else if (sig >= coeffLen) {   // significand all in integer\n                    buf.appendCharArray(coeff, offset, coeffLen)\n                    // may need some zeros, too\n                    for (i in sig - coeffLen downTo 1) {\n                        buf.append('0')\n                    }\n                } else {                     // xx.xxE form\n                    buf.appendCharArray(coeff, offset, sig)\n                    buf.append('.')\n                    buf.appendCharArray(coeff, offset + sig, coeffLen - sig)\n                }\n            }\n            if (adjusted != 0L) {             // [!sci could have made 0]\n                buf.append('E')\n                if (adjusted > 0)\n                // force sign for positive\n                    buf.append('+')\n                buf.append(adjusted)\n            }\n        }\n        return buf.toString()\n    }\n\n    /**\n     * Compute this * 10 ^ n.\n     * Needed mainly to allow special casing to trap zero value\n     */\n    private fun bigMultiplyPowerTen(n: Int): BigInteger {\n        if (n <= 0)\n            return this.inflated()\n\n        return if (_intCompact != INFLATED)\n            bigTenToThe(n).timesLong(_intCompact)\n        else\n            _intVal!!.times(bigTenToThe(n))\n    }\n\n    /**\n     * Returns appropriate BigInteger from _intVal field if _intVal is\n     * null, i.e. the compact representation is in use.\n     */\n    private fun inflated(): BigInteger {\n        return _intVal ?: BigInteger.of(_intCompact)\n    }\n\n    /**\n     * Check a _scale for Underflow or Overflow.  If this BigDecimal is\n     * nonzero, throw an exception if the _scale is outof range. If this\n     * is zero, saturate the _scale to the extreme value of the right\n     * sign if the _scale is out of range.\n     *\n     * @param val The new _scale.\n     * @throws ArithmeticException (overflow or underflow) if the new\n     * _scale is out of range.\n     * @return validated _scale as an int.\n     */\n    private fun checkScale(`val`: Long): Int {\n        var asInt = `val`.toInt()\n        if (asInt.toLong() != `val`) {\n            asInt = if (`val` > Int.MAX_VALUE) Int.MAX_VALUE else Int.MIN_VALUE\n            val b: BigInteger?\n            if (_intCompact != 0L && (run { b = _intVal; b } == null || b!!.signum != 0))\n                throw ArithmeticException(if (asInt > 0) \"Underflow\" else \"Overflow\")\n        }\n        return asInt\n    }\n\n    /**\n     * Check internal invariants of this BigDecimal.  These invariants\n     * include:\n     *\n     *\n     *\n     *  * The object must be initialized; either _intCompact must not be\n     * INFLATED or _intVal is non-null.  Both of these conditions may\n     * be true.\n     *\n     *  * If both _intCompact and _intVal and set, their values must be\n     * consistent.\n     *\n     *  * If _precision is nonzero, it must have the right value.\n     *\n     *\n     * Note: Since this is an audit method, we are not supposed to change the\n     * state of this BigDecimal object.\n     */\n    private fun audit(): BigDecimal {\n        if (_intCompact == INFLATED) {\n            if (_intVal == null) {\n                print(\"audit\", this)\n                throw AssertionError(\"null _intVal\")\n            }\n            // Check _precision\n            if (_precision > 0 && _precision != bigDigitLength(_intVal)) {\n                print(\"audit\", this)\n                throw AssertionError(\"_precision mismatch\")\n            }\n        } else {\n            if (_intVal != null) {\n                val `val` = _intVal.toLong()\n                if (`val` != _intCompact) {\n                    print(\"audit\", this)\n                    throw AssertionError(\n                        \"Inconsistent state, _intCompact=\" +\n                                _intCompact + \"\\t _intVal=\" + `val`\n                    )\n                }\n            }\n            // Check _precision\n            if (_precision > 0 && _precision != longDigitLength(_intCompact)) {\n                print(\"audit\", this)\n                throw AssertionError(\"_precision mismatch\")\n            }\n        }\n        return this\n    }\n\n    companion object {\n\n        /**\n         * Sentinel value for [BigDecimal._intCompact] indicating the\n         * significand information is only available from `_intVal`.\n         */\n        internal const val INFLATED = Long.MIN_VALUE\n\n        private val INFLATED_BIGINT = BigInteger.of(INFLATED)\n\n        // All 18-digit base ten strings fit into a long; not all 19-digit\n        // strings will\n        private const val MAX_COMPACT_DIGITS = 18\n\n        // Cache of common small BigDecimal values.\n        private val ZERO_THROUGH_TEN = arrayOf(\n            BigDecimal(BigInteger.ZERO, 0, 0, 1),\n            BigDecimal(BigInteger.ONE, 1, 0, 1),\n            BigDecimal(BigInteger.TWO, 2, 0, 1),\n            BigDecimal(BigInteger.of(3), 3, 0, 1),\n            BigDecimal(BigInteger.of(4), 4, 0, 1),\n            BigDecimal(BigInteger.of(5), 5, 0, 1),\n            BigDecimal(BigInteger.of(6), 6, 0, 1),\n            BigDecimal(BigInteger.of(7), 7, 0, 1),\n            BigDecimal(BigInteger.of(8), 8, 0, 1),\n            BigDecimal(BigInteger.of(9), 9, 0, 1),\n            BigDecimal(BigInteger.TEN, 10, 0, 2)\n        )\n\n        // Cache of zero scaled by 0 - 15\n        private val ZERO_SCALED_BY = arrayOf(\n            ZERO_THROUGH_TEN[0],\n            BigDecimal(BigInteger.ZERO, 0, 1, 1),\n            BigDecimal(BigInteger.ZERO, 0, 2, 1),\n            BigDecimal(BigInteger.ZERO, 0, 3, 1),\n            BigDecimal(BigInteger.ZERO, 0, 4, 1),\n            BigDecimal(BigInteger.ZERO, 0, 5, 1),\n            BigDecimal(BigInteger.ZERO, 0, 6, 1),\n            BigDecimal(BigInteger.ZERO, 0, 7, 1),\n            BigDecimal(BigInteger.ZERO, 0, 8, 1),\n            BigDecimal(BigInteger.ZERO, 0, 9, 1),\n            BigDecimal(BigInteger.ZERO, 0, 10, 1),\n            BigDecimal(BigInteger.ZERO, 0, 11, 1),\n            BigDecimal(BigInteger.ZERO, 0, 12, 1),\n            BigDecimal(BigInteger.ZERO, 0, 13, 1),\n            BigDecimal(BigInteger.ZERO, 0, 14, 1),\n            BigDecimal(BigInteger.ZERO, 0, 15, 1)\n        )\n\n        // Half of Long.MIN_VALUE & Long.MAX_VALUE.\n        private const val HALF_LONG_MAX_VALUE = Long.MAX_VALUE / 2\n        private const val HALF_LONG_MIN_VALUE = Long.MIN_VALUE / 2\n\n        // Constants\n        /**\n         * The value 0, with a _scale of 0.\n         *\n         * @since  1.5\n         */\n        val ZERO = ZERO_THROUGH_TEN[0]\n\n        /**\n         * The value 1, with a _scale of 0.\n         *\n         * @since  1.5\n         */\n        val ONE = ZERO_THROUGH_TEN[1]\n\n        val TWO = ZERO_THROUGH_TEN[2]\n\n        /**\n         * The value 10, with a _scale of 0.\n         *\n         * @since  1.5\n         */\n        val TEN = ZERO_THROUGH_TEN[10]\n\n        /**\n         * The value 0.1, with a _scale of 1.\n         */\n        val ONE_TENTH = of(1L, 1)\n\n        /**\n         * The value 0.5, with a _scale of 1.\n         */\n        val ONE_HALF = of(5L, 1)\n\n        val PI = of(\"3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648\")\n\n        val E = of(\"2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264\")\n\n            /*\n         * parse exponent\n         */\n        private fun parseExp(`in`: CharArray, offset: Int, len: Int): Long {\n            var offset = offset\n            var len = len\n            var exp: Long = 0\n            offset++\n            var c = `in`[offset]\n            len--\n            val negexp = c == '-'\n            // optional sign\n            if (negexp || c == '+') {\n                offset++\n                c = `in`[offset]\n                len--\n            }\n            if (len <= 0)\n            // no exponent digits\n                throw NumberFormatException(\"No exponent digits.\")\n            // skip leading zeros in the exponent\n            while (len > 10 && (c == '0' || c.toDigit(10) == 0)) {\n                offset++\n                c = `in`[offset]\n                len--\n            }\n            if (len > 10)\n            // too many nonzero exponent digits\n                throw NumberFormatException(\"Too many nonzero exponent digits.\")\n            // c now holds first digit of exponent\n            while (true) {\n                val v: Int\n                if (c in '0'..'9') {\n                    v = c - '0'\n                } else {\n                    v = c.toDigit(10)\n                    if (v < 0)\n                    // not a digit\n                        throw NumberFormatException(\"Not a digit.\")\n                }\n                exp = exp * 10 + v\n                if (len == 1)\n                    break // that was final character\n                offset++\n                c = `in`[offset]\n                len--\n            }\n            if (negexp)\n            // apply sign\n                exp = -exp\n            return exp\n        }\n\n        // Static Factory Methods\n\n        /**\n         * Translates a `long` unscaled value and an\n         * `int` _scale into a [BigDecimal].\n         *\n         * @apiNote This static factory method is provided in preference\n         * to a (`long`, `int`) constructor because it allows\n         * for reuse of frequently used [BigDecimal] values.\n         *\n         * @param unscaledVal unscaled value of the [BigDecimal].\n         * @param scale _scale of the [BigDecimal].\n         * @return a [BigDecimal] whose value is\n         * `(unscaledVal  10<sup>-_scale</sup>)`.\n         */\n        fun of(unscaledVal: Long, scale: Int): BigDecimal {\n            if (scale == 0)\n                return of(unscaledVal)\n            else if (unscaledVal == 0L) {\n                return zeroValueOf(scale)\n            }\n            return BigDecimal(\n                if (unscaledVal == INFLATED)\n                    INFLATED_BIGINT\n                else\n                    null,\n                unscaledVal, scale, 0\n            )\n        }\n\n        /**\n         * Translates a `long` value into a [BigDecimal]\n         * with a _scale of zero.\n         *\n         * @apiNote This static factory method is provided in preference\n         * to a (`long`) constructor because it allows for reuse of\n         * frequently used [BigDecimal] values.\n         *\n         * @param val value of the [BigDecimal].\n         * @return a [BigDecimal] whose value is `val`.\n         */\n//        fun of(`val`: Long): BigDecimal {\n//            if (`val` >= 0 && `val` < ZERO_THROUGH_TEN.size)\n//                return ZERO_THROUGH_TEN[`val`.toInt()]\n//            else if (`val` != INFLATED)\n//                return BigDecimal(null, `val`, 0, 0)\n//            return BigDecimal(INFLATED_BIGINT, `val`, 0, 0)\n//        }\n\n        internal fun of(unscaledVal: Long, scale: Int, prec: Int): BigDecimal {\n            return if (scale == 0 && unscaledVal >= 0 && unscaledVal < ZERO_THROUGH_TEN.size) {\n                ZERO_THROUGH_TEN[unscaledVal.toInt()]\n            } else if (unscaledVal == 0L) {\n                zeroValueOf(scale)\n            } else {\n                BigDecimal(\n                    if (unscaledVal == INFLATED) INFLATED_BIGINT else null,\n                    unscaledVal, scale, prec\n                )\n            }\n\n        }\n\n        fun of(`val`: Int): BigDecimal {\n            return of(`val`.toLong())\n        }\n\n        fun of(`val`: Long): BigDecimal {\n            return if (`val` >= 0L && `val` < ZERO_THROUGH_TEN.size.toLong()) {\n                ZERO_THROUGH_TEN[`val`.toInt()]\n            } else {\n                if (`val` != INFLATED) BigDecimal(null as BigInteger?, `val`, 0, 0) else BigDecimal(\n                    INFLATED_BIGINT,\n                    `val`,\n                    0,\n                    0\n                )\n            }\n        }\n\n        internal fun of(intVal: BigInteger, scale: Int, prec: Int): BigDecimal {\n            val `val` = compactValFor(intVal)\n            if (`val` == 0L) {\n                return zeroValueOf(scale)\n            } else if (scale == 0 && `val` >= 0 && `val` < ZERO_THROUGH_TEN.size) {\n                return ZERO_THROUGH_TEN[`val`.toInt()]\n            }\n            return BigDecimal(intVal, `val`, scale, prec)\n        }\n\n        internal fun zeroValueOf(scale: Int): BigDecimal {\n            return if (scale >= 0 && scale < ZERO_SCALED_BY.size)\n                ZERO_SCALED_BY[scale]\n            else\n                BigDecimal(BigInteger.ZERO, 0, scale, 1)\n        }\n\n        /**\n         * Translates a `double` into a [BigDecimal], using\n         * the `double`'s canonical string representation provided\n         * by the [Double.toString] method.\n         *\n         * @apiNote This is generally the preferred way to convert a\n         * `double` (or `float`) into a [BigDecimal], as\n         * the value returned is equal to that resulting from constructing\n         * a [BigDecimal] from the result of using [ ][Double.toString].\n         *\n         * @param  val `double` to convert to a [BigDecimal].\n         * @return a [BigDecimal] whose value is equal to or approximately\n         * equal to the value of `val`.\n         * @throws NumberFormatException if `val` is infinite or NaN.\n         * @since  1.5\n         */\n        fun of(`val`: Double, ctx: MathContext = MathContext.UNLIMITED): BigDecimal {\n            return BigDecimal(`val`.toString(), ctx)\n        }\n\n        fun of(`val`: Float, ctx: MathContext = MathContext.UNLIMITED): BigDecimal {\n            return of(`val`.toDouble(), ctx)\n        }\n\n        fun of(`val`: String, ctx: MathContext? = null): BigDecimal {\n            return if (ctx === null) {\n                BigDecimal(`val`)\n            } else {\n                BigDecimal(`val`, ctx)\n            }\n        }\n\n        fun of(`val`: BigInteger, ctx: MathContext? = null): BigDecimal {\n            return if (ctx === null) {\n                BigDecimal(`val`)\n            } else {\n                BigDecimal(`val`, ctx)\n            }\n        }\n\n        fun of(`val`: Int, ctx: MathContext): BigDecimal {\n            return BigDecimal(`val`.toLong(), ctx)\n        }\n\n        fun of(`val`: Long, ctx: MathContext): BigDecimal {\n            return BigDecimal(`val`, ctx)\n        }\n\n        // Rounding Modes\n\n        /**\n         * Rounding mode to round away from zero.  Always increments the\n         * digit prior to a nonzero discarded fraction.  Note that this rounding\n         * mode never decreases the magnitude of the calculated value.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#UP} instead.\")\n        internal val ROUND_UP = 0\n\n        /**\n         * Rounding mode to round towards zero.  Never increments the digit\n         * prior to a discarded fraction (i.e., truncates).  Note that this\n         * rounding mode never increases the magnitude of the calculated value.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#DOWN} instead.\")\n        internal val ROUND_DOWN = 1\n\n        /**\n         * Rounding mode to round towards positive infinity.  If the\n         * [BigDecimal] is positive, behaves as for\n         * `ROUND_UP`; if negative, behaves as for\n         * `ROUND_DOWN`.  Note that this rounding mode never\n         * decreases the calculated value.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#CEILING} instead.\")\n        internal val ROUND_CEILING = 2\n\n        /**\n         * Rounding mode to round towards negative infinity.  If the\n         * [BigDecimal] is positive, behave as for\n         * `ROUND_DOWN`; if negative, behave as for\n         * `ROUND_UP`.  Note that this rounding mode never\n         * increases the calculated value.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#FLOOR} instead.\")\n        internal val ROUND_FLOOR = 3\n\n        /**\n         * Rounding mode to round towards &quot;nearest neighbor&quot;\n         * unless both neighbors are equidistant, in which case round up.\n         * Behaves as for `ROUND_UP` if the discarded fraction is\n         *  0.5; otherwise, behaves as for `ROUND_DOWN`.  Note\n         * that this is the rounding mode that most of us were taught in\n         * grade school.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#HALF_UP} instead.\")\n        internal val ROUND_HALF_UP = 4\n\n        /**\n         * Rounding mode to round towards &quot;nearest neighbor&quot;\n         * unless both neighbors are equidistant, in which case round\n         * down.  Behaves as for `ROUND_UP` if the discarded\n         * fraction is &gt; 0.5; otherwise, behaves as for\n         * `ROUND_DOWN`.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#HALF_DOWN} instead.\")\n        internal val ROUND_HALF_DOWN = 5\n\n        /**\n         * Rounding mode to round towards the &quot;nearest neighbor&quot;\n         * unless both neighbors are equidistant, in which case, round\n         * towards the even neighbor.  Behaves as for\n         * `ROUND_HALF_UP` if the digit to the left of the\n         * discarded fraction is odd; behaves as for\n         * `ROUND_HALF_DOWN` if it's even.  Note that this is the\n         * rounding mode that minimizes cumulative error when applied\n         * repeatedly over a sequence of calculations.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#HALF_EVEN} instead.\")\n        internal val ROUND_HALF_EVEN = 6\n\n        /**\n         * Rounding mode to require that the requested operation has an exact\n         * result, hence no rounding is necessary.  If this rounding mode is\n         * specified on an operation that yields an inexact result, an\n         * `ArithmeticException` is thrown.\n         *\n         */\n        @Deprecated(\"Use {@link RoundingMode#UNNECESSARY} instead.\")\n        internal val ROUND_UNNECESSARY = 7\n\n        /**\n         * Powers of 10 which can be represented exactly in `double`.\n         */\n        private val DOUBLE_10_POW = doubleArrayOf(\n            1.0e0,\n            1.0e1,\n            1.0e2,\n            1.0e3,\n            1.0e4,\n            1.0e5,\n            1.0e6,\n            1.0e7,\n            1.0e8,\n            1.0e9,\n            1.0e10,\n            1.0e11,\n            1.0e12,\n            1.0e13,\n            1.0e14,\n            1.0e15,\n            1.0e16,\n            1.0e17,\n            1.0e18,\n            1.0e19,\n            1.0e20,\n            1.0e21,\n            1.0e22\n        )\n\n        /**\n         * Powers of 10 which can be represented exactly in `float`.\n         */\n        private val FLOAT_10_POW =\n            floatArrayOf(1.0e0f, 1.0e1f, 1.0e2f, 1.0e3f, 1.0e4f, 1.0e5f, 1.0e6f, 1.0e7f, 1.0e8f, 1.0e9f, 1.0e10f)\n\n        /**\n         * Return 10 to the power n, as a [BigInteger].\n         *\n         * @param  n the power of ten to be returned (>=0)\n         * @return a [BigInteger] with the value (10<sup>n</sup>)\n         */\n        private fun bigTenToThe(n: Int): BigInteger {\n            if (n < 0)\n                return BigInteger.ZERO\n\n            if (n < BIG_TEN_POWERS_TABLE_MAX) {\n                val pows = BIG_TEN_POWERS_TABLE\n                return if (n < pows.size)\n                    pows[n]!!\n                else\n                    expandBigIntegerTenPowers(n)\n            }\n\n            return BigInteger.TEN.pow(n)\n        }\n\n        /**\n         * Expand the BIG_TEN_POWERS_TABLE array to contain at least 10**n.\n         *\n         * @param n the power of ten to be returned (>=0)\n         * @return a [BigDecimal] with the value (10<sup>n</sup>) and\n         * in the meantime, the BIG_TEN_POWERS_TABLE array gets\n         * expanded to the size greater than n.\n         */\n        private fun expandBigIntegerTenPowers(n: Int): BigInteger {\n            lock(this) {\n                var pows: Array<BigInteger?> = BIG_TEN_POWERS_TABLE\n                val curLen = pows.size\n                // The following comparison and the above synchronized statement is\n                // to prevent multiple threads from expanding the same array.\n                if (curLen <= n) {\n                    var newLen = curLen shl 1\n                    while (newLen <= n) {\n                        newLen = newLen shl 1\n                    }\n                    pows = //(0 until newLen).map{ i -> if (i < pows.size) pows[i] else null }.toTypedArray()\n                            pows.copyOf(newLen)\n                    for (i in curLen until newLen) {\n                        pows[i] = pows[i - 1]!!.times(BigInteger.TEN)\n                    }\n                    // Based on the following facts:\n                    // 1. pows is a private local varible;\n                    // 2. the following store is a volatile store.\n                    // the newly created array elements can be safely published.\n                    BIG_TEN_POWERS_TABLE = pows\n                }\n                return pows[n]!!\n            }\n        }\n\n        private val LONG_TEN_POWERS_TABLE = longArrayOf(\n            1, // 0 / 10^0\n            10, // 1 / 10^1\n            100, // 2 / 10^2\n            1000, // 3 / 10^3\n            10000, // 4 / 10^4\n            100000, // 5 / 10^5\n            1000000, // 6 / 10^6\n            10000000, // 7 / 10^7\n            100000000, // 8 / 10^8\n            1000000000, // 9 / 10^9\n            10000000000L, // 10 / 10^10\n            100000000000L, // 11 / 10^11\n            1000000000000L, // 12 / 10^12\n            10000000000000L, // 13 / 10^13\n            100000000000000L, // 14 / 10^14\n            1000000000000000L, // 15 / 10^15\n            10000000000000000L, // 16 / 10^16\n            100000000000000000L, // 17 / 10^17\n            1000000000000000000L   // 18 / 10^18\n        )\n\n        private var BIG_TEN_POWERS_TABLE = arrayOf<BigInteger?>(\n            BigInteger.ONE,\n            BigInteger.of(10),\n            BigInteger.of(100),\n            BigInteger.of(1000),\n            BigInteger.of(10000),\n            BigInteger.of(100000),\n            BigInteger.of(1000000),\n            BigInteger.of(10000000),\n            BigInteger.of(100000000),\n            BigInteger.of(1000000000),\n            BigInteger.of(10000000000L),\n            BigInteger.of(100000000000L),\n            BigInteger.of(1000000000000L),\n            BigInteger.of(10000000000000L),\n            BigInteger.of(100000000000000L),\n            BigInteger.of(1000000000000000L),\n            BigInteger.of(10000000000000000L),\n            BigInteger.of(100000000000000000L),\n            BigInteger.of(1000000000000000000L)\n        )\n\n        private val BIG_TEN_POWERS_TABLE_INITLEN = BIG_TEN_POWERS_TABLE.size\n        private val BIG_TEN_POWERS_TABLE_MAX = 16 * BIG_TEN_POWERS_TABLE_INITLEN\n\n        private val THRESHOLDS_TABLE = longArrayOf(\n            Long.MAX_VALUE, // 0\n            Long.MAX_VALUE / 10L, // 1\n            Long.MAX_VALUE / 100L, // 2\n            Long.MAX_VALUE / 1000L, // 3\n            Long.MAX_VALUE / 10000L, // 4\n            Long.MAX_VALUE / 100000L, // 5\n            Long.MAX_VALUE / 1000000L, // 6\n            Long.MAX_VALUE / 10000000L, // 7\n            Long.MAX_VALUE / 100000000L, // 8\n            Long.MAX_VALUE / 1000000000L, // 9\n            Long.MAX_VALUE / 10000000000L, // 10\n            Long.MAX_VALUE / 100000000000L, // 11\n            Long.MAX_VALUE / 1000000000000L, // 12\n            Long.MAX_VALUE / 10000000000000L, // 13\n            Long.MAX_VALUE / 100000000000000L, // 14\n            Long.MAX_VALUE / 1000000000000000L, // 15\n            Long.MAX_VALUE / 10000000000000000L, // 16\n            Long.MAX_VALUE / 100000000000000000L, // 17\n            Long.MAX_VALUE / 1000000000000000000L // 18\n        )\n\n        /**\n         * Compute val * 10 ^ n; return this product if it is\n         * representable as a long, INFLATED otherwise.\n         */\n        private fun longMultiplyPowerTen(`val`: Long, n: Int): Long {\n            if (`val` == 0L || n <= 0)\n                return `val`\n            val tab = LONG_TEN_POWERS_TABLE\n            val bounds = THRESHOLDS_TABLE\n            if (n < tab.size && n < bounds.size) {\n                val tenpower = tab[n]\n                if (`val` == 1L)\n                    return tenpower\n                if (abs(`val`) <= bounds[n])\n                    return `val` * tenpower\n            }\n            return INFLATED\n        }\n\n        /**\n         * Match the scales of two [BigDecimal]s to align their\n         * least significant digits.\n         *\n         *\n         * If the scales of val[0] and val[1] differ, rescale\n         * (non-destructively) the lower-scaled [BigDecimal] so\n         * they match.  That is, the lower-scaled reference will be\n         * replaced by a reference to a new object with the same _scale as\n         * the other [BigDecimal].\n         *\n         * @param  val array of two elements referring to the two\n         * [BigDecimal]s to be aligned.\n         */\n        private fun matchScale(`val`: Array<BigDecimal>) {\n            if (`val`[0]._scale < `val`[1]._scale) {\n                `val`[0] = `val`[0].setScale(`val`[1]._scale, ROUND_UNNECESSARY)\n            } else if (`val`[1]._scale < `val`[0]._scale) {\n                `val`[1] = `val`[1].setScale(`val`[0]._scale, ROUND_UNNECESSARY)\n            }\n        }\n\n        /**\n         * Returns the length of the absolute value of a `long`, in decimal\n         * digits.\n         *\n         * @param x the `long`\n         * @return the length of the unscaled value, in deciaml digits.\n         */\n        internal fun longDigitLength(x: Long): Int {\n            var x = x\n            /*\n         * As described in \"Bit Twiddling Hacks\" by Sean Anderson,\n         * (http://graphics.stanford.edu/~seander/bithacks.html)\n         * integer log 10 of x is within 1 of (1233/4096)* (1 +\n         * integer log 2 of x). The fraction 1233/4096 approximates\n         * log10(2). So we first do a version of log2 (a variant of\n         * Long class with pre-checks and opposite directionality) and\n         * then _scale and check against powers table. This is a little\n         * simpler in present context than the version in Hacker's\n         * Delight sec 11-4. Adding one to bit length allows comparing\n         * downward from the LONG_TEN_POWERS_TABLE that we need\n         * anyway.\n         */\n            require(x != BigDecimal.INFLATED)\n            if (x < 0)\n                x = -x\n            if (x < 10)\n            // must screen for 0, might as well 10\n                return 1\n            val r = ((64 - x.numberOfLeadingZeros() + 1) * 1233).ushr(12)\n            val tab = LONG_TEN_POWERS_TABLE\n            // if r >= length, must have max possible digits for long\n            return if (r >= tab.size || x < tab[r]) r else r + 1\n        }\n\n        /**\n         * Returns the length of the absolute value of a BigInteger, in\n         * decimal digits.\n         *\n         * @param b the BigInteger\n         * @return the length of the unscaled value, in decimal digits\n         */\n        private fun bigDigitLength(b: BigInteger): Int {\n            /*\n         * Same idea as the long version, but we need a better\n         * approximation of log10(2). Using 646456993/2^31\n         * is accurate up to max possible reported bitLength.\n         */\n            if (b._signum == 0)\n                return 1\n            val r = ((b.bitLength.toLong() + 1) * 646456993).ushr(31).toInt()\n            return if (b.compareMagnitude(bigTenToThe(r)) < 0) r else r + 1\n        }\n\n        /**\n         * Returns the compact value for given [BigInteger], or\n         * INFLATED if too big. Relies on internal representation of\n         * [BigInteger].\n         */\n        private fun compactValFor(b: BigInteger): Long {\n            val m = b._mag\n            val len = m.size\n            if (len == 0)\n                return 0\n            val d = m[0]\n            if (len > 2 || len == 2 && d < 0)\n                return INFLATED\n\n            val u = if (len == 2)\n                (m[1].toLong() and LONG_MASK) + (d.toLong() shl 32)\n            else\n                d.toLong() and LONG_MASK\n            return if (b._signum < 0) -u else u\n        }\n\n        private fun longCompareMagnitude(x: Long, y: Long): Int {\n            var x = x\n            var y = y\n            if (x < 0)\n                x = -x\n            if (y < 0)\n                y = -y\n            return if (x < y) -1 else if (x == y) 0 else 1\n        }\n\n        private fun saturateLong(s: Long): Int {\n            val i = s.toInt()\n            return if (s == i.toLong()) i else if (s < 0) Int.MIN_VALUE else Int.MAX_VALUE\n        }\n\n        /*\n     * Internal printing routine\n     */\n        private fun print(name: String, bd: BigDecimal) {\n            \n            println(\n                \"$name:\\t_intCompact ${bd._intCompact}\\t_intVal ${bd._intVal}\\t_scale ${bd._scale}\\t_precision ${bd._precision}\"\n            )\n        }\n\n        /* the same as checkScale where value!=0 */\n        private fun checkScaleNonZero(`val`: Long): Int {\n            val asInt = `val`.toInt()\n            if (asInt.toLong() != `val`) {\n                throw ArithmeticException(if (asInt > 0) \"Underflow\" else \"Overflow\")\n            }\n            return asInt\n        }\n\n        private fun checkScale(intCompact: Long, `val`: Long): Int {\n            var asInt = `val`.toInt()\n            if (asInt.toLong() != `val`) {\n                asInt = if (`val` > Int.MAX_VALUE) Int.MAX_VALUE else Int.MIN_VALUE\n                if (intCompact != 0L)\n                    throw ArithmeticException(if (asInt > 0) \"Underflow\" else \"Overflow\")\n            }\n            return asInt\n        }\n\n        private fun checkScale(intVal: BigInteger?, `val`: Long): Int {\n            var asInt = `val`.toInt()\n            if (asInt.toLong() != `val`) {\n                asInt = if (`val` > Int.MAX_VALUE) Int.MAX_VALUE else Int.MIN_VALUE\n                if (intVal!!.signum != 0)\n                    throw ArithmeticException(if (asInt > 0) \"Underflow\" else \"Overflow\")\n            }\n            return asInt\n        }\n\n        /**\n         * Returns a [BigDecimal] rounded according to the MathContext\n         * settings;\n         * If rounding is needed a new [BigDecimal] is created and returned.\n         *\n         * @param val the value to be rounded\n         * @param mc the context to use.\n         * @return a [BigDecimal] rounded according to the MathContext\n         * settings.  May return `value`, if no rounding needed.\n         * @throws ArithmeticException if the rounding mode is\n         * `RoundingMode.UNNECESSARY` and the\n         * result is inexact.\n         */\n        private fun doRound(`val`: BigDecimal?, mc: MathContext): BigDecimal? {\n            val mcp = mc.precision\n            var wasDivided = false\n            if (mcp > 0) {\n                var intVal = `val`!!._intVal\n                var compactVal = `val`._intCompact\n                var scale = `val`._scale\n                var prec = `val`.precision\n                val mode = mc.roundingMode.oldMode\n                var drop: Int\n                if (compactVal == INFLATED) {\n                    drop = prec - mcp\n                    while (drop > 0) {\n                        scale = checkScaleNonZero(scale.toLong() - drop)\n                        intVal = divideAndRoundByTenPow(intVal!!, drop, mode)\n                        wasDivided = true\n                        compactVal = compactValFor(intVal)\n                        if (compactVal != INFLATED) {\n                            prec = longDigitLength(compactVal)\n                            break\n                        }\n                        prec = bigDigitLength(intVal)\n                        drop = prec - mcp\n                    }\n                }\n                if (compactVal != INFLATED) {\n                    drop = prec - mcp  // drop can't be more than 18\n                    while (drop > 0) {\n                        scale = checkScaleNonZero(scale.toLong() - drop)\n                        compactVal =\n                            divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                        wasDivided = true\n                        prec = longDigitLength(compactVal)\n                        drop = prec - mcp\n                        intVal = null\n                    }\n                }\n                return if (wasDivided) BigDecimal(intVal, compactVal, scale, prec) else `val`\n            }\n            return `val`\n        }\n\n        /*\n     * Returns a {@code BigDecimal} created from {@code long} value with\n     * given _scale rounded according to the MathContext settings\n     */\n        private fun doRound(compactVal: Long, scale: Int, mc: MathContext): BigDecimal {\n            var compactVal = compactVal\n            var scale = scale\n            val mcp = mc.precision\n            if (mcp > 0 && mcp < 19) {\n                var prec = longDigitLength(compactVal)\n                var drop = prec - mcp  // drop can't be more than 18\n                while (drop > 0) {\n                    scale = checkScaleNonZero(scale.toLong() - drop)\n                    compactVal = divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                    prec = longDigitLength(compactVal)\n                    drop = prec - mcp\n                }\n                return of(compactVal, scale, prec)\n            }\n            return of(compactVal, scale)\n        }\n\n        /*\n     * Returns a {@code BigDecimal} created from {@code BigInteger} value with\n     * given _scale rounded according to the MathContext settings\n     */\n        private fun doRound(intVal: BigInteger, scale: Int, mc: MathContext): BigDecimal {\n            var intVal = intVal\n            var scale = scale\n            val mcp = mc.precision\n            var prec = 0\n            if (mcp > 0) {\n                var compactVal = compactValFor(intVal)\n                val mode = mc.roundingMode.oldMode\n                var drop: Int\n                if (compactVal == INFLATED) {\n                    prec = bigDigitLength(intVal)\n                    drop = prec - mcp\n                    while (drop > 0) {\n                        scale = checkScaleNonZero(scale.toLong() - drop)\n                        intVal = divideAndRoundByTenPow(intVal, drop, mode)\n                        compactVal = compactValFor(intVal)\n                        if (compactVal != INFLATED) {\n                            break\n                        }\n                        prec = bigDigitLength(intVal)\n                        drop = prec - mcp\n                    }\n                }\n                if (compactVal != INFLATED) {\n                    prec = longDigitLength(compactVal)\n                    drop = prec - mcp     // drop can't be more than 18\n                    while (drop > 0) {\n                        scale = checkScaleNonZero(scale.toLong() - drop)\n                        compactVal =\n                            divideAndRound(compactVal, LONG_TEN_POWERS_TABLE[drop], mc.roundingMode.oldMode)\n                        prec = longDigitLength(compactVal)\n                        drop = prec - mcp\n                    }\n                    return of(compactVal, scale, prec)\n                }\n            }\n            return BigDecimal(intVal, INFLATED, scale, prec)\n        }\n\n        /*\n     * Divides {@code BigInteger} value by ten power.\n     */\n        private fun divideAndRoundByTenPow(intVal: BigInteger, tenPow: Int, roundingMode: Int): BigInteger {\n            var intVal = intVal\n            if (tenPow < LONG_TEN_POWERS_TABLE.size)\n                intVal = divideAndRound(intVal, LONG_TEN_POWERS_TABLE[tenPow], roundingMode)\n            else\n                intVal = divideAndRound(intVal, bigTenToThe(tenPow), roundingMode)\n            return intVal\n        }\n\n        /**\n         * Internally used for division operation for division `long` by\n         * `long`.\n         * The returned [BigDecimal] object is the quotient whose _scale is set\n         * to the passed in _scale. If the remainder is not zero, it will be rounded\n         * based on the passed in roundingMode. Also, if the remainder is zero and\n         * the last parameter, i.e. preferredScale is NOT equal to _scale, the\n         * trailing zeros of the result is stripped to match the preferredScale.\n         */\n        private fun divideAndRound(\n            ldividend: Long, ldivisor: Long, scale: Int, roundingMode: Int,\n            preferredScale: Int\n        ): BigDecimal {\n\n            val qsign: Int // quotient sign\n            val q = ldividend / ldivisor // store quotient in long\n            if (roundingMode == ROUND_DOWN && scale == preferredScale)\n                return of(q, scale)\n            val r = ldividend % ldivisor // store remainder in long\n            qsign = if (ldividend < 0 == ldivisor < 0) 1 else -1\n            if (r != 0L) {\n                val increment = needIncrement(ldivisor, roundingMode, qsign, q, r)\n                return of(if (increment) q + qsign else q, scale)\n            } else {\n                return if (preferredScale != scale)\n                    createAndStripZerosToMatchScale(q, scale, preferredScale.toLong())\n                else\n                    of(q, scale)\n            }\n        }\n\n        /**\n         * Divides `long` by `long` and do rounding based on the\n         * passed in roundingMode.\n         */\n        private fun divideAndRound(ldividend: Long, ldivisor: Long, roundingMode: Int): Long {\n            val qsign: Int // quotient sign\n            val q = ldividend / ldivisor // store quotient in long\n            if (roundingMode == ROUND_DOWN)\n                return q\n            val r = ldividend % ldivisor // store remainder in long\n            qsign = if (ldividend < 0 == ldivisor < 0) 1 else -1\n            if (r != 0L) {\n                val increment = needIncrement(ldivisor, roundingMode, qsign, q, r)\n                return if (increment) q + qsign else q\n            } else {\n                return q\n            }\n        }\n\n        /**\n         * Shared logic of need increment computation.\n         */\n        private fun commonNeedIncrement(\n            roundingMode: Int, qsign: Int,\n            cmpFracHalf: Int, oddQuot: Boolean\n        ): Boolean {\n            when (roundingMode) {\n                ROUND_UNNECESSARY -> throw ArithmeticException(\"Rounding necessary\")\n\n                ROUND_UP // Away from zero\n                -> return true\n\n                ROUND_DOWN // Towards zero\n                -> return false\n\n                ROUND_CEILING // Towards +infinity\n                -> return qsign > 0\n\n                ROUND_FLOOR // Towards -infinity\n                -> return qsign < 0\n\n                else // Some kind of half-way rounding\n                -> {\n                    require(roundingMode >= ROUND_HALF_UP && roundingMode <= ROUND_HALF_EVEN) {\n                        \"Unexpected rounding mode\" + RoundingMode.valueOf(\n                            roundingMode\n                        )\n                    }\n\n                    if (cmpFracHalf < 0)\n                    // We're closer to higher digit\n                        return false\n                    else if (cmpFracHalf > 0)\n                    // We're closer to lower digit\n                        return true\n                    else { // half-way\n                        require(cmpFracHalf == 0)\n\n                        when (roundingMode) {\n                            ROUND_HALF_DOWN -> return false\n\n                            ROUND_HALF_UP -> return true\n\n                            ROUND_HALF_EVEN -> return oddQuot\n\n                            else -> throw AssertionError(\"Unexpected rounding mode$roundingMode\")\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Tests if quotient has to be incremented according the roundingMode\n         */\n        private fun needIncrement(\n            ldivisor: Long, roundingMode: Int,\n            qsign: Int, q: Long, r: Long\n        ): Boolean {\n            require(r != 0L)\n\n            val cmpFracHalf: Int\n            if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {\n                cmpFracHalf = 1 // 2 * r can't fit into long\n            } else {\n                cmpFracHalf = longCompareMagnitude(2 * r, ldivisor)\n            }\n\n            return commonNeedIncrement(roundingMode, qsign, cmpFracHalf, q and 1L != 0L)\n        }\n\n        /**\n         * Divides [BigInteger] value by `long` value and\n         * do rounding based on the passed in roundingMode.\n         */\n        private fun divideAndRound(bdividend: BigInteger, ldivisor: Long, roundingMode: Int): BigInteger {\n            // Descend into mutables for faster remainder checks\n            val mdividend = MutableBigInteger(bdividend._mag)\n            // store quotient\n            val mq = MutableBigInteger()\n            // store quotient & remainder in long\n            val r = mdividend.divide(ldivisor, mq)\n            // record remainder is zero or not\n            val isRemainderZero = r == 0L\n            // quotient sign\n            val qsign = if (ldivisor < 0) -bdividend._signum else bdividend._signum\n            if (!isRemainderZero) {\n                if (needIncrement(ldivisor, roundingMode, qsign, mq, r)) {\n                    mq.add(MutableBigInteger.ONE)\n                }\n            }\n            return mq.toBigInteger(qsign)\n        }\n\n        /**\n         * Internally used for division operation for division [BigInteger]\n         * by `long`.\n         * The returned [BigDecimal] object is the quotient whose _scale is set\n         * to the passed in _scale. If the remainder is not zero, it will be rounded\n         * based on the passed in roundingMode. Also, if the remainder is zero and\n         * the last parameter, i.e. preferredScale is NOT equal to _scale, the\n         * trailing zeros of the result is stripped to match the preferredScale.\n         */\n        private fun divideAndRound(\n            bdividend: BigInteger,\n            ldivisor: Long, scale: Int, roundingMode: Int, preferredScale: Int\n        ): BigDecimal {\n            // Descend into mutables for faster remainder checks\n            val mdividend = MutableBigInteger(bdividend._mag)\n            // store quotient\n            val mq = MutableBigInteger()\n            // store quotient & remainder in long\n            val r = mdividend.divide(ldivisor, mq)\n            // record remainder is zero or not\n            val isRemainderZero = r == 0L\n            // quotient sign\n            val qsign = if (ldivisor < 0) -bdividend._signum else bdividend._signum\n            if (!isRemainderZero) {\n                if (needIncrement(ldivisor, roundingMode, qsign, mq, r)) {\n                    mq.add(MutableBigInteger.ONE)\n                }\n                return mq.toBigDecimal(qsign, scale)\n            } else {\n                if (preferredScale != scale) {\n                    val compactVal = mq.toCompactValue(qsign)\n                    if (compactVal != INFLATED) {\n                        return createAndStripZerosToMatchScale(compactVal, scale, preferredScale.toLong())\n                    }\n                    val intVal = mq.toBigInteger(qsign)\n                    return createAndStripZerosToMatchScale(intVal, scale, preferredScale.toLong())\n                } else {\n                    return mq.toBigDecimal(qsign, scale)\n                }\n            }\n        }\n\n        /**\n         * Tests if quotient has to be incremented according the roundingMode\n         */\n        private fun needIncrement(\n            ldivisor: Long, roundingMode: Int,\n            qsign: Int, mq: MutableBigInteger, r: Long\n        ): Boolean {\n            require(r != 0L)\n\n            val cmpFracHalf: Int\n            if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {\n                cmpFracHalf = 1 // 2 * r can't fit into long\n            } else {\n                cmpFracHalf = longCompareMagnitude(2 * r, ldivisor)\n            }\n\n            return commonNeedIncrement(roundingMode, qsign, cmpFracHalf, mq.isOdd)\n        }\n\n        /**\n         * Divides [BigInteger] value by [BigInteger] value and\n         * do rounding based on the passed in roundingMode.\n         */\n        private fun divideAndRound(bdividend: BigInteger, bdivisor: BigInteger, roundingMode: Int): BigInteger {\n            val isRemainderZero: Boolean // record remainder is zero or not\n            val qsign: Int // quotient sign\n            // Descend into mutables for faster remainder checks\n            val mdividend = MutableBigInteger(bdividend._mag)\n            val mq = MutableBigInteger()\n            val mdivisor = MutableBigInteger(bdivisor._mag)\n            val mr = mdividend.divide(mdivisor, mq)\n            isRemainderZero = mr!!.isZero\n            qsign = if (bdividend._signum != bdivisor._signum) -1 else 1\n            if (!isRemainderZero) {\n                if (needIncrement(mdivisor, roundingMode, qsign, mq, mr)) {\n                    mq.add(MutableBigInteger.ONE)\n                }\n            }\n            return mq.toBigInteger(qsign)\n        }\n\n        /**\n         * Internally used for division operation for division [BigInteger]\n         * by [BigInteger].\n         * The returned [BigDecimal] object is the quotient whose _scale is set\n         * to the passed in _scale. If the remainder is not zero, it will be rounded\n         * based on the passed in roundingMode. Also, if the remainder is zero and\n         * the last parameter, i.e. preferredScale is NOT equal to _scale, the\n         * trailing zeros of the result is stripped to match the preferredScale.\n         */\n        private fun divideAndRound(\n            bdividend: BigInteger, bdivisor: BigInteger, scale: Int, roundingMode: Int,\n            preferredScale: Int\n        ): BigDecimal {\n            val isRemainderZero: Boolean // record remainder is zero or not\n            val qsign: Int // quotient sign\n            // Descend into mutables for faster remainder checks\n            val mdividend = MutableBigInteger(bdividend._mag)\n            val mq = MutableBigInteger()\n            val mdivisor = MutableBigInteger(bdivisor._mag)\n            val mr = mdividend.divide(mdivisor, mq)\n            isRemainderZero = mr!!.isZero\n            qsign = if (bdividend._signum != bdivisor._signum) -1 else 1\n            if (!isRemainderZero) {\n                if (needIncrement(mdivisor, roundingMode, qsign, mq, mr)) {\n                    mq.add(MutableBigInteger.ONE)\n                }\n                return mq.toBigDecimal(qsign, scale)\n            } else {\n                if (preferredScale != scale) {\n                    val compactVal = mq.toCompactValue(qsign)\n                    if (compactVal != INFLATED) {\n                        return createAndStripZerosToMatchScale(compactVal, scale, preferredScale.toLong())\n                    }\n                    val intVal = mq.toBigInteger(qsign)\n                    return createAndStripZerosToMatchScale(intVal, scale, preferredScale.toLong())\n                } else {\n                    return mq.toBigDecimal(qsign, scale)\n                }\n            }\n        }\n\n        /**\n         * Tests if quotient has to be incremented according the roundingMode\n         */\n        private fun needIncrement(\n            mdivisor: MutableBigInteger, roundingMode: Int,\n            qsign: Int, mq: MutableBigInteger, mr: MutableBigInteger\n        ): Boolean {\n            require(!mr.isZero)\n            val cmpFracHalf = mr.compareHalf(mdivisor)\n            return commonNeedIncrement(roundingMode, qsign, cmpFracHalf, mq.isOdd)\n        }\n\n        /**\n         * Remove insignificant trailing zeros from this\n         * [BigInteger] value until the preferred _scale is reached or no\n         * more zeros can be removed.  If the preferred _scale is less than\n         * Int.MIN_VALUE, all the trailing zeros will be removed.\n         *\n         * @return new [BigDecimal] with a _scale possibly reduced\n         * to be closed to the preferred _scale.\n         */\n        private fun createAndStripZerosToMatchScale(intVal: BigInteger, scale: Int, preferredScale: Long): BigDecimal {\n            var intVal = intVal\n            var scale = scale\n            var qr: Array<BigInteger> // quotient-remainder pair\n            while (intVal.compareMagnitude(BigInteger.TEN) >= 0 && scale > preferredScale) {\n                if (intVal.testBit(0))\n                    break // odd number cannot end in 0\n                qr = intVal.divideAndRemainder(BigInteger.TEN)\n                if (qr[1].signum != 0)\n                    break // non-0 remainder\n                intVal = qr[0]\n                scale = checkScale(intVal, scale.toLong() - 1) // could Overflow\n            }\n            return of(intVal, scale, 0)\n        }\n\n        /**\n         * Remove insignificant trailing zeros from this\n         * `long` value until the preferred _scale is reached or no\n         * more zeros can be removed.  If the preferred _scale is less than\n         * Int.MIN_VALUE, all the trailing zeros will be removed.\n         *\n         * @return new [BigDecimal] with a _scale possibly reduced\n         * to be closed to the preferred _scale.\n         */\n        private fun createAndStripZerosToMatchScale(compactVal: Long, scale: Int, preferredScale: Long): BigDecimal {\n            var compactVal = compactVal\n            var scale = scale\n            while (abs(compactVal) >= 10L && scale > preferredScale) {\n                if (compactVal and 1L != 0L)\n                    break // odd number cannot end in 0\n                val r = compactVal % 10L\n                if (r != 0L)\n                    break // non-0 remainder\n                compactVal /= 10\n                scale = checkScale(compactVal, scale.toLong() - 1) // could Overflow\n            }\n            return of(compactVal, scale)\n        }\n\n        private fun stripZerosToMatchScale(\n            intVal: BigInteger?,\n            intCompact: Long,\n            scale: Int,\n            preferredScale: Int\n        ): BigDecimal {\n            return if (intCompact != INFLATED) {\n                createAndStripZerosToMatchScale(intCompact, scale, preferredScale.toLong())\n            } else {\n                createAndStripZerosToMatchScale(\n                    intVal ?: INFLATED_BIGINT,\n                    scale, preferredScale.toLong()\n                )\n            }\n        }\n\n        /*\n     * returns INFLATED if oveflow\n     */\n        private fun sum(xs: Long, ys: Long): Long {\n            val sum = xs + ys\n            // See \"Hacker's Delight\" section 2-12 for explanation of\n            // the overflow test.\n            return if (sum xor xs and (sum xor ys) >= 0L) { // not overflowed\n                sum\n            } else INFLATED\n        }\n\n        private fun sum(xs: Long, ys: Long, scale: Int): BigDecimal {\n            val sum = sum(xs, ys)\n            return if (sum != INFLATED) BigDecimal.of(sum, scale) else BigDecimal(\n                BigInteger.of(xs).plusLong(ys),\n                scale\n            )\n        }\n\n        private fun sum(xs: Long, scale1: Int, ys: Long, scale2: Int): BigDecimal {\n            val sdiff = scale1.toLong() - scale2\n            if (sdiff == 0L) {\n                return sum(xs, ys, scale1)\n            } else if (sdiff < 0) {\n                val raise = checkScale(xs, -sdiff)\n                val scaledX = longMultiplyPowerTen(xs, raise)\n                if (scaledX != INFLATED) {\n                    return sum(scaledX, ys, scale2)\n                } else {\n                    val bigsum = bigMultiplyPowerTen(xs, raise).plusLong(ys)\n                    return if (xs xor ys >= 0)\n                    // same sign test\n                        BigDecimal(bigsum, INFLATED, scale2, 0)\n                    else\n                        of(bigsum, scale2, 0)\n                }\n            } else {\n                val raise = checkScale(ys, sdiff)\n                val scaledY = longMultiplyPowerTen(ys, raise)\n                if (scaledY != INFLATED) {\n                    return sum(xs, scaledY, scale1)\n                } else {\n                    val bigsum = bigMultiplyPowerTen(ys, raise).plusLong(xs)\n                    return if (xs xor ys >= 0)\n                        BigDecimal(bigsum, INFLATED, scale1, 0)\n                    else\n                        of(bigsum, scale1, 0)\n                }\n            }\n        }\n\n        private fun sum(xs: Long, scale1: Int, snd: BigInteger, scale2: Int): BigDecimal {\n            var snd = snd\n            var rscale = scale1\n            val sdiff = rscale.toLong() - scale2\n            val sameSigns = xs.sign == snd._signum\n            val sum: BigInteger\n            if (sdiff < 0) {\n                val raise = checkScale(xs, -sdiff)\n                rscale = scale2\n                val scaledX = longMultiplyPowerTen(xs, raise)\n                if (scaledX == INFLATED) {\n                    sum = snd.plus(bigMultiplyPowerTen(xs, raise))\n                } else {\n                    sum = snd.plusLong(scaledX)\n                }\n            } else { //if (sdiff > 0) {\n                val raise = checkScale(snd, sdiff)\n                snd = bigMultiplyPowerTen(snd, raise)!!\n                sum = snd.plusLong(xs)\n            }\n            return if (sameSigns)\n                BigDecimal(sum, INFLATED, rscale, 0)\n            else\n                of(sum, rscale, 0)\n        }\n\n        private fun sum(fst: BigInteger?, scale1: Int, snd: BigInteger?, scale2: Int): BigDecimal {\n            var fst = fst\n            var snd = snd\n            var rscale = scale1\n            val sdiff = rscale.toLong() - scale2\n            if (sdiff != 0L) {\n                if (sdiff < 0) {\n                    val raise = checkScale(fst, -sdiff)\n                    rscale = scale2\n                    fst = bigMultiplyPowerTen(fst, raise)\n                } else {\n                    val raise = checkScale(snd, sdiff)\n                    snd = bigMultiplyPowerTen(snd, raise)\n                }\n            }\n            val sum = fst!!.plus(snd!!)\n            return if (fst._signum == snd._signum)\n                BigDecimal(sum, INFLATED, rscale, 0)\n            else\n                of(sum, rscale, 0)\n        }\n\n        private fun bigMultiplyPowerTen(value: Long, n: Int): BigInteger {\n            return if (n <= 0) BigInteger.of(value) else bigTenToThe(n).timesLong(value)\n        }\n\n        private fun bigMultiplyPowerTen(value: BigInteger?, n: Int): BigInteger? {\n            if (n <= 0)\n                return value\n            return if (n < LONG_TEN_POWERS_TABLE.size) {\n                value!!.timesLong(LONG_TEN_POWERS_TABLE[n])\n            } else value!!.times(bigTenToThe(n))\n        }\n\n        /**\n         * Returns a [BigDecimal] whose value is `(xs /\n         * ys)`, with rounding according to the context settings.\n         *\n         * Fast path - used only when (xscale <= yscale && yscale < 18\n         * && mc.presision<18) {\n         */\n        private fun divideSmallFastPath(\n            xs: Long, xscale: Int,\n            ys: Long, yscale: Int,\n            preferredScale: Long, mc: MathContext\n        ): BigDecimal? {\n            var yscale = yscale\n            val mcp = mc.precision\n            val roundingMode = mc.roundingMode.oldMode\n\n            require(xscale <= yscale && yscale < 18 && mcp < 18)\n            val xraise = yscale - xscale // xraise >=0\n            val scaledX = if (xraise == 0)\n                xs\n            else\n                longMultiplyPowerTen(xs, xraise) // can't overflow here!\n            var quotient: BigDecimal?\n\n            val cmp = longCompareMagnitude(scaledX, ys)\n            if (cmp > 0) { // satisfy constraint (b)\n                yscale -= 1 // [that is, divisor *= 10]\n                val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n                if (checkScaleNonZero(mcp.toLong() + yscale - xscale) > 0) {\n                    // require newScale >= xscale\n                    val raise = checkScaleNonZero(mcp.toLong() + yscale - xscale)\n                    val scaledXs: Long\n                    scaledXs = longMultiplyPowerTen(xs, raise)\n                    if (scaledXs == INFLATED) {\n                        quotient = null\n                        if (mcp - 1 >= 0 && mcp - 1 < LONG_TEN_POWERS_TABLE.size) {\n                            quotient = multiplyDivideAndRound(\n                                LONG_TEN_POWERS_TABLE[mcp - 1],\n                                scaledX,\n                                ys,\n                                scl,\n                                roundingMode,\n                                checkScaleNonZero(preferredScale)\n                            )\n                        }\n                        if (quotient == null) {\n                            val rb = bigMultiplyPowerTen(scaledX, mcp - 1)\n                            quotient = divideAndRound(\n                                rb, ys,\n                                scl, roundingMode, checkScaleNonZero(preferredScale)\n                            )\n                        }\n                    } else {\n                        quotient = divideAndRound(scaledXs, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    }\n                } else {\n                    val newScale = checkScaleNonZero(xscale.toLong() - mcp)\n                    // require newScale >= yscale\n                    if (newScale == yscale) { // easy case\n                        quotient = divideAndRound(xs, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    } else {\n                        val raise = checkScaleNonZero(newScale.toLong() - yscale)\n                        val scaledYs: Long = longMultiplyPowerTen(ys, raise)\n                        if (scaledYs == INFLATED) {\n                            val rb = bigMultiplyPowerTen(ys, raise)\n                            quotient = divideAndRound(\n                                BigInteger.of(xs),\n                                rb, scl, roundingMode, checkScaleNonZero(preferredScale)\n                            )\n                        } else {\n                            quotient =\n                                divideAndRound(xs, scaledYs, scl, roundingMode, checkScaleNonZero(preferredScale))\n                        }\n                    }\n                }\n            } else {\n                // absoluteValue(scaledX) <= absoluteValue(ys)\n                // result is \"scaledX * 10^msp / ys\"\n                val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n                if (cmp == 0) {\n                    // absoluteValue(scaleX)== absoluteValue(ys) => result will be scaled 10^mcp + correct sign\n                    quotient = roundedTenPower(\n                        if (scaledX < 0 == ys < 0) 1 else -1,\n                        mcp,\n                        scl,\n                        checkScaleNonZero(preferredScale)\n                    )\n                } else {\n                    // absoluteValue(scaledX) < absoluteValue(ys)\n                    val scaledXs: Long = longMultiplyPowerTen(scaledX, mcp)\n                    if (scaledXs == INFLATED) {\n                        quotient = null\n                        if (mcp < LONG_TEN_POWERS_TABLE.size) {\n                            quotient = multiplyDivideAndRound(\n                                LONG_TEN_POWERS_TABLE[mcp],\n                                scaledX,\n                                ys,\n                                scl,\n                                roundingMode,\n                                checkScaleNonZero(preferredScale)\n                            )\n                        }\n                        if (quotient == null) {\n                            val rb = bigMultiplyPowerTen(scaledX, mcp)\n                            quotient = divideAndRound(\n                                rb, ys,\n                                scl, roundingMode, checkScaleNonZero(preferredScale)\n                            )\n                        }\n                    } else {\n                        quotient = divideAndRound(scaledXs, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    }\n                }\n            }\n            // doRound, here, only affects 1000000000 case.\n            return doRound(quotient, mc)\n        }\n\n        /**\n         * Returns a [BigDecimal] whose value is `(xs /\n         * ys)`, with rounding according to the context settings.\n         */\n        private fun divide(\n            xs: Long,\n            xscale: Int,\n            ys: Long,\n            yscale: Int,\n            preferredScale: Long,\n            mc: MathContext\n        ): BigDecimal? {\n            var yscale = yscale\n            val mcp = mc.precision\n            if (xscale <= yscale && yscale < 18 && mcp < 18) {\n                return divideSmallFastPath(xs, xscale, ys, yscale, preferredScale, mc)\n            }\n            if (compareMagnitudeNormalized(xs, xscale, ys, yscale) > 0) {// satisfy constraint (b)\n                yscale -= 1 // [that is, divisor *= 10]\n            }\n            val roundingMode = mc.roundingMode.oldMode\n            // In order to find out whether the div generates the exact result,\n            // we avoid calling the above div method. 'quotient' holds the\n            // return BigDecimal object whose _scale will be set to 'scl'.\n            val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n            val quotient: BigDecimal\n            if (checkScaleNonZero(mcp.toLong() + yscale - xscale) > 0) {\n                val raise = checkScaleNonZero(mcp.toLong() + yscale - xscale)\n                val scaledXs: Long = longMultiplyPowerTen(xs, raise)\n                if (scaledXs == INFLATED) {\n                    val rb = bigMultiplyPowerTen(xs, raise)\n                    quotient = divideAndRound(rb, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                } else {\n                    quotient = divideAndRound(scaledXs, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                }\n            } else {\n                val newScale = checkScaleNonZero(xscale.toLong() - mcp)\n                // require newScale >= yscale\n                if (newScale == yscale) { // easy case\n                    quotient = divideAndRound(xs, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                } else {\n                    val raise = checkScaleNonZero(newScale.toLong() - yscale)\n                    val scaledYs: Long = longMultiplyPowerTen(ys, raise)\n                    if (scaledYs == INFLATED) {\n                        val rb = bigMultiplyPowerTen(ys, raise)\n                        quotient = divideAndRound(\n                            BigInteger.of(xs),\n                            rb, scl, roundingMode, checkScaleNonZero(preferredScale)\n                        )\n                    } else {\n                        quotient = divideAndRound(xs, scaledYs, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    }\n                }\n            }\n            // doRound, here, only affects 1000000000 case.\n            return doRound(quotient, mc)\n        }\n\n        /**\n         * Returns a [BigDecimal] whose value is `(xs /\n         * ys)`, with rounding according to the context settings.\n         */\n        private fun divide(\n            xs: BigInteger?,\n            xscale: Int,\n            ys: Long,\n            yscale: Int,\n            preferredScale: Long,\n            mc: MathContext\n        ): BigDecimal? {\n            var yscale = yscale\n            // Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n            if (-compareMagnitudeNormalized(ys, yscale, xs, xscale) > 0) {// satisfy constraint (b)\n                yscale -= 1 // [that is, divisor *= 10]\n            }\n            val mcp = mc.precision\n            val roundingMode = mc.roundingMode.oldMode\n\n            // In order to find out whether the div generates the exact result,\n            // we avoid calling the above div method. 'quotient' holds the\n            // return BigDecimal object whose _scale will be set to 'scl'.\n            val quotient: BigDecimal\n            val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n            if (checkScaleNonZero(mcp.toLong() + yscale - xscale) > 0) {\n                val raise = checkScaleNonZero(mcp.toLong() + yscale - xscale)\n                val rb = bigMultiplyPowerTen(xs, raise)\n                quotient = divideAndRound(rb!!, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n            } else {\n                val newScale = checkScaleNonZero(xscale.toLong() - mcp)\n                // require newScale >= yscale\n                if (newScale == yscale) { // easy case\n                    quotient = divideAndRound(xs!!, ys, scl, roundingMode, checkScaleNonZero(preferredScale))\n                } else {\n                    val raise = checkScaleNonZero(newScale.toLong() - yscale)\n                    val scaledYs: Long = longMultiplyPowerTen(ys, raise)\n                    if (scaledYs == INFLATED) {\n                        val rb = bigMultiplyPowerTen(ys, raise)\n                        quotient = divideAndRound(xs!!, rb, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    } else {\n                        quotient = divideAndRound(xs!!, scaledYs, scl, roundingMode, checkScaleNonZero(preferredScale))\n                    }\n                }\n            }\n            // doRound, here, only affects 1000000000 case.\n            return doRound(quotient, mc)\n        }\n\n        /**\n         * Returns a [BigDecimal] whose value is `(xs /\n         * ys)`, with rounding according to the context settings.\n         */\n        private fun divide(\n            xs: Long,\n            xscale: Int,\n            ys: BigInteger?,\n            yscale: Int,\n            preferredScale: Long,\n            mc: MathContext\n        ): BigDecimal? {\n            var yscale = yscale\n            // Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n            if (compareMagnitudeNormalized(xs, xscale, ys, yscale) > 0) {// satisfy constraint (b)\n                yscale -= 1 // [that is, divisor *= 10]\n            }\n            val mcp = mc.precision\n            val roundingMode = mc.roundingMode.also { log { it } }.oldMode\n\n            // In order to find out whether the div generates the exact result,\n            // we avoid calling the above div method. 'quotient' holds the\n            // return BigDecimal object whose _scale will be set to 'scl'.\n            val quotient: BigDecimal\n            val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n            if (checkScaleNonZero(mcp.toLong() + yscale - xscale) > 0) {\n                val raise = checkScaleNonZero(mcp.toLong() + yscale - xscale)\n                val rb = bigMultiplyPowerTen(xs, raise)\n                quotient = divideAndRound(rb, ys!!, scl, roundingMode, checkScaleNonZero(preferredScale))\n            } else {\n                val newScale = checkScaleNonZero(xscale.toLong() - mcp)\n                val raise = checkScaleNonZero(newScale.toLong() - yscale)\n                val rb = bigMultiplyPowerTen(ys, raise)\n                quotient =\n                    divideAndRound(BigInteger.of(xs), rb!!, scl, roundingMode, checkScaleNonZero(preferredScale))\n            }\n            // doRound, here, only affects 1000000000 case.\n            return doRound(quotient, mc)\n        }\n\n        /**\n         * Returns a [BigDecimal] whose value is `(xs /\n         * ys)`, with rounding according to the context settings.\n         */\n        private fun divide(\n            xs: BigInteger?,\n            xscale: Int,\n            ys: BigInteger?,\n            yscale: Int,\n            preferredScale: Long,\n            mc: MathContext\n        ): BigDecimal? {\n            var yscale = yscale\n            // Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n            if (compareMagnitudeNormalized(xs, xscale, ys, yscale) > 0) {// satisfy constraint (b)\n                yscale -= 1 // [that is, divisor *= 10]\n            }\n            val mcp = mc.precision\n            val roundingMode = mc.roundingMode.oldMode\n\n            // In order to find out whether the div generates the exact result,\n            // we avoid calling the above div method. 'quotient' holds the\n            // return BigDecimal object whose _scale will be set to 'scl'.\n            val quotient: BigDecimal\n            val scl = checkScaleNonZero(preferredScale + yscale - xscale + mcp)\n            if (checkScaleNonZero(mcp.toLong() + yscale - xscale) > 0) {\n                val raise = checkScaleNonZero(mcp.toLong() + yscale - xscale)\n                val rb = bigMultiplyPowerTen(xs, raise)\n                quotient = divideAndRound(rb!!, ys!!, scl, roundingMode, checkScaleNonZero(preferredScale))\n            } else {\n                val newScale = checkScaleNonZero(xscale.toLong() - mcp)\n                val raise = checkScaleNonZero(newScale.toLong() - yscale)\n                val rb = bigMultiplyPowerTen(ys, raise)\n                quotient = divideAndRound(xs!!, rb!!, scl, roundingMode, checkScaleNonZero(preferredScale))\n            }\n            // doRound, here, only affects 1000000000 case.\n            return doRound(quotient, mc)\n        }\n\n        /*\n     * performs divideAndRound for (dividend0*dividend1, divisor)\n     * returns null if quotient can't fit into long value;\n     */\n        private fun multiplyDivideAndRound(\n            dividend0: Long, dividend1: Long, divisor: Long, scale: Int, roundingMode: Int,\n            preferredScale: Int\n        ): BigDecimal? {\n            var dividend0 = dividend0\n            var dividend1 = dividend1\n            var divisor = divisor\n            val qsign = dividend0.sign * dividend1.sign * divisor.sign\n            dividend0 = abs(dividend0)\n            dividend1 = abs(dividend1)\n            divisor = abs(divisor)\n            // timesLong dividend0 * dividend1\n            val d0_hi = dividend0.ushr(32)\n            val d0_lo = dividend0 and LONG_MASK\n            val d1_hi = dividend1.ushr(32)\n            val d1_lo = dividend1 and LONG_MASK\n            var product = d0_lo * d1_lo\n            val d0 = product and LONG_MASK\n            var d1 = product.ushr(32)\n            product = d0_hi * d1_lo + d1\n            d1 = product and LONG_MASK\n            var d2 = product.ushr(32)\n            product = d0_lo * d1_hi + d1\n            d1 = product and LONG_MASK\n            d2 += product.ushr(32)\n            var d3 = d2.ushr(32)\n            d2 = d2 and LONG_MASK\n            product = d0_hi * d1_hi + d2\n            d2 = product and LONG_MASK\n            d3 = product.ushr(32) + d3 and LONG_MASK\n            val dividendHi = make64(d3, d2)\n            val dividendLo = make64(d1, d0)\n            // div\n            return divideAndRound128(dividendHi, dividendLo, divisor, qsign, scale, roundingMode, preferredScale)\n        }\n\n        private const val DIV_NUM_BASE = 1L shl 32 // Number base (32 bits).\n\n        /*\n     * divideAndRound 128-bit value by long divisor.\n     * returns null if quotient can't fit into long value;\n     * Specialized version of Knuth's division\n     */\n        private fun divideAndRound128(\n            dividendHi: Long, dividendLo: Long, divisor: Long, sign: Int,\n            scale: Int, roundingMode: Int, preferredScale: Int\n        ): BigDecimal? {\n            var divisor = divisor\n            if (dividendHi >= divisor) {\n                return null\n            }\n\n            val shift = divisor.numberOfLeadingZeros()\n            divisor = divisor shl shift.toInt()\n\n            val v1 = divisor.ushr(32)\n            val v0 = divisor and LONG_MASK\n\n            var tmp = dividendLo shl shift\n            var u1 = tmp.ushr(32)\n            val u0 = tmp and LONG_MASK\n\n            tmp = dividendHi shl shift or dividendLo.ushr(64 - shift)\n            val u2 = tmp and LONG_MASK\n            var q1: Long\n            var r_tmp: Long\n            if (v1 == 1L) {\n                q1 = tmp\n                r_tmp = 0\n            } else if (tmp >= 0) {\n                q1 = tmp / v1\n                r_tmp = tmp - q1 * v1\n            } else {\n                val rq = divRemNegativeLong(tmp, v1)\n                q1 = rq[1]\n                r_tmp = rq[0]\n            }\n\n            while (q1 >= DIV_NUM_BASE || unsignedLongCompare(q1 * v0, make64(r_tmp, u1))) {\n                q1--\n                r_tmp += v1\n                if (r_tmp >= DIV_NUM_BASE)\n                    break\n            }\n\n            tmp = mulsub(u2, u1, v1, v0, q1)\n            u1 = tmp and LONG_MASK\n            var q0: Long\n            if (v1 == 1L) {\n                q0 = tmp\n                r_tmp = 0\n            } else if (tmp >= 0) {\n                q0 = tmp / v1\n                r_tmp = tmp - q0 * v1\n            } else {\n                val rq = divRemNegativeLong(tmp, v1)\n                q0 = rq[1]\n                r_tmp = rq[0]\n            }\n\n            while (q0 >= DIV_NUM_BASE || unsignedLongCompare(q0 * v0, make64(r_tmp, u0))) {\n                q0--\n                r_tmp += v1\n                if (r_tmp >= DIV_NUM_BASE)\n                    break\n            }\n\n            if (q1.toInt() < 0) {\n                // result (which is positive and unsigned here)\n                // can't fit into long due to sign bit is used for value\n                val mq = MutableBigInteger(intArrayOf(q1.toInt(), q0.toInt()))\n                if (roundingMode == ROUND_DOWN && scale == preferredScale) {\n                    return mq.toBigDecimal(sign, scale)\n                }\n                val r = mulsub(u1, u0, v1, v0, q0).ushr(shift)\n                if (r != 0L) {\n                    if (needIncrement(divisor.ushr(shift), roundingMode, sign, mq, r)) {\n                        mq.add(MutableBigInteger.ONE)\n                    }\n                    return mq.toBigDecimal(sign, scale)\n                } else {\n                    if (preferredScale != scale) {\n                        val intVal = mq.toBigInteger(sign)\n                        return createAndStripZerosToMatchScale(intVal, scale, preferredScale.toLong())\n                    } else {\n                        return mq.toBigDecimal(sign, scale)\n                    }\n                }\n            }\n\n            var q = make64(q1, q0)\n            q *= sign.toLong()\n\n            if (roundingMode == ROUND_DOWN && scale == preferredScale)\n                return of(q, scale)\n\n            val r = mulsub(u1, u0, v1, v0, q0).ushr(shift)\n            if (r != 0L) {\n                val increment = needIncrement(divisor.ushr(shift), roundingMode, sign, q, r)\n                return of(if (increment) q + sign else q, scale)\n            } else {\n                return if (preferredScale != scale) {\n                    createAndStripZerosToMatchScale(q, scale, preferredScale.toLong())\n                } else {\n                    of(q, scale)\n                }\n            }\n        }\n\n        /*\n     * calculate divideAndRound for ldividend*10^raise / divisor\n     * when absoluteValue(dividend)==absoluteValue(divisor);\n     */\n        private fun roundedTenPower(qsign: Int, raise: Int, scale: Int, preferredScale: Int): BigDecimal {\n            if (scale > preferredScale) {\n                val diff = scale - preferredScale\n                return if (diff < raise) {\n                    scaledTenPow(raise - diff, qsign, preferredScale)\n                } else {\n                    of(qsign.toLong(), scale - raise)\n                }\n            } else {\n                return scaledTenPow(raise, qsign, scale)\n            }\n        }\n\n        internal fun scaledTenPow(n: Int, sign: Int, scale: Int): BigDecimal {\n            if (n < LONG_TEN_POWERS_TABLE.size)\n                return of(sign * LONG_TEN_POWERS_TABLE[n], scale)\n            else {\n                var unscaledVal = bigTenToThe(n)\n                if (sign == -1) {\n                    unscaledVal = unscaledVal.unaryMinus()\n                }\n                return BigDecimal(unscaledVal, INFLATED, scale, n + 1)\n            }\n        }\n\n        /**\n         * Calculate the quotient and remainder of dividing a negative long by\n         * another long.\n         *\n         * @param n the numerator; must be negative\n         * @param d the denominator; must not be unity\n         * @return a two-element {@long} array with the remainder and quotient in\n         * the initial and final elements, respectively\n         */\n        private fun divRemNegativeLong(n: Long, d: Long): LongArray {\n            require(n < 0) { \"Non-negative numerator $n\" }\n            require(d != 1L) { \"Unity denominator\" }\n\n            // Approximate the quotient and remainder\n            var q = n.ushr(1) / d.ushr(1)\n            var r = n - q * d\n\n            // Correct the approximation\n            while (r < 0) {\n                r += d\n                q--\n            }\n            while (r >= d) {\n                r -= d\n                q++\n            }\n\n            // n - q*d == r && 0 <= r < d, hence we're done.\n            return longArrayOf(r, q)\n        }\n\n        private fun make64(hi: Long, lo: Long): Long {\n            return hi shl 32 or lo\n        }\n\n        private fun mulsub(u1: Long, u0: Long, v1: Long, v0: Long, q0: Long): Long {\n            val tmp = u0 - q0 * v0\n            return make64(u1 + tmp.ushr(32) - q0 * v1, tmp and LONG_MASK)\n        }\n\n        private fun unsignedLongCompare(one: Long, two: Long): Boolean {\n            return one + Long.MIN_VALUE > two + Long.MIN_VALUE\n        }\n\n        private fun unsignedLongCompareEq(one: Long, two: Long): Boolean {\n            return one + Long.MIN_VALUE >= two + Long.MIN_VALUE\n        }\n\n\n        // Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n        private fun compareMagnitudeNormalized(xs: Long, xscale: Int, ys: Long, yscale: Int): Int {\n            var xs = xs\n            var ys = ys\n            // require xs!=0 && ys!=0\n            val sdiff = xscale - yscale\n            if (sdiff != 0) {\n                if (sdiff < 0) {\n                    xs = longMultiplyPowerTen(xs, -sdiff)\n                } else { // sdiff > 0\n                    ys = longMultiplyPowerTen(ys, sdiff)\n                }\n            }\n            return if (xs != INFLATED)\n                if (ys != INFLATED) longCompareMagnitude(xs, ys) else -1\n            else\n                1\n        }\n\n        // Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n        private fun compareMagnitudeNormalized(xs: Long, xscale: Int, ys: BigInteger?, yscale: Int): Int {\n            // require \"ys can't be represented as long\"\n            if (xs == 0L)\n                return -1\n            val sdiff = xscale - yscale\n            if (sdiff < 0) {\n                if (longMultiplyPowerTen(xs, -sdiff) == INFLATED) {\n                    return bigMultiplyPowerTen(xs, -sdiff).compareMagnitude(ys!!)\n                }\n            }\n            return -1\n        }\n\n        // Compare Normalize dividend & divisor so that both fall into [0.1, 0.999...]\n        private fun compareMagnitudeNormalized(xs: BigInteger?, xscale: Int, ys: BigInteger?, yscale: Int): Int {\n            val sdiff = xscale - yscale\n            return if (sdiff < 0) {\n                bigMultiplyPowerTen(xs, -sdiff)!!.compareMagnitude(ys!!)\n            } else { // sdiff >= 0\n                xs!!.compareMagnitude(bigMultiplyPowerTen(ys, sdiff)!!)\n            }\n        }\n\n        private fun multiply(x: Long, y: Long): Long {\n            val product = x * y\n            val ax = abs(x)\n            val ay = abs(y)\n            return if ((ax or ay).ushr(31) == 0L || y == 0L || product / y == x) {\n                product\n            } else INFLATED\n        }\n\n        private fun multiply(x: Long, y: Long, scale: Int): BigDecimal {\n            val product = multiply(x, y)\n            return if (product != INFLATED) {\n                of(product, scale)\n            } else BigDecimal(BigInteger.of(x).timesLong(y), INFLATED, scale, 0)\n        }\n\n        private fun multiply(x: Long, y: BigInteger?, scale: Int): BigDecimal {\n            return if (x == 0L) {\n                zeroValueOf(scale)\n            } else BigDecimal(y!!.timesLong(x), INFLATED, scale, 0)\n        }\n\n        private fun multiply(x: BigInteger, y: BigInteger?, scale: Int): BigDecimal {\n            return BigDecimal(x.times(y!!), INFLATED, scale, 0)\n        }\n\n        /**\n         * Multiplies two long values and rounds according `MathContext`\n         */\n        private fun multiplyAndRound(x: Long, y: Long, scale: Int, mc: MathContext): BigDecimal {\n            var x = x\n            var y = y\n            var product = multiply(x, y)\n            if (product != INFLATED) {\n                return doRound(product, scale, mc)\n            }\n            // attempt to do it in 128 bits\n            var rsign = 1\n            if (x < 0) {\n                x = -x\n                rsign = -1\n            }\n            if (y < 0) {\n                y = -y\n                rsign *= -1\n            }\n            // timesLong dividend0 * dividend1\n            val m0_hi = x.ushr(32)\n            val m0_lo = x and LONG_MASK\n            val m1_hi = y.ushr(32)\n            val m1_lo = y and LONG_MASK\n            product = m0_lo * m1_lo\n            val m0 = product and LONG_MASK\n            var m1 = product.ushr(32)\n            product = m0_hi * m1_lo + m1\n            m1 = product and LONG_MASK\n            var m2 = product.ushr(32)\n            product = m0_lo * m1_hi + m1\n            m1 = product and LONG_MASK\n            m2 += product.ushr(32)\n            var m3 = m2.ushr(32)\n            m2 = m2 and LONG_MASK\n            product = m0_hi * m1_hi + m2\n            m2 = product and LONG_MASK\n            m3 = product.ushr(32) + m3 and LONG_MASK\n            val mHi = make64(m3, m2)\n            val mLo = make64(m1, m0)\n            var res = doRound128(mHi, mLo, rsign, scale, mc)\n            if (res != null) {\n                return res\n            }\n            res = BigDecimal(BigInteger.of(x).timesLong(y * rsign), INFLATED, scale, 0)\n            return doRound(res, mc)!!\n        }\n\n        private fun multiplyAndRound(x: Long, y: BigInteger?, scale: Int, mc: MathContext): BigDecimal {\n            return if (x == 0L) {\n                zeroValueOf(scale)\n            } else doRound(y!!.timesLong(x), scale, mc)\n        }\n\n        private fun multiplyAndRound(x: BigInteger, y: BigInteger?, scale: Int, mc: MathContext): BigDecimal {\n            return doRound(x.times(y!!), scale, mc)\n        }\n\n        /**\n         * rounds 128-bit value according `MathContext`\n         * returns null if result can't be repsented as compact BigDecimal.\n         */\n        private fun doRound128(hi: Long, lo: Long, sign: Int, scale: Int, mc: MathContext): BigDecimal? {\n            var scale = scale\n            val mcp = mc.precision\n            val drop: Int = precision(hi, lo) - mcp\n            var res: BigDecimal? = null\n            if (drop > 0 && drop < LONG_TEN_POWERS_TABLE.size) {\n                scale = checkScaleNonZero(scale.toLong() - drop)\n                res = divideAndRound128(\n                    hi,\n                    lo,\n                    LONG_TEN_POWERS_TABLE[drop],\n                    sign,\n                    scale,\n                    mc.roundingMode.oldMode,\n                    scale\n                )\n            }\n            return if (res != null) {\n                doRound(res, mc)\n            } else null\n        }\n\n        private val LONGLONG_TEN_POWERS_TABLE = arrayOf(\n            longArrayOf(0L, -0x7538dcfb76180000L), //10^19\n            longArrayOf(0x5L, 0x6bc75e2d63100000L), //10^20\n            longArrayOf(0x36L, 0x35c9adc5dea00000L), //10^21\n            longArrayOf(0x21eL, 0x19e0c9bab2400000L), //10^22\n            longArrayOf(0x152dL, 0x02c7e14af6800000L), //10^23\n            longArrayOf(0xd3c2L, 0x1bcecceda1000000L), //10^24\n            longArrayOf(0x84595L, 0x161401484a000000L), //10^25\n            longArrayOf(0x52b7d2L, -0x2337f32d1c000000L), //10^26\n            longArrayOf(0x33b2e3cL, -0x602f7fc318000000L), //10^27\n            longArrayOf(0x204fce5eL, 0x3e25026110000000L), //10^28\n            longArrayOf(0x1431e0faeL, 0x6d7217caa0000000L), //10^29\n            longArrayOf(0xc9f2c9cd0L, 0x4674edea40000000L), //10^30\n            longArrayOf(0x7e37be2022L, -0x3f6eb4d980000000L), //10^31\n            longArrayOf(0x4ee2d6d415bL, -0x7a53107f00000000L), //10^32\n            longArrayOf(0x314dc6448d93L, 0x38c15b0a00000000L), //10^33\n            longArrayOf(0x1ed09bead87c0L, 0x378d8e6400000000L), //10^34\n            longArrayOf(0x13426172c74d82L, 0x2b878fe800000000L), //10^35\n            longArrayOf(0xc097ce7bc90715L, -0x4cb460f000000000L), //10^36\n            longArrayOf(0x785ee10d5da46d9L, 0x00f436a000000000L), //10^37\n            longArrayOf(0x4b3b4ca85a86c47aL, 0x098a224000000000L)\n        )//10^38\n\n        /*\n     * returns _precision of 128-bit value\n     */\n        private fun precision(hi: Long, lo: Long): Int {\n            if (hi == 0L) {\n                if (lo >= 0) {\n                    return longDigitLength(lo)\n                }\n                return if (unsignedLongCompareEq(lo, LONGLONG_TEN_POWERS_TABLE[0][1])) 20 else 19\n                // 0x8AC7230489E80000L  = unsigned 2^19\n            }\n            val r = ((128 - hi.numberOfLeadingZeros() + 1) * 1233).ushr(12)\n            val idx = r - 19\n            return if (idx >= LONGLONG_TEN_POWERS_TABLE.size || longLongCompareMagnitude(\n                    hi, lo,\n                    LONGLONG_TEN_POWERS_TABLE[idx][0], LONGLONG_TEN_POWERS_TABLE[idx][1]\n                )\n            )\n                r\n            else\n                r + 1\n        }\n\n        /*\n     * returns true if 128 bit number <hi0,lo0> is less than <hi1,lo1>\n     * hi0 & hi1 should be non-negative\n     */\n        private fun longLongCompareMagnitude(hi0: Long, lo0: Long, hi1: Long, lo1: Long): Boolean {\n            return if (hi0 != hi1) {\n                hi0 < hi1\n            } else lo0 + Long.MIN_VALUE < lo1 + Long.MIN_VALUE\n        }\n\n        private fun divide(\n            dividend: Long,\n            dividendScale: Int,\n            divisor: Long,\n            divisorScale: Int,\n            scale: Int,\n            roundingMode: Int\n        ): BigDecimal {\n            if (checkScale(dividend, scale.toLong() + divisorScale) > dividendScale) {\n                val newScale = scale + divisorScale\n                val raise = newScale - dividendScale\n                if (raise < LONG_TEN_POWERS_TABLE.size) {\n                    var xs = dividend\n                    xs = longMultiplyPowerTen(xs, raise)\n                    if (xs != INFLATED) {\n                        return divideAndRound(xs, divisor, scale, roundingMode, scale)\n                    }\n                    val q = multiplyDivideAndRound(\n                        LONG_TEN_POWERS_TABLE[raise],\n                        dividend,\n                        divisor,\n                        scale,\n                        roundingMode,\n                        scale\n                    )\n                    if (q != null) {\n                        return q\n                    }\n                }\n                val scaledDividend = bigMultiplyPowerTen(dividend, raise)\n                return divideAndRound(scaledDividend, divisor, scale, roundingMode, scale)\n            } else {\n                val newScale = checkScale(divisor, dividendScale.toLong() - scale)\n                val raise = newScale - divisorScale\n                if (raise < LONG_TEN_POWERS_TABLE.size) {\n                    var ys = divisor\n                    ys = longMultiplyPowerTen(ys, raise)\n                    if (ys != INFLATED) {\n                        return divideAndRound(dividend, ys, scale, roundingMode, scale)\n                    }\n                }\n                val scaledDivisor = bigMultiplyPowerTen(divisor, raise)\n                return divideAndRound(BigInteger.of(dividend), scaledDivisor, scale, roundingMode, scale)\n            }\n        }\n\n        private fun divide(\n            dividend: BigInteger?,\n            dividendScale: Int,\n            divisor: Long,\n            divisorScale: Int,\n            scale: Int,\n            roundingMode: Int\n        ): BigDecimal {\n            if (checkScale(dividend, scale.toLong() + divisorScale) > dividendScale) {\n                val newScale = scale + divisorScale\n                val raise = newScale - dividendScale\n                val scaledDividend = bigMultiplyPowerTen(dividend, raise)\n                return divideAndRound(scaledDividend!!, divisor, scale, roundingMode, scale)\n            } else {\n                val newScale = checkScale(divisor, dividendScale.toLong() - scale)\n                val raise = newScale - divisorScale\n                if (raise < LONG_TEN_POWERS_TABLE.size) {\n                    var ys = divisor\n                    ys = longMultiplyPowerTen(ys, raise)\n                    if (ys != INFLATED) {\n                        return divideAndRound(dividend!!, ys, scale, roundingMode, scale)\n                    }\n                }\n                val scaledDivisor = bigMultiplyPowerTen(divisor, raise)\n                return divideAndRound(dividend!!, scaledDivisor, scale, roundingMode, scale)\n            }\n        }\n\n        private fun divide(\n            dividend: Long,\n            dividendScale: Int,\n            divisor: BigInteger?,\n            divisorScale: Int,\n            scale: Int,\n            roundingMode: Int\n        ): BigDecimal {\n            if (checkScale(dividend, scale.toLong() + divisorScale) > dividendScale) {\n                val newScale = scale + divisorScale\n                val raise = newScale - dividendScale\n                val scaledDividend = bigMultiplyPowerTen(dividend, raise)\n                return divideAndRound(scaledDividend, divisor!!, scale, roundingMode, scale)\n            } else {\n                val newScale = checkScale(divisor, dividendScale.toLong() - scale)\n                val raise = newScale - divisorScale\n                val scaledDivisor = bigMultiplyPowerTen(divisor, raise)\n                return divideAndRound(BigInteger.of(dividend), scaledDivisor!!, scale, roundingMode, scale)\n            }\n        }\n\n        private fun divide(\n            dividend: BigInteger?,\n            dividendScale: Int,\n            divisor: BigInteger?,\n            divisorScale: Int,\n            scale: Int,\n            roundingMode: Int\n        ): BigDecimal {\n            if (checkScale(dividend, scale.toLong() + divisorScale) > dividendScale) {\n                val newScale = scale + divisorScale\n                val raise = newScale - dividendScale\n                val scaledDividend = bigMultiplyPowerTen(dividend, raise)\n                return divideAndRound(scaledDividend!!, divisor!!, scale, roundingMode, scale)\n            } else {\n                val newScale = checkScale(divisor, dividendScale.toLong() - scale)\n                val raise = newScale - divisorScale\n                val scaledDivisor = bigMultiplyPowerTen(divisor, raise)\n                return divideAndRound(dividend!!, scaledDivisor!!, scale, roundingMode, scale)\n            }\n        }\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n * Portions Copyright (c) 1995  Colin Plumb.  All rights reserved.\n */\n\npackage org.gciatto.kt.math\n\nimport kotlin.experimental.and\nimport kotlin.js.JsName\nimport kotlin.math.*\nimport kotlin.random.Random\n\n/**\n * Immutable arbitrary-precision integers.  All operations behave as if\n * BigIntegers were represented in two's-complement notation (like Java's\n * primitive integer types).  BigInteger provides analogues to all of Java's\n * primitive integer operators, and all relevant methods from `kotlin.math`.\n * Additionally, BigInteger provides operations for modular arithmetic, GCD\n * calculation, primality testing, prime generation, bit manipulation,\n * and a few other miscellaneous operations.\n *\n *\n * Semantics of arithmetic operations exactly mimic those of Java's integer\n * arithmetic operators, as defined in *The Java Language Specification*.\n * For example, division by zero throws an `ArithmeticException`, and\n * division of a negative by a positive yields a negative (or zero) remainder.\n * All of the details in the Spec concerning overflow are ignored, as\n * BigIntegers are made as large as necessary to accommodate the results of an\n * operation.\n *\n *\n * Semantics of shift operations extend those of Java's shift operators\n * to allow for negative shift distances.  A right-shift with a negative\n * shift distance results in a left shift, and vice-versa.  The unsigned\n * right shift operator (`>>>`) is omitted, as this operation makes\n * little sense in combination with the \"infinite word size\" abstraction\n * provided by this class.\n *\n *\n * Semantics of bitwise logical operations exactly mimic those of Java's\n * bitwise integer operators.  The binary operators (`and`,\n * `or`, `xor`) implicitly perform sign extension on the shorter\n * of the two operands prior to performing the operation.\n *\n *\n * Comparison operations perform signed integer comparisons, analogous to\n * those performed by Java's relational and equality operators.\n *\n *\n * Modular arithmetic operations are provided to compute residues, perform\n * exponentiation, and compute multiplicative inverses.  These methods always\n * return a non-negative result, between `0` and `(modulus - 1)`,\n * inclusive.\n *\n *\n * Bit operations operate on a single bit of the two's-complement\n * representation of their operand.  If necessary, the operand is sign-\n * extended so that it contains the designated bit.  None of the single-bit\n * operations can produce a BigInteger with a different sign from the\n * BigInteger being operated on, as they affect only a single bit, and the\n * \"infinite word size\" abstraction provided by this class ensures that there\n * are infinitely many \"virtual sign bits\" preceding each BigInteger.\n *\n *\n * For the sake of brevity and clarity, pseudo-code is used throughout the\n * descriptions of BigInteger methods.  The pseudo-code expression\n * `(i + j)` is shorthand for \"a BigInteger whose value is\n * that of the BigInteger `i` plus that of the BigInteger `j`.\"\n * The pseudo-code expression `(i == j)` is shorthand for\n * \"`true` if and only if the BigInteger `i` represents the same\n * value as the BigInteger `j`.\"  Other pseudo-code expressions are\n * interpreted similarly.\n *\n *\n * All methods and constructors in this class throw\n * `NullPointerException` when passed\n * a null object reference for any input parameter.\n *\n * BigInteger must support values in the range\n * -2<sup>`Int.MAX_VALUE`</sup> (exclusive) to\n * +2<sup>`Int.MAX_VALUE`</sup> (exclusive)\n * and may support values outside of that range.\n *\n * The range of probable prime values is limited and may be less than\n * the full supported positive range of `BigInteger`.\n * The range must be at least 1 to 2<sup>500000000</sup>.\n *\n * @implNote\n * BigInteger constructors and operations throw `ArithmeticException` when\n * the result is out of the supported range of\n * -2<sup>`Int.MAX_VALUE`</sup> (exclusive) to\n * +2<sup>`Int.MAX_VALUE`</sup> (exclusive).\n *\n * @see BigDecimal\n *\n * @jls     4.2.2 Integer Operations\n * @author  Josh Bloch\n * @author  Michael McCloskey\n * @author  Alan Eliasen\n * @author  Timothy Buktu\n * @since 1.1\n */\n\n@Suppress(\"NAME_SHADOWING\", \"VARIABLE_WITH_REDUNDANT_INITIALIZER\")\nclass BigInteger : Comparable<BigInteger> {\n\n    /**\n     * The _signum of this BigInteger: -1 for negative, 0 for zero, or\n     * 1 for positive.  Note that the BigInteger zero *must* have\n     * a _signum of 0.  This is necessary to ensures that there is exactly one\n     * representation for each BigInteger value.\n     */\n    internal val _signum: Int\n\n    /**d\n     * The magnitude of this BigInteger, in *big-endian* order: the\n     * zeroth element of this array is the most-significant int of the\n     * magnitude.  The magnitude must be \"minimal\" in that the most-significant\n     * int (`_mag[0]`) must be non-zero.  This is necessary to\n     * ensure that there is exactly one representation for each BigInteger\n     * value.  Note that this implies that the BigInteger zero has a\n     * zero-length _mag array.\n     */\n    internal val _mag: IntArray\n\n    // The following fields are stable variables. A stable variable's value\n    // changes at most once from the default zero value to a non-zero stable\n    // value. A stable value is calculated lazily on demand.\n\n    /**\n     * One plus the bitCount of this BigInteger. This is a stable variable.\n     *\n     * @see .bitCount\n     */\n    private var _bitCountPlusOne: Int = 0\n\n    /**\n     * One plus the bitLength of this BigInteger. This is a stable variable.\n     * (either value is acceptable).\n     *\n     * @see .bitLength\n     */\n    private var _bitLengthPlusOne: Int = 0\n\n    /**\n     * Two plus the lowest set bit of this BigInteger. This is a stable variable.\n     *\n     * @see .getLowestSetBit\n     */\n    private var _lowestSetBitPlusTwo: Int = 0\n\n    /**\n     * Two plus the index of the lowest-order int in the magnitude of this\n     * BigInteger that contains a nonzero int. This is a stable variable. The\n     * least significant int has int-number 0, the next int in order of\n     * increasing significance has int-number 1, and so forth.\n     *\n     *\n     * Note: never used for a BigInteger with a magnitude of zero.\n     *\n     * @see .firstNonzeroIntNum\n     */\n    private var _firstNonzeroIntNumPlusTwo: Int = 0\n\n    /**\n     * Returns the index of the rightmost (lowest-order) one bit in this\n     * BigInteger (the number of zero bits to the right of the rightmost\n     * one bit).  Returns -1 if this BigInteger contains no one bits.\n     * (Computes `(this == 0? -1 : log2(this & -this))`.)\n     *\n     * @return index of the rightmost one bit in this BigInteger.\n     */\n    // lowestSetBit not initialized yet\n    // Search for lowest order nonzero int\n    private val lowestSetBit: Int\n        get() {\n            var lsb = _lowestSetBitPlusTwo - 2\n            if (lsb == -2) {\n                lsb = 0\n                if (_signum == 0) {\n                    lsb -= 1\n                } else {\n                    var i: Int\n                    var b: Int\n                    i = 0\n                    b = getInt(i)\n                    while (b == 0) {\n                        i++\n                        b = getInt(i)\n                    }\n                    lsb += (i shl 5) + b.numberOfTrailingZeros()\n                }\n                _lowestSetBitPlusTwo = lsb + 2\n            }\n            return lsb\n        }\n\n\n    // Constructors\n\n    /**\n     * Translates a byte sub-array containing the two's-complement binary\n     * representation of a BigInteger into a BigInteger.  The sub-array is\n     * specified via an offset into the array and a length.  The sub-array is\n     * assumed to be in *big-endian* byte-order: the most significant\n     * byte is the element at index `off`.  The `val` array is\n     * assumed to be unchanged for the duration of the constructor call.\n     *\n     * An `IndexOutOfBoundsException` is thrown if the length of the array\n     * `val` is non-zero and either `off` is negative, `len`\n     * is negative, or `off+len` is greater than the length of\n     * `val`.\n     *\n     * @param  val byte array containing a sub-array which is the big-endian\n     * two's-complement binary representation of a BigInteger.\n     * @param  off the start offset of the binary representation.\n     * @param  len the number of bytes to use.\n     * @throws NumberFormatException `val` is zero bytes long.\n     * @throws IndexOutOfBoundsException if the provided array offset and\n     * length would cause an index into the byte array to be\n     * negative or greater than or equal to the array length.\n     * @since 9\n     */\n    constructor(`val`: ByteArray, off: Int = 0, len: Int = `val`.size) {\n        if (`val`.size == 0) {\n            throw NumberFormatException(\"Zero length BigInteger\")\n        } else if (off < 0 || off >= `val`.size || len < 0 ||\n            len > `val`.size - off\n        ) { // 0 <= off < val.length\n            throw IndexOutOfBoundsException()\n        }\n\n        if (`val`[off] < 0) {\n            _mag = makePositive(`val`, off, len)\n            _signum = -1\n        } else {\n            _mag = stripLeadingZeroBytes(`val`, off, len)\n            _signum = if (_mag.size == 0) 0 else 1\n        }\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * This private constructor translates an int array containing the\n     * two's-complement binary representation of a BigInteger into a\n     * BigInteger. The input array is assumed to be in *big-endian*\n     * int-order: the most significant int is in the zeroth element.  The\n     * `val` array is assumed to be unchanged for the duration of\n     * the constructor call.\n     */\n    private constructor(`val`: IntArray) {\n        if (`val`.size == 0)\n            throw NumberFormatException(\"Zero length BigInteger\")\n\n        if (`val`[0] < 0) {\n            _mag = makePositive(`val`)\n            _signum = -1\n        } else {\n            _mag = trustedStripLeadingZeroInts(`val`)\n            _signum = if (_mag.size == 0) 0 else 1\n        }\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * Translates the sign-magnitude representation of a BigInteger into a\n     * BigInteger.  The sign is represented as an integer _signum value: -1 for\n     * negative, 0 for zero, or 1 for positive.  The magnitude is a sub-array of\n     * a byte array in *big-endian* byte-order: the most significant byte\n     * is the element at index `off`.  A zero value of the length\n     * `len` is permissible, and will result in a BigInteger value of 0,\n     * whether _signum is -1, 0 or 1.  The `magnitude` array is assumed to\n     * be unchanged for the duration of the constructor call.\n     *\n     * An `IndexOutOfBoundsException` is thrown if the length of the array\n     * `magnitude` is non-zero and either `off` is negative,\n     * `len` is negative, or `off+len` is greater than the length of\n     * `magnitude`.\n     *\n     * @param  signum _signum of the number (-1 for negative, 0 for zero, 1\n     * for positive).\n     * @param  magnitude big-endian binary representation of the magnitude of\n     * the number.\n     * @param  off the start offset of the binary representation.\n     * @param  len the number of bytes to use.\n     * @throws NumberFormatException `_signum` is not one of the three\n     * legal values (-1, 0, and 1), or `_signum` is 0 and\n     * `magnitude` contains one or more non-zero bytes.\n     * @throws IndexOutOfBoundsException if the provided array offset and\n     * length would cause an index into the byte array to be\n     * negative or greater than or equal to the array length.\n     * @since 9\n     */\n    constructor(signum: Int, magnitude: ByteArray, off: Int = 0, len: Int = magnitude.size) {\n        if (signum < -1 || signum > 1) {\n            throw NumberFormatException(\"Invalid _signum value\")\n        } else if (off < 0 || len < 0 ||\n            len > 0 && (off >= magnitude.size || len > magnitude.size - off)\n        ) { // 0 <= off < magnitude.length\n            throw IndexOutOfBoundsException()\n        }\n\n        // stripLeadingZeroBytes() returns a zero length array if len == 0\n        this._mag = stripLeadingZeroBytes(magnitude, off, len)\n\n        if (this._mag.size == 0) {\n            this._signum = 0\n        } else {\n            if (signum == 0)\n                throw NumberFormatException(\"_signum-magnitude mismatch\")\n            this._signum = signum\n        }\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * A constructor for internal use that translates the sign-magnitude\n     * representation of a BigInteger into a BigInteger. It checks the\n     * arguments and copies the magnitude so this constructor would be\n     * safe for external use.  The `magnitude` array is assumed to be\n     * unchanged for the duration of the constructor call.\n     */\n    private constructor(signum: Int, magnitude: IntArray) {\n        this._mag = stripLeadingZeroInts(magnitude)\n\n        if (signum < -1 || signum > 1)\n            throw NumberFormatException(\"Invalid _signum value\")\n\n        if (this._mag.size == 0) {\n            this._signum = 0\n        } else {\n            if (signum == 0)\n                throw NumberFormatException(\"_signum-magnitude mismatch\")\n            this._signum = signum\n        }\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * Translates the String representation of a BigInteger in the\n     * specified radix into a BigInteger.  The String representation\n     * consists of an optional subtract or plus sign followed by a\n     * sequence of one or more digits in the specified radix.  The\n     * character-to-digit mapping is provided by `Character.digit`.  The String may not contain any extraneous\n     * characters (whitespace, for example).\n     *\n     * @param val String representation of BigInteger.\n     * @param radix radix to be used in interpreting `val`.\n     * @throws NumberFormatException `val` is not a valid representation\n     * of a BigInteger in the specified radix, or `radix` is\n     * outside the range from [CHAR_MIN_RADIX] to\n     * [CHAR_MAX_RADIX], inclusive.\n     * @see Character.digit\n     */\n    constructor(`val`: String, radix: Int = 10) {\n        var cursor = 0\n        val numDigits: Int\n        val len = `val`.length\n\n        if (radix < CHAR_MIN_RADIX || radix > CHAR_MAX_RADIX)\n            throw NumberFormatException(\"Radix out of range\")\n        if (len == 0)\n            throw NumberFormatException(\"Zero length BigInteger\")\n\n        // Check for at most one leading sign\n        var sign = 1\n        val index1 = `val`.lastIndexOf('-')\n        val index2 = `val`.lastIndexOf('+')\n        if (index1 >= 0) {\n            if (index1 != 0 || index2 >= 0) {\n                throw NumberFormatException(\"Illegal embedded sign character\")\n            }\n            sign = -1\n            cursor = 1\n        } else if (index2 >= 0) {\n            if (index2 != 0) {\n                throw NumberFormatException(\"Illegal embedded sign character\")\n            }\n            cursor = 1\n        }\n        if (cursor == len)\n            throw NumberFormatException(\"Zero length BigInteger\")\n\n        // Skip leading zeros and compute number of digits in magnitude\n        while (cursor < len && `val`[cursor].toDigit(radix) == 0) {\n            cursor++\n        }\n\n        if (cursor == len) {\n            _signum = 0\n            _mag = ZERO._mag\n            return\n        }\n\n        numDigits = len - cursor\n        _signum = sign\n\n        // Pre-allocate array of expected size. May be too large but can\n        // never be too small. Typically exact.\n        val numBits = (numDigits * bitsPerDigit[radix]).ushr(10) + 1\n        if (numBits + 31 >= 1L shl 32) {\n            reportOverflow()\n        }\n        val numWords = (numBits + 31).toInt().ushr(5)\n        val magnitude = IntArray(numWords)\n\n        // Process first (potentially short) digit group\n        var firstGroupLen = numDigits % digitsPerInt[radix]\n        if (firstGroupLen == 0)\n            firstGroupLen = digitsPerInt[radix]\n        var group = `val`.substring(cursor, cursor + firstGroupLen)\n        cursor += firstGroupLen\n        magnitude[numWords - 1] = group.toInt(radix)\n        if (magnitude[numWords - 1] < 0)\n            throw NumberFormatException(\"Illegal digit\")\n\n        // Process remaining digit groups\n        val superRadix = intRadix[radix]\n        var groupVal = 0\n        while (cursor < len) {\n            group = `val`.substring(cursor, cursor + digitsPerInt[radix])\n            cursor += digitsPerInt[radix]\n            groupVal = group.toInt(radix)\n            if (groupVal < 0)\n                throw NumberFormatException(\"Illegal digit\")\n            destructiveMulAdd(magnitude, superRadix, groupVal)\n        }\n        // Required for cases where the array was overallocated.\n        _mag = trustedStripLeadingZeroInts(magnitude)\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /*\n     * Constructs a new BigInteger using a char array with radix=10.\n     * Sign is precalculated outside and not allowed in the val. The {@code val}\n     * array is assumed to be unchanged for the duration of the constructor\n     * call.\n     */\n    internal constructor(`val`: CharArray, sign: Int, len: Int) {\n        var cursor = 0\n        val numDigits: Int\n\n        // Skip leading zeros and compute number of digits in magnitude\n        while (cursor < len && `val`[cursor].toDigit(10) == 0) {\n            cursor++\n        }\n        if (cursor == len) {\n            _signum = 0\n            _mag = ZERO._mag\n            return\n        }\n\n        numDigits = len - cursor\n        _signum = sign\n        // Pre-allocate array of expected size\n        val numWords: Int\n        if (len < 10) {\n            numWords = 1\n        } else {\n            val numBits = (numDigits * bitsPerDigit[10]).ushr(10) + 1\n            if (numBits + 31 >= 1L shl 32) {\n                reportOverflow()\n            }\n            numWords = (numBits + 31).toInt().ushr(5)\n        }\n        val magnitude = IntArray(numWords)\n\n        // Process first (potentially short) digit group\n        var firstGroupLen = numDigits % digitsPerInt[10]\n        if (firstGroupLen == 0)\n            firstGroupLen = digitsPerInt[10]\n        magnitude[numWords - 1] = parseInt(`val`, cursor, cursor + firstGroupLen)\n        cursor += firstGroupLen\n\n        // Process remaining digit groups\n        while (cursor < len) {\n            val groupVal = parseInt(`val`, cursor, cursor + digitsPerInt[10])\n            cursor += digitsPerInt[10]\n            destructiveMulAdd(\n                magnitude,\n                intRadix[10],\n                groupVal\n            )\n        }\n        _mag = trustedStripLeadingZeroInts(magnitude)\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    // Create an integer with the digits between the two indexes\n    // Assumes start < end. The result may be negative, but it\n    // is to be treated as an unsigned value.\n    private fun parseInt(source: CharArray, start: Int, end: Int): Int {\n        var result = source[start].toDigit(10)\n        if (result == -1)\n            throw NumberFormatException(source.concatToString())\n\n        for (index in (start + 1) until end) {\n            val nextVal = source[index].toDigit(10)\n            if (nextVal == -1)\n                throw NumberFormatException(source.concatToString())\n            result = 10 * result + nextVal\n        }\n\n        return result\n    }\n\n    /**\n     * Constructs a randomly generated BigInteger, uniformly distributed over\n     * the range 0 to (2<sup>`numBits`</sup> - 1), inclusive.\n     * The uniformity of the distribution assumes that a fair source of random\n     * bits is provided in `rnd`.  Note that this constructor always\n     * constructs a non-negative BigInteger.\n     *\n     * @param  numBits maximum bitLength of the new BigInteger.\n     * @param  rnd source of randomness to be used in computing the new\n     * BigInteger.\n     * @throws IllegalArgumentException `numBits` is negative.\n     * @see .bitLength\n     */\n    constructor(numBits: Int, rnd: Random) : this(1, randomBits(numBits, rnd)) {}\n\n    /**\n     * Constructs a randomly generated positive BigInteger that is probably\n     * prime, with the specified bitLength.\n     *\n     * @apiNote It is recommended that the [probablePrime][BigInteger.probablePrime]\n     * method be used in preference to this constructor unless there\n     * is a compelling need to specify a certainty.\n     *\n     * @param  bitLength bitLength of the returned BigInteger.\n     * @param  certainty a measure of the uncertainty that the caller is\n     * willing to tolerate.  The probability that the new BigInteger\n     * represents a prime number will exceed\n     * (1 - 1/2<sup>`certainty`</sup>).  The execution time of\n     * this constructor is proportional to the value of this parameter.\n     * @param  rnd source of random bits used to select candidates to be\n     * tested for primality.\n     * @throws ArithmeticException `bitLength < 2` or `bitLength` is too large.\n     * @see .bitLength\n     */\n    constructor(bitLength: Int, certainty: Int, rnd: Random) {\n        val prime: BigInteger\n\n        if (bitLength < 2)\n            throw ArithmeticException(\"bitLength < 2\")\n        prime = if (bitLength < SMALL_PRIME_THRESHOLD)\n            smallPrime(bitLength, certainty, rnd)\n        else\n            largePrime(bitLength, certainty, rnd)\n        _signum = 1\n        _mag = prime._mag\n    }\n\n    /**\n     * Returns the first integer greater than this `BigInteger` that\n     * is probably prime.  The probability that the number returned by this\n     * method is composite does not exceed 2<sup>-100</sup>. This method will\n     * never skip over a prime when searching: if it returns `p`, there\n     * is no prime `q` such that `this < q < p`.\n     *\n     * @return the first integer greater than this `BigInteger` that\n     * is probably prime.\n     * @throws ArithmeticException `this < 0` or `this` is too large.\n     * @since 1.5\n     */\n    @Suppress(\"UNREACHABLE_CODE\", \"UNUSED_VARIABLE\")\n    @JsName(\"nextProbablePrime\")\n    fun nextProbablePrime(): BigInteger {\n        if (this._signum < 0)\n            throw ArithmeticException(\"start < 0: $this\")\n\n        // Handle trivial cases\n        if (this._signum == 0 || this == ONE)\n            return TWO\n\n        var result = this.plus(ONE)\n\n        // Fastpath for small numbers\n        if (result.bitLength < SMALL_PRIME_THRESHOLD) {\n\n            // Ensure an odd number\n            if (!result.testBit(0))\n                result = result.plus(ONE)\n\n            while (true) {\n                // Do cheap \"pre-test\" if applicable\n                if (result.bitLength > 6) {\n                    val r = result.remainder(SMALL_PRIME_PRODUCT).toLong()\n                    if (r % 3 == 0L || r % 5 == 0L || r % 7 == 0L || r % 11 == 0L ||\n                        r % 13 == 0L || r % 17 == 0L || r % 19 == 0L || r % 23 == 0L ||\n                        r % 29 == 0L || r % 31 == 0L || r % 37 == 0L || r % 41 == 0L\n                    ) {\n                        result = result.plus(TWO)\n                        continue // Candidate is composite; try another\n                    }\n                }\n\n                // All candidates of bitLength 2 and 3 are prime by this point\n                if (result.bitLength < 4)\n                    return result\n\n                // The expensive test\n                if (result.primeToCertainty(DEFAULT_PRIME_CERTAINTY, null))\n                    return result\n\n                result = result.plus(TWO)\n            }\n        }\n\n        // Start at previous even number\n        if (result.testBit(0))\n            result = result.minus(ONE)\n\n        // Looking for the next large prime\n        val searchLen = getPrimeSearchLen(result.bitLength)\n\n        while (true) {\n            val searchSieve = BitSieve(result, searchLen)\n            val candidate = searchSieve.retrieve(\n                result,\n                DEFAULT_PRIME_CERTAINTY, null!!\n            )\n            if (candidate != null)\n                return candidate\n            result = result.plus(of((2 * searchLen).toLong()))\n        }\n    }\n\n    /**\n     * Returns `true` if this BigInteger is probably prime,\n     * `false` if it's definitely composite.\n     *\n     * This method assumes bitLength > 2.\n     *\n     * @param  certainty a measure of the uncertainty that the caller is\n     * willing to tolerate: if the call returns `true`\n     * the probability that this BigInteger is prime exceeds\n     * `(1 - 1/2<sup>certainty</sup>)`.  The execution time of\n     * this method is proportional to the value of this parameter.\n     * @return `true` if this BigInteger is probably prime,\n     * `false` if it's definitely composite.\n     */\n    internal fun primeToCertainty(certainty: Int, random: Random?): Boolean {\n        var rounds = 0\n        val n = (max(certainty, Int.MAX_VALUE - 1) + 1) / 2\n\n        // The relationship between the certainty and the number of rounds\n        // we perform is given in the draft standard ANSI X9.80, \"PRIME\n        // NUMBER GENERATION, PRIMALITY TESTING, AND PRIMALITY CERTIFICATES\".\n        val sizeInBits = this.bitLength\n        if (sizeInBits < 100) {\n            rounds = 50\n            rounds = if (n < rounds) n else rounds\n            return passesMillerRabin(rounds, random)\n        }\n\n        if (sizeInBits < 256) {\n            rounds = 27\n        } else if (sizeInBits < 512) {\n            rounds = 15\n        } else if (sizeInBits < 768) {\n            rounds = 8\n        } else if (sizeInBits < 1024) {\n            rounds = 4\n        } else {\n            rounds = 2\n        }\n        rounds = if (n < rounds) n else rounds\n\n        return passesMillerRabin(rounds, random) && passesLucasLehmer()\n    }\n\n    /**\n     * Returns true iff this BigInteger is a Lucas-Lehmer probable prime.\n     *\n     * The following assumptions are made:\n     * This BigInteger is a positive, odd number.\n     */\n    private fun passesLucasLehmer(): Boolean {\n        val thisPlusOne = this.plus(ONE)\n\n        // Step 1\n        var d = 5\n        while (jacobiSymbol(d, this) != -1) {\n            // 5, -7, 9, -11, ...\n            d = if (d < 0) d.absoluteValue + 2 else -(d + 2)\n        }\n\n        // Step 2\n        val u = lucasLehmerSequence(d, thisPlusOne, this)\n\n        // Step 3\n        return u.rem(this) == ZERO\n    }\n\n    /**\n     * Returns true iff this BigInteger passes the specified number of\n     * Miller-Rabin tests. This test is taken from the DSA spec (NIST FIPS\n     * 186-2).\n     *\n     * The following assumptions are made:\n     * This BigInteger is a positive, odd number greater than 2.\n     * iterations<=50.\n     */\n    private fun passesMillerRabin(iterations: Int, rnd: Random?): Boolean {\n        var rnd = rnd\n        // Find a and m such that m is odd and this == 1 + 2**a * m\n        val thisMinusOne = this.minus(ONE)\n        var m = thisMinusOne\n        val a = m.lowestSetBit\n        m = m.shr(a)\n\n        if (rnd == null)\n            rnd = Random.Default\n        // Do the tests\n        for (i in 0 until iterations) {\n            // Generate a uniform random on (1, this)\n            var b: BigInteger\n            do {\n                b = BigInteger(this.bitLength, rnd)\n            } while (b.compareTo(ONE) <= 0 || b.compareTo(this) >= 0)\n\n            var j = 0\n            var z = b.modPow(m, this)\n            while (!(j == 0 && z == ONE || z == thisMinusOne)) {\n                if (j > 0 && z == ONE || ++j == a)\n                    return false\n                z = z.modPow(TWO, this)\n            }\n        }\n        return true\n    }\n\n    /**\n     * This internal constructor differs from its public cousin\n     * with the arguments reversed in two ways: it assumes that its\n     * arguments are correct, and it doesn't copy the magnitude array.\n     */\n    internal constructor(magnitude: IntArray, signum: Int) {\n        this._signum = if (magnitude.size == 0) 0 else signum\n        this._mag = magnitude\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * This private constructor is for internal use and assumes that its\n     * arguments are correct.  The `magnitude` array is assumed to be\n     * unchanged for the duration of the constructor call.\n     */\n    private constructor(magnitude: ByteArray, signum: Int) {\n        this._signum = if (magnitude.size == 0) 0 else signum\n        this._mag = stripLeadingZeroBytes(magnitude, 0, magnitude.size)\n        if (_mag.size >= MAX_MAG_LENGTH) {\n            checkRange()\n        }\n    }\n\n    /**\n     * Throws an `ArithmeticException` if the `BigInteger` would be\n     * out of the supported range.\n     *\n     * @throws ArithmeticException if `this` exceeds the supported range.\n     */\n    private fun checkRange() {\n        if (_mag.size > MAX_MAG_LENGTH || _mag.size == MAX_MAG_LENGTH && _mag[0] < 0) {\n            reportOverflow()\n        }\n    }\n\n    /**\n     * Constructs a BigInteger with the specified value, which may not be zero.\n     */\n    private constructor(`val`: Long) {\n        var `val` = `val`\n        if (`val` < 0) {\n            `val` = -`val`\n            _signum = -1\n        } else {\n            _signum = 1\n        }\n\n        val highWord = `val`.ushr(32).toInt()\n        if (highWord == 0) {\n            _mag = IntArray(1)\n            _mag[0] = `val`.toInt()\n        } else {\n            _mag = IntArray(2)\n            _mag[0] = highWord\n            _mag[1] = `val`.toInt()\n        }\n    }\n\n    // Arithmetic Operations\n\n    /**\n     * Returns a BigInteger whose value is `(this + val)`.\n     *\n     * @param  val value to be added to this BigInteger.\n     * @return `this + val`\n     */\n    @JsName(\"plus\")\n    operator fun plus(`val`: BigInteger): BigInteger {\n        if (`val`._signum == 0)\n            return this\n        if (_signum == 0)\n            return `val`\n        if (`val`._signum == _signum)\n            return BigInteger(sum(_mag, `val`._mag), _signum)\n\n        val cmp = compareMagnitude(`val`)\n        if (cmp == 0)\n            return ZERO\n        var resultMag = if (cmp > 0)\n            subtract(_mag, `val`._mag)\n        else\n            subtract(`val`._mag, _mag)\n        resultMag = trustedStripLeadingZeroInts(resultMag)\n\n        return BigInteger(resultMag, if (cmp == _signum) 1 else -1)\n    }\n\n    /**\n     * Package private methods used by BigDecimal code to plus a BigInteger\n     * with a long. Assumes val is not equal to INFLATED.\n     */\n    internal fun plusLong(`val`: Long): BigInteger {\n        if (`val` == 0L)\n            return this\n        if (_signum == 0)\n            return of(`val`)\n        if (`val`.sign == _signum)\n            return BigInteger(sum(_mag, `val`.absoluteValue), _signum)\n        val cmp = compareMagnitude(`val`)\n        if (cmp == 0)\n            return ZERO\n        var resultMag = if (cmp > 0) subtract(\n            _mag,\n            `val`.absoluteValue\n        ) else subtract(`val`.absoluteValue, _mag)\n        resultMag = trustedStripLeadingZeroInts(resultMag)\n        return BigInteger(resultMag, if (cmp == _signum) 1 else -1)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this - val)`.\n     *\n     * @param  val value to be subtracted from this BigInteger.\n     * @return `this - val`\n     */\n    @JsName(\"minus\")\n    operator fun minus(`val`: BigInteger): BigInteger {\n        if (`val`._signum == 0)\n            return this\n        if (_signum == 0)\n            return `val`.unaryMinus()\n        if (`val`._signum != _signum)\n            return BigInteger(sum(_mag, `val`._mag), _signum)\n\n        val cmp = compareMagnitude(`val`)\n        if (cmp == 0)\n            return ZERO\n        var resultMag = if (cmp > 0)\n            subtract(_mag, `val`._mag)\n        else\n            subtract(`val`._mag, _mag)\n        resultMag = trustedStripLeadingZeroInts(resultMag)\n        return BigInteger(resultMag, if (cmp == _signum) 1 else -1)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this * val)`.\n     *\n     * @implNote An implementation may offer better algorithmic\n     * performance when `val == this`.\n     *\n     * @param  val value to be multiplied by this BigInteger.\n     * @return `this * val`\n     */\n    @JsName(\"times\")\n    operator fun times(`val`: BigInteger): BigInteger {\n        if (`val`._signum == 0 || _signum == 0)\n            return ZERO\n\n        val xlen = _mag.size\n\n        if (`val` === this && xlen > MULTIPLY_SQUARE_THRESHOLD) {\n            return square()\n        }\n\n        val ylen = `val`._mag.size\n\n        if (xlen < KARATSUBA_THRESHOLD || ylen < KARATSUBA_THRESHOLD) {\n            val resultSign = if (_signum == `val`._signum) 1 else -1\n            if (`val`._mag.size == 1) {\n                return multiplyByInt(_mag, `val`._mag[0], resultSign)\n            }\n            if (_mag.size == 1) {\n                return multiplyByInt(`val`._mag, _mag[0], resultSign)\n            }\n            var result = multiplyToLen(\n                _mag, xlen,\n                `val`._mag, ylen, null\n            )\n            result = trustedStripLeadingZeroInts(result)\n            return BigInteger(result, resultSign)\n        } else {\n            return if (xlen < TOOM_COOK_THRESHOLD && ylen < TOOM_COOK_THRESHOLD) {\n                multiplyKaratsuba(this, `val`)\n            } else {\n                multiplyToomCook3(this, `val`)\n            }\n        }\n    }\n\n    /**\n     * Package private methods used by BigDecimal code to timesLong a BigInteger\n     * with a long. Assumes v is not equal to INFLATED.\n     */\n    internal fun timesLong(v: Long): BigInteger {\n        var v = v\n        if (v == 0L || _signum == 0)\n            return ZERO\n        if (v == BigDecimal.INFLATED)\n            return times(of(v))\n        val rsign = if (v > 0) _signum else -_signum\n        if (v < 0)\n            v = -v\n        val dh = v.ushr(32)      // higher order bits\n        val dl = v and LONG_MASK // lower order bits\n\n        val xlen = _mag.size\n        val value = _mag\n        var rmag = if (dh == 0L) IntArray(xlen + 1) else IntArray(xlen + 2)\n        var carry: Long = 0\n        var rstart = rmag.size - 1\n        for (i in xlen - 1 downTo 0) {\n            val product = (value[i].toLong() and LONG_MASK) * dl + carry\n            rmag[rstart--] = product.toInt()\n            carry = product.ushr(32)\n        }\n        rmag[rstart] = carry.toInt()\n        if (dh != 0L) {\n            carry = 0\n            rstart = rmag.size - 2\n            for (i in xlen - 1 downTo 0) {\n                val product = (value[i].toLong()and LONG_MASK) * dh +\n                        (rmag[rstart].toLong()and LONG_MASK) + carry\n                rmag[rstart--] = product.toInt()\n                carry = product.ushr(32)\n            }\n            rmag[0] = carry.toInt()\n        }\n        if (carry == 0L)\n            rmag = rmag.copyOfRange(1, rmag.size)\n        return BigInteger(rmag, rsign)\n    }\n\n\n    /**\n     * Returns a slice of a BigInteger for use in Toom-Cook multiplication.\n     *\n     * @param lowerSize The size of the lower-order bit slices.\n     * @param upperSize The size of the higher-order bit slices.\n     * @param slice The index of which slice is requested, which must be a\n     * number from 0 to size-1. Slice 0 is the highest-order bits, and slice\n     * size-1 are the lowest-order bits. Slice 0 may be of different size than\n     * the other slices.\n     * @param fullsize The size of the larger integer array, used to align\n     * slices to the appropriate position when multiplying different-sized\n     * numbers.\n     */\n    private fun getToomSlice(\n        lowerSize: Int, upperSize: Int, slice: Int,\n        fullsize: Int\n    ): BigInteger {\n        var start: Int\n        val end: Int\n        val sliceSize: Int\n        val len: Int\n        val offset: Int\n\n        len = _mag.size\n        offset = fullsize - len\n\n        if (slice == 0) {\n            start = 0 - offset\n            end = upperSize - 1 - offset\n        } else {\n            start = upperSize + (slice - 1) * lowerSize - offset\n            end = start + lowerSize - 1\n        }\n\n        if (start < 0) {\n            start = 0\n        }\n        if (end < 0) {\n            return ZERO\n        }\n\n        sliceSize = end - start + 1\n\n        if (sliceSize <= 0) {\n            return ZERO\n        }\n\n        // While performing Toom-Cook, all slices are positive and\n        // the sign is adjusted when the final number is composed.\n        if (start == 0 && sliceSize >= len) {\n            return this.absoluteValue\n        }\n\n        val intSlice = IntArray(sliceSize)\n        arrayCopy(_mag, start, intSlice, 0, sliceSize)\n\n        return BigInteger(trustedStripLeadingZeroInts(intSlice), 1)\n    }\n\n    /**\n     * Does an exact division (that is, the remainder is known to be zero)\n     * of the specified number by 3.  This is used in Toom-Cook\n     * multiplication.  This is an efficient algorithm that runs in linear\n     * time.  If the argument is not exactly divisible by 3, results are\n     * undefined.  Note that this is expected to be called with positive\n     * arguments only.\n     */\n    private fun exactDivideBy3(): BigInteger {\n        val len = _mag.size\n        var result = IntArray(len)\n        var x: Long\n        var w: Long\n        var q: Long\n        var borrow: Long\n        borrow = 0L\n        for (i in len - 1 downTo 0) {\n            x = _mag[i].toLong()and LONG_MASK\n            w = x - borrow\n            if (borrow > x) {      // Did we make the number go negative?\n                borrow = 1L\n            } else {\n                borrow = 0L\n            }\n\n            // 0xAAAAAAAB is the modular inverse of 3 (rem 2^32).  Thus,\n            // the effect of this is to div by 3 (rem 2^32).\n            // This is much faster than division on most architectures.\n            q = w * 0xAAAAAAABL and LONG_MASK\n            result[i] = q.toInt()\n\n            // Now check the borrow. The second check can of course be\n            // eliminated if the first fails.\n            if (q >= 0x55555556L) {\n                borrow++\n                if (q >= 0xAAAAAAABL)\n                    borrow++\n            }\n        }\n        result = trustedStripLeadingZeroInts(result)\n        return BigInteger(result, _signum)\n    }\n\n    /**\n     * Returns a new BigInteger representing n lower ints of the number.\n     * This is used by Karatsuba multiplication and Karatsuba squaring.\n     */\n    private fun getLower(n: Int): BigInteger {\n        val len = _mag.size\n\n        if (len <= n) {\n            return absoluteValue\n        }\n\n        val lowerInts = IntArray(n)\n        arrayCopy(_mag, len - n, lowerInts, 0, n)\n\n        return BigInteger(trustedStripLeadingZeroInts(lowerInts), 1)\n    }\n\n    /**\n     * Returns a new BigInteger representing _mag.length-n upper\n     * ints of the number.  This is used by Karatsuba multiplication and\n     * Karatsuba squaring.\n     */\n    private fun getUpper(n: Int): BigInteger {\n        val len = _mag.size\n\n        if (len <= n) {\n            return ZERO\n        }\n\n        val upperLen = len - n\n        val upperInts = IntArray(upperLen)\n        arrayCopy(_mag, 0, upperInts, 0, upperLen)\n\n        return BigInteger(trustedStripLeadingZeroInts(upperInts), 1)\n    }\n\n    // Squaring\n\n    /**\n     * Returns a BigInteger whose value is `(this<sup>2</sup>)`.\n     *\n     * @return `this<sup>2</sup>`\n     */\n    private fun square(): BigInteger {\n        if (_signum == 0) {\n            return ZERO\n        }\n        val len = _mag.size\n\n        if (len < KARATSUBA_SQUARE_THRESHOLD) {\n            val z = squareToLen(_mag, len, null)\n            return BigInteger(trustedStripLeadingZeroInts(z), 1)\n        } else {\n            return if (len < TOOM_COOK_SQUARE_THRESHOLD) {\n                squareKaratsuba()\n            } else {\n                squareToomCook3()\n            }\n        }\n    }\n\n    /**\n     * Squares a BigInteger using the Karatsuba squaring algorithm.  It should\n     * be used when both numbers are larger than a certain threshold (found\n     * experimentally).  It is a recursive div-and-conquer algorithm that\n     * has better asymptotic performance than the algorithm used in\n     * squareToLen.\n     */\n    private fun squareKaratsuba(): BigInteger {\n        val half = (_mag.size + 1) / 2\n\n        val xl = getLower(half)\n        val xh = getUpper(half)\n\n        val xhs = xh.square()  // xhs = xh^2\n        val xls = xl.square()  // xls = xl^2\n\n        // xh^2 << 64  +  (((xl+xh)^2 - (xh^2 + xl^2)) << 32) + xl^2\n        return xhs.shl(half * 32).plus(xl.plus(xh).square().minus(xhs.plus(xls))).shl(half * 32).plus(xls)\n    }\n\n    /**\n     * Squares a BigInteger using the 3-way Toom-Cook squaring algorithm.  It\n     * should be used when both numbers are larger than a certain threshold\n     * (found experimentally).  It is a recursive div-and-conquer algorithm\n     * that has better asymptotic performance than the algorithm used in\n     * squareToLen or squareKaratsuba.\n     */\n    private fun squareToomCook3(): BigInteger {\n        val len = _mag.size\n\n        // k is the size (in ints) of the lower-order slices.\n        val k = (len + 2) / 3   // Equal to ceil(largest/3)\n\n        // r is the size (in ints) of the highest-order slice.\n        val r = len - 2 * k\n\n        // Obtain slices of the numbers. a2 is the most significant\n        // bits of the number, and a0 the least significant.\n        val a0: BigInteger\n        val a1: BigInteger\n        val a2: BigInteger\n        a2 = getToomSlice(k, r, 0, len)\n        a1 = getToomSlice(k, r, 1, len)\n        a0 = getToomSlice(k, r, 2, len)\n        val v0: BigInteger\n        val v1: BigInteger\n        val v2: BigInteger\n        val vm1: BigInteger\n        val vinf: BigInteger\n        var t1: BigInteger\n        var t2: BigInteger\n        var tm1: BigInteger\n        var da1: BigInteger\n\n        v0 = a0.square()\n        da1 = a2.plus(a0)\n        vm1 = da1.minus(a1).square()\n        da1 = da1.plus(a1)\n        v1 = da1.square()\n        vinf = a2.square()\n        v2 = da1.plus(a2).shl(1).minus(a0).square()\n\n        // The algorithm requires two divisions by 2 and one by 3.\n        // All divisions are known to be exact, that is, they do not produce\n        // remainders, and all results are positive.  The divisions by 2 are\n        // implemented as right shifts which are relatively efficient, leaving\n        // only a division by 3.\n        // The division by 3 is done by an optimized algorithm for this case.\n        t2 = v2.minus(vm1).exactDivideBy3()\n        tm1 = v1.minus(vm1).shr(1)\n        t1 = v1.minus(v0)\n        t2 = t2.minus(t1).shr(1)\n        t1 = t1.minus(tm1).minus(vinf)\n        t2 = t2.minus(vinf.shl(1))\n        tm1 = tm1.minus(t2)\n\n        // Number of bits to shift left.\n        val ss = k * 32\n\n        return vinf.shl(ss).plus(t2).shl(ss).plus(t1).shl(ss).plus(tm1).shl(ss).plus(v0)\n    }\n\n    // Division\n\n    /**\n     * Returns a BigInteger whose value is `(this / val)`.\n     *\n     * @param  val value by which this BigInteger is to be divided.\n     * @return `this / val`\n     * @throws ArithmeticException if `val` is zero.\n     */\n    @JsName(\"div\")\n    operator fun div(`val`: BigInteger): BigInteger {\n        return if (`val`._mag.size < BURNIKEL_ZIEGLER_THRESHOLD || _mag.size - `val`._mag.size < BURNIKEL_ZIEGLER_OFFSET) {\n            divideKnuth(`val`)\n        } else {\n            divideBurnikelZiegler(`val`)\n        }\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this / val)` using an O(n^2) algorithm from Knuth.\n     *\n     * @param  val value by which this BigInteger is to be divided.\n     * @return `this / val`\n     * @throws ArithmeticException if `val` is zero.\n     * @see MutableBigInteger.divideKnuth\n     */\n    private fun divideKnuth(`val`: BigInteger): BigInteger {\n        val q = MutableBigInteger()\n        val a = MutableBigInteger(this._mag)\n        val b = MutableBigInteger(`val`._mag)\n\n        a.divideKnuth(b, q, false)\n        return q.toBigInteger(this._signum * `val`._signum)\n    }\n\n    /**\n     * Returns an array of two BigIntegers containing `(this / val)`\n     * followed by `(this % val)`.\n     *\n     * @param  val value by which this BigInteger is to be divided, and the\n     * remainder computed.\n     * @return an array of two BigIntegers: the quotient `(this / val)`\n     * is the initial element, and the remainder `(this % val)`\n     * is the final element.\n     * @throws ArithmeticException if `val` is zero.\n     */\n    @JsName(\"divideAndRemainder\")\n    fun divideAndRemainder(`val`: BigInteger): Array<BigInteger> {\n        return if (`val`._mag.size < BURNIKEL_ZIEGLER_THRESHOLD || _mag.size - `val`._mag.size < BURNIKEL_ZIEGLER_OFFSET) {\n            divideAndRemainderKnuth(`val`)\n        } else {\n            divideAndRemainderBurnikelZiegler(`val`)\n        }\n    }\n\n    /** Long division  */\n    private fun divideAndRemainderKnuth(`val`: BigInteger): Array<BigInteger> {\n//        val result = arrayOfNulls<BigInteger>(2)\n        val q = MutableBigInteger()\n        val a = MutableBigInteger(this._mag)\n        val b = MutableBigInteger(`val`._mag)\n        val r = a.divideKnuth(b, q)\n        return arrayOf(\n            q.toBigInteger(if (this._signum == `val`._signum) 1 else -1),\n            r!!.toBigInteger(this._signum)\n        )\n//        result[0] = q.toBigInteger(if (this._signum == `val`._signum) 1 else -1)\n//        result[1] = r!!.toBigInteger(this._signum)\n//        return result\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this % val)`.\n     *\n     * @param  val value by which this BigInteger is to be divided, and the\n     * remainder computed.\n     * @return `this % val`\n     * @throws ArithmeticException if `val` is zero.\n     */\n    @JsName(\"reminder\")\n    fun remainder(`val`: BigInteger): BigInteger {\n        return if (`val`._mag.size < BURNIKEL_ZIEGLER_THRESHOLD || _mag.size - `val`._mag.size < BURNIKEL_ZIEGLER_OFFSET) {\n            remainderKnuth(`val`)\n        } else {\n            remainderBurnikelZiegler(`val`)\n        }\n    }\n\n    /** Long division  */\n    private fun remainderKnuth(`val`: BigInteger): BigInteger {\n        val q = MutableBigInteger()\n        val a = MutableBigInteger(this._mag)\n        val b = MutableBigInteger(`val`._mag)\n\n        return a.divideKnuth(b, q)!!.toBigInteger(this._signum)\n    }\n\n    /**\n     * Calculates `this / val` using the Burnikel-Ziegler algorithm.\n     * @param  val the divisor\n     * @return `this / val`\n     */\n    private fun divideBurnikelZiegler(`val`: BigInteger): BigInteger {\n        return divideAndRemainderBurnikelZiegler(`val`)[0]\n    }\n\n    /**\n     * Calculates `this % val` using the Burnikel-Ziegler algorithm.\n     * @param val the divisor\n     * @return `this % val`\n     */\n    private fun remainderBurnikelZiegler(`val`: BigInteger): BigInteger {\n        return divideAndRemainderBurnikelZiegler(`val`)[1]\n    }\n\n    /**\n     * Computes `this / val` and `this % val` using the\n     * Burnikel-Ziegler algorithm.\n     * @param val the divisor\n     * @return an array containing the quotient and remainder\n     */\n    private fun divideAndRemainderBurnikelZiegler(`val`: BigInteger): Array<BigInteger> {\n        val q = MutableBigInteger()\n        val r = MutableBigInteger(this)\n            .divideAndRemainderBurnikelZiegler(MutableBigInteger(`val`), q)\n        val qBigInt = if (q.isZero) ZERO else q.toBigInteger(_signum * `val`._signum)\n        val rBigInt = if (r.isZero) ZERO else r.toBigInteger(_signum)\n        return arrayOf(qBigInt, rBigInt)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this<sup>exponent</sup>)`.\n     * Note that `exponent` is an integer rather than a BigInteger.\n     *\n     * @param  exponent exponent to which this BigInteger is to be raised.\n     * @return `this<sup>exponent</sup>`\n     * @throws ArithmeticException `exponent` is negative.  (This would\n     * cause the operation to yield a non-integer value.)\n     */\n    @JsName(\"pow\")\n    infix fun pow(exponent: Int): BigInteger {\n        if (exponent < 0) {\n            throw ArithmeticException(\"Negative exponent\")\n        }\n        if (_signum == 0) {\n            return if (exponent == 0) ONE else this\n        }\n\n        var partToSquare = this.absoluteValue\n\n        // Factor out powers of two from the base, as the exponentiation of\n        // these can be done by left shifts only.\n        // The remaining part can then be exponentiated faster.  The\n        // powers of two will be multiplied back at the end.\n        val powersOfTwo = partToSquare.lowestSetBit\n        val bitsToShift = powersOfTwo.toLong() * exponent\n        if (bitsToShift > Int.MAX_VALUE) {\n            reportOverflow()\n        }\n\n        val remainingBits: Int\n\n        // Factor the powers of two out quickly by shifting right, if needed.\n        if (powersOfTwo > 0) {\n            partToSquare = partToSquare.shr(powersOfTwo)\n            remainingBits = partToSquare.bitLength\n            if (remainingBits == 1) {  // Nothing left but +/- 1?\n                return if (_signum < 0 && exponent and 1 == 1) {\n                    NEGATIVE_ONE.shl(powersOfTwo * exponent)\n                } else {\n                    ONE.shl(powersOfTwo * exponent)\n                }\n            }\n        } else {\n            remainingBits = partToSquare.bitLength\n            if (remainingBits == 1) { // Nothing left but +/- 1?\n                return if (_signum < 0 && exponent and 1 == 1) {\n                    NEGATIVE_ONE\n                } else {\n                    ONE\n                }\n            }\n        }\n\n        // This is a quick way to approximate the size of the result,\n        // similar to doing log2[n] * exponent.  This will give an upper bound\n        // of how big the result can be, and which algorithm to use.\n        val scaleFactor = remainingBits.toLong() * exponent\n\n        // Use slightly different algorithms for small and large operands.\n        // See if the result will safely fit into a long. (Largest 2^63-1)\n        if (partToSquare._mag.size == 1 && scaleFactor <= 62) {\n            // Small number algorithm.  Everything fits into a long.\n            val newSign = if (_signum < 0 && exponent and 1 == 1) -1 else 1\n            var result: Long = 1\n            var baseToPow2 = partToSquare._mag[0].toLong()and LONG_MASK\n\n            var workingExponent = exponent\n\n            // Perform exponentiation using repeated squaring trick\n            while (workingExponent != 0) {\n                if (workingExponent and 1 == 1) {\n                    result = result * baseToPow2\n                }\n\n                workingExponent = workingExponent ushr 1\n                if (workingExponent != 0) {\n                    baseToPow2 = baseToPow2 * baseToPow2\n                }\n            }\n\n            // Multiply back the powers of two (quickly, by shifting left)\n            return if (powersOfTwo > 0) {\n                if (bitsToShift + scaleFactor <= 62) { // Fits in long?\n                    of((result shl bitsToShift.toInt()) * newSign)\n                } else {\n                    of(result * newSign).shl(bitsToShift.toInt())\n                }\n            } else {\n                of(result * newSign)\n            }\n        } else {\n            // Large number algorithm.  This is basically identical to\n            // the algorithm above, but calls timesLong() and square()\n            // which may use more efficient algorithms for large numbers.\n            var answer = ONE\n\n            var workingExponent = exponent\n            // Perform exponentiation using repeated squaring trick\n            while (workingExponent != 0) {\n                if (workingExponent and 1 == 1) {\n                    answer = answer.times(partToSquare)\n                }\n\n                workingExponent = workingExponent ushr 1\n                if (workingExponent != 0) {\n                    partToSquare = partToSquare.square()\n                }\n            }\n            // Multiply back the (exponentiated) powers of two (quickly,\n            // by shifting left)\n            if (powersOfTwo > 0) {\n                answer = answer.shl(powersOfTwo * exponent)\n            }\n\n            return if (_signum < 0 && exponent and 1 == 1) {\n                answer.unaryMinus()\n            } else {\n                answer\n            }\n        }\n    }\n\n    /**\n     * Returns the integer square root of this BigInteger.  The integer square\n     * root of the corresponding mathematical integer `n` is the largest\n     * mathematical integer `s` such that `s*s <= n`.  It is equal\n     * to the value of `floor(sqrt(n))`, where `sqrt(n)` denotes the\n     * real square root of `n` treated as a real.  Note that the integer\n     * square root will be less than the real square root if the latter is not\n     * representable as an integral value.\n     *\n     * @return the integer square root of `this`\n     * @throws ArithmeticException if `this` is negative.  (The square\n     * root of a negative integer `val` is\n     * `(i * sqrt(-val))` where *i* is the\n     * *imaginary unit* and is equal to\n     * `sqrt(-1)`.)\n     * @since  9\n     */\n    @JsName(\"sqrt\")\n    fun sqrt(): BigInteger {\n        if (this._signum < 0) {\n            throw ArithmeticException(\"Negative BigInteger\")\n        }\n\n        return MutableBigInteger(this._mag).sqrt().toBigInteger()\n    }\n\n    /**\n     * Returns an array of two BigIntegers containing the integer square root\n     * `s` of `this` and its remainder `this - s*s`,\n     * respectively.\n     *\n     * @return an array of two BigIntegers with the integer square root at\n     * offset 0 and the remainder at offset 1\n     * @throws ArithmeticException if `this` is negative.  (The square\n     * root of a negative integer `val` is\n     * `(i * sqrt(-val))` where *i* is the\n     * *imaginary unit* and is equal to\n     * `sqrt(-1)`.)\n     * @see .sqrt\n     * @since  9\n     */\n    @JsName(\"sqrtAndRemainder\")\n    fun sqrtAndRemainder(): Array<BigInteger> {\n        val s = sqrt()\n        val r = this.minus(s.square())\n        require(r >= ZERO)\n        return arrayOf(s, r)\n    }\n\n    /**\n     * Returns a BigInteger whose value is the greatest common divisor of\n     * `absoluteValue(this)` and `absoluteValue(val)`.  Returns 0 if\n     * `this == 0 && val == 0`.\n     *\n     * @param  val value with which the GCD is to be computed.\n     * @return `GCD(absoluteValue(this), absoluteValue(val))`\n     */\n    @JsName(\"gcd\")\n    fun gcd(`val`: BigInteger): BigInteger {\n        if (`val`._signum == 0)\n            return this.absoluteValue\n        else if (this._signum == 0)\n            return `val`.absoluteValue\n\n        val a = MutableBigInteger(this)\n        val b = MutableBigInteger(`val`)\n\n        val result = a.hybridGCD(b)\n\n        return result.toBigInteger(1)\n    }\n\n    /**\n     * Returns a BigInteger whose value is the absolute value of this\n     * BigInteger.\n     *\n     * @return `absoluteValue(this)`\n     */\n    val absoluteValue: BigInteger\n        get() {\n            return if (_signum >= 0) this else this.unaryMinus()\n        }\n\n    /**\n     * Returns a BigInteger whose value is `(-this)`.\n     *\n     * @return `-this`\n     */\n    @JsName(\"unaryMinus\")\n    operator fun unaryMinus(): BigInteger {\n        return BigInteger(this._mag, -this._signum)\n    }\n\n    @JsName(\"unaryPlus\")\n    operator fun unaryPlus(): BigInteger {\n        return this\n    }\n\n    /**\n     * Returns the _signum function of this BigInteger.\n     *\n     * @return -1, 0 or 1 as the value of this BigInteger is negative, zero or\n     * positive.\n     */\n    val signum: Int\n        get() {\n            return this._signum\n        }\n\n    // Modular Arithmetic Operations\n\n    /**\n     * Returns a BigInteger whose value is `(this rem m`).  This method\n     * differs from `remainder` in that it always returns a\n     * *non-negative* BigInteger.\n     *\n     * @param  m the modulus.\n     * @return `this rem m`\n     * @throws ArithmeticException `m`  0\n     * @see .remainder\n     */\n    @JsName(\"rem\")\n    operator fun rem(m: BigInteger): BigInteger {\n        if (m._signum <= 0)\n            throw ArithmeticException(\"BigInteger: modulus not positive\")\n\n        val result = this.remainder(m)\n        return if (result._signum >= 0) result else result.plus(m)\n    }\n\n    /**\n     * Returns a BigInteger whose value is\n     * `(this<sup>exponent</sup> rem m)`.  (Unlike `pow`, this\n     * method permits negative exponents.)\n     *\n     * @param  exponent the exponent.\n     * @param  m the modulus.\n     * @return `this<sup>exponent</sup> rem m`\n     * @throws ArithmeticException `m`  0 or the exponent is\n     * negative and this BigInteger is not *relatively\n     * prime* to `m`.\n     * @see .modInverse\n     */\n    @JsName(\"modPow\")\n    fun modPow(exponent: BigInteger, m: BigInteger): BigInteger {\n        var exponent = exponent\n        if (m._signum <= 0)\n            throw ArithmeticException(\"BigInteger: modulus not positive\")\n\n        // Trivial cases\n        if (exponent._signum == 0)\n            return if (m == ONE) ZERO else ONE\n\n        if (this == ONE)\n            return if (m == ONE) ZERO else ONE\n\n        if (this == ZERO && exponent._signum >= 0)\n            return ZERO\n\n        if (this == negConst[1] && !exponent.testBit(0))\n            return if (m == ONE) ZERO else ONE\n\n        val invertResult: Boolean = exponent._signum < 0\n        if (invertResult)\n            exponent = exponent.unaryMinus()\n\n        val base = if (this._signum < 0 || this >= m)\n            this.rem(m)\n        else\n            this\n        val result: BigInteger\n        if (m.testBit(0)) { // odd modulus\n            result = base.oddModPow(exponent, m)\n        } else {\n            /*\n             * Even modulus.  Tear it into an \"odd part\" (m1) and power of two\n             * (m2), exponentiate rem m1, manually exponentiate rem m2, and\n             * use Chinese Remainder Theorem to combine results.\n             */\n\n            // Tear m apart into odd part (m1) and power of 2 (m2)\n            val p = m.lowestSetBit   // Max pow of 2 that divides m\n\n            val m1 = m.shr(p)  // m/2**p\n            val m2 = ONE.shl(p) // 2**p\n\n            // Calculate new base from m1\n            val base2 = if (this._signum < 0 || this.compareTo(m1) >= 0)\n                this.rem(m1)\n            else\n                this\n\n            // Caculate (base ** exponent) rem m1.\n            val a1 = if (m1 == ONE)\n                ZERO\n            else\n                base2.oddModPow(exponent, m1)\n\n            // Calculate (this ** exponent) rem m2\n            val a2 = base.modPow2(exponent, p)\n\n            // Combine results using Chinese Remainder Theorem\n            val y1 = m2.modInverse(m1)\n            val y2 = m1.modInverse(m2)\n\n            if (m._mag.size < MAX_MAG_LENGTH / 2) {\n                result = a1.times(m2).times(y1).plus(a2.times(m1).times(y2)).rem(m)\n            } else {\n                val t1 = MutableBigInteger()\n                MutableBigInteger(a1.times(m2)).multiply(MutableBigInteger(y1), t1)\n                val t2 = MutableBigInteger()\n                MutableBigInteger(a2.times(m1)).multiply(MutableBigInteger(y2), t2)\n                t1.add(t2)\n                val q = MutableBigInteger()\n                result = t1.divide(MutableBigInteger(m), q)!!.toBigInteger()\n            }\n        }\n\n        return if (invertResult) result.modInverse(m) else result\n    }\n\n    /**\n     * Returns a BigInteger whose value is x to the power of y rem z.\n     * Assumes: z is odd && x < z.\n     */\n    private fun oddModPow(y: BigInteger, z: BigInteger): BigInteger {\n        /*\n         * The algorithm is adapted from Colin Plumb's C library.\n         *\n         * The window algorithm:\n         * The idea is to keep a running product of b1 = n^(high-order bits of exp)\n         * and then keep appending exponent bits to it.  The following patterns\n         * apply to a 3-bit window (k = 3):\n         * To append   0: square\n         * To append   1: square, timesLong by n^1\n         * To append  10: square, timesLong by n^1, square\n         * To append  11: square, square, timesLong by n^3\n         * To append 100: square, timesLong by n^1, square, square\n         * To append 101: square, square, square, timesLong by n^5\n         * To append 110: square, square, timesLong by n^3, square\n         * To append 111: square, square, square, timesLong by n^7\n         *\n         * Since each pattern involves only one timesLong, the longer the pattern\n         * the better, except that a 0 (no multiplies) can be appended directly.\n         * We precompute a table of odd powers of n, up to 2^k, and can then\n         * timesLong k bits of exponent at a time.  Actually, assuming random\n         * exponents, there is on average one zero bit between needs to\n         * timesLong (1/2 of the time there's none, 1/4 of the time there's 1,\n         * 1/8 of the time, there's 2, 1/32 of the time, there's 3, etc.), so\n         * you have to do one timesLong per k+1 bits of exponent.\n         *\n         * The loop walks down the exponent, squaring the result buffer as\n         * it goes.  There is a wbits+1 bit lookahead buffer, buf, that is\n         * filled with the upcoming exponent bits.  (What is read after the\n         * end of the exponent is unimportant, but it is filled with zero here.)\n         * When the most-significant bit of this buffer becomes set, i.e.\n         * (buf & tblmask) != 0, we have to decide what pattern to timesLong\n         * by, and when to do it.  We decide, remember to do it in future\n         * after a suitable number of squarings have passed (e.g. a pattern\n         * of \"100\" in the buffer requires that we timesLong by n^1 immediately;\n         * a pattern of \"110\" calls for multiplying by n^3 after one more\n         * squaring), clear the buffer, and continue.\n         *\n         * When we start, there is one more optimization: the result buffer\n         * is implcitly one, so squaring it or multiplying by it can be\n         * optimized away.  Further, if we start with a pattern like \"100\"\n         * in the lookahead window, rather than placing n into the buffer\n         * and then starting to square it, we have already computed n^2\n         * to compute the odd-powers table, so we can place that into\n         * the buffer and save a squaring.\n         *\n         * This means that if you have a k-bit window, to compute n^z,\n         * where z is the high k bits of the exponent, 1/2 of the time\n         * it requires no squarings.  1/4 of the time, it requires 1\n         * squaring, ... 1/2^(k-1) of the time, it reqires k-2 squarings.\n         * And the remaining 1/2^(k-1) of the time, the top k bits are a\n         * 1 followed by k-1 0 bits, so it again only requires k-2\n         * squarings, not k-1.  The average of these is 1.  Add that\n         * to the one squaring we have to do to compute the table,\n         * and you'll see that a k-bit window saves k-2 squarings\n         * as well as reducing the multiplies.  (It actually doesn't\n         * hurt in the case k = 1, either.)\n         */\n        // Special case for exponent of one\n        if (y == ONE)\n            return this\n\n        // Special case for base of zero\n        if (_signum == 0)\n            return ZERO\n\n        val base = _mag.cloneArray()\n        val exp = y._mag\n        var mod = z._mag\n        var modLen = mod.size\n\n        // Make modLen even. It is conventional to use a cryptographic\n        // modulus that is 512, 768, 1024, or 2048 bits, so this code\n        // will not normally be executed. However, it is necessary for\n        // the correct functioning of the HotSpot intrinsics.\n        if (modLen and 1 != 0) {\n            val x = IntArray(modLen + 1)\n            arrayCopy(mod, 0, x, 1, modLen)\n            mod = x\n            modLen++\n        }\n\n        // Select an appropriate window size\n        var wbits = 0\n        var ebits = bitLength(exp, exp.size)\n        // if exponent is 65537 (0x10001), use minimum window size\n        if (ebits != 17 || exp[0] != 65537) {\n            while (ebits > bnExpModThreshTable[wbits]) {\n                wbits++\n            }\n        }\n\n        // Calculate appropriate table size\n        val tblmask = 1 shl wbits\n\n        // Allocate table for precomputed odd powers of base in Montgomery form\n        val table = (0 until tblmask).map { IntArray(modLen) } .toTypedArray()\n\n        // Compute the modular inverse of the least significant 64-bit\n        // digit of the modulus\n        val n0 = (mod[modLen - 1].toLong()and LONG_MASK) + (mod[modLen - 2].toLong()and LONG_MASK shl 32)\n        val inv = -MutableBigInteger.inverseMod64(n0)\n\n        // Convert base to Montgomery form\n        var a = leftShift(base, base.size, modLen shl 5)\n\n        val q = MutableBigInteger()\n        val a2 = MutableBigInteger(a)\n        val b2 = MutableBigInteger(mod)\n        b2.normalize() // MutableBigInteger.div() assumes that its\n        // divisor is in normal form.\n\n        val r = a2.divide(b2, q)\n        table[0] = r!!.toIntArray()\n\n        // Pad table[0] with leading zeros so its length is at least modLen\n        if (table[0].size < modLen) {\n            val offset = modLen - table[0].size\n            val t2 = IntArray(modLen)\n            arrayCopy(table[0], 0, t2, offset, table[0].size)\n            table[0] = t2\n        }\n\n        // Set b to the square of the base\n        var b = montgomerySquare(table[0], mod, modLen, inv, null)\n\n        // Set t to high half of b\n        var t = b.copyOf(modLen)\n\n        // Fill in the table with odd powers of the base\n        for (i in 1 until tblmask) {\n            table[i] = montgomeryMultiply(t, table[i - 1], mod, modLen, inv, null)\n        }\n\n        // Pre load the window that slides over the exponent\n        var bitpos = 1 shl (ebits - 1 and 32 - 1)\n\n        var buf = 0\n        var elen = exp.size\n        var eIndex = 0\n        for (i in 0..wbits) {\n            buf = buf shl 1 or if (exp[eIndex] and bitpos != 0) 1 else 0\n            bitpos = bitpos ushr 1\n            if (bitpos == 0) {\n                eIndex++\n                bitpos = 1 shl 32 - 1\n                elen--\n            }\n        }\n\n        var multpos = ebits\n\n        // The first iteration, which is hoisted out of the main loop\n        ebits--\n        var isone = true\n\n        multpos = ebits - wbits\n        while (buf and 1 == 0) {\n            buf = buf ushr 1\n            multpos++\n        }\n\n        var mult = table[buf.ushr(1)]\n\n        buf = 0\n        if (multpos == ebits)\n            isone = false\n\n        // The main loop\n        while (true) {\n            ebits--\n            // Advance the window\n            buf = buf shl 1\n\n            if (elen != 0) {\n                buf = buf or if (exp[eIndex] and bitpos != 0) 1 else 0\n                bitpos = bitpos ushr 1\n                if (bitpos == 0) {\n                    eIndex++\n                    bitpos = 1 shl 32 - 1\n                    elen--\n                }\n            }\n\n            // Examine the window for pending multiplies\n            if (buf and tblmask != 0) {\n                multpos = ebits - wbits\n                while (buf and 1 == 0) {\n                    buf = buf ushr 1\n                    multpos++\n                }\n                mult = table[buf.ushr(1)]\n                buf = 0\n            }\n\n            // Perform timesLong\n            if (ebits == multpos) {\n                if (isone) {\n                    b = mult.cloneArray()\n                    isone = false\n                } else {\n                    t = b\n                    a = montgomeryMultiply(t, mult, mod, modLen, inv, a)\n                    t = a\n                    a = b\n                    b = t\n                }\n            }\n\n            // Check if done\n            if (ebits == 0)\n                break\n\n            // Square the input\n            if (!isone) {\n                t = b\n                a = montgomerySquare(t, mod, modLen, inv, a)\n                t = a\n                a = b\n                b = t\n            }\n        }\n\n        // Convert result out of Montgomery form and return\n        var t2 = IntArray(2 * modLen)\n        arrayCopy(b, 0, t2, modLen, modLen)\n\n        b = montReduce(t2, mod, modLen, inv.toInt())\n\n        t2 = b.copyOf(modLen)\n\n        return BigInteger(1, t2)\n    }\n\n    /**\n     * Returns a BigInteger whose value is (this ** exponent) rem (2**p)\n     */\n    private fun modPow2(exponent: BigInteger, p: Int): BigInteger {\n        /*\n         * Perform exponentiation using repeated squaring trick, chopping off\n         * high order bits as indicated by modulus.\n         */\n        var result = ONE\n        var baseToPow2 = this.mod2(p)\n        var expOffset = 0\n\n        var limit = exponent.bitLength\n\n        if (this.testBit(0))\n            limit = if (p - 1 < limit) p - 1 else limit\n\n        while (expOffset < limit) {\n            if (exponent.testBit(expOffset))\n                result = result.times(baseToPow2).mod2(p)\n            expOffset++\n            if (expOffset < limit)\n                baseToPow2 = baseToPow2.square().mod2(p)\n        }\n\n        return result\n    }\n\n    /**\n     * Returns a BigInteger whose value is this rem(2**p).\n     * Assumes that this `BigInteger >= 0` and `p > 0`.\n     */\n    private fun mod2(p: Int): BigInteger {\n        if (bitLength <= p)\n            return this\n\n        // Copy remaining ints of _mag\n        val numInts = (p + 31).ushr(5)\n        val mag = IntArray(numInts)\n        arrayCopy(this._mag, this._mag.size - numInts, mag, 0, numInts)\n\n        // Mask out any excess bits\n        val excessBits = (numInts shl 5) - p\n        mag[0] = mag[0] and ((1L shl 32 - excessBits) - 1).toInt()\n\n        return if (mag[0] == 0) BigInteger(1, mag) else BigInteger(mag, 1)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this`<sup>-1</sup> `rem m)`.\n     *\n     * @param  m the modulus.\n     * @return `this`<sup>-1</sup> `rem m`.\n     * @throws ArithmeticException `m`  0, or this BigInteger\n     * has no multiplicative inverse rem m (that is, this BigInteger\n     * is not *relatively prime* to m).\n     */\n    @JsName(\"modInverse\")\n    fun modInverse(m: BigInteger): BigInteger {\n        if (m._signum != 1)\n            throw ArithmeticException(\"BigInteger: modulus not positive\")\n\n        if (m == ONE)\n            return ZERO\n\n        // Calculate (this rem m)\n        var modVal = this\n        if (_signum < 0 || this.compareMagnitude(m) >= 0)\n            modVal = this.rem(m)\n\n        if (modVal == ONE)\n            return ONE\n\n        val a = MutableBigInteger(modVal)\n        val b = MutableBigInteger(m)\n\n        val result = a.mutableModInverse(b)\n        return result!!.toBigInteger(1)\n    }\n\n    // Shift Operations\n\n    /**\n     * Returns a BigInteger whose value is `(this << n)`.\n     * The shift distance, `n`, may be negative, in which case\n     * this method performs a right shift.\n     * (Computes `floor(this * 2<sup>n</sup>)`.)\n     *\n     * @param  n shift distance, in bits.\n     * @return `this << n`\n     * @see .shr\n     */\n    @JsName(\"shl\")\n    infix fun shl(n: Int): BigInteger {\n        if (_signum == 0)\n            return ZERO\n        return if (n > 0) {\n            BigInteger(shl(_mag, n), _signum)\n        } else if (n == 0) {\n            this\n        } else {\n            // Possible int overflow in (-n) is not a trouble,\n            // because shiftRightImpl considers its argument unsigned\n            shiftRightImpl(-n)\n        }\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this >> n)`.  Sign\n     * extension is performed.  The shift distance, `n`, may be\n     * negative, in which case this method performs a left shift.\n     * (Computes `floor(this / 2<sup>n</sup>)`.)\n     *\n     * @param  n shift distance, in bits.\n     * @return `this >> n`\n     * @see .shl\n     */\n    @JsName(\"shr\")\n    infix fun shr(n: Int): BigInteger {\n        if (_signum == 0)\n            return ZERO\n        return if (n > 0) {\n            shiftRightImpl(n)\n        } else if (n == 0) {\n            this\n        } else {\n            // Possible int overflow in {@code -n} is not a trouble,\n            // because shl considers its argument unsigned\n            BigInteger(shl(_mag, -n), _signum)\n        }\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this >> n)`. The shift\n     * distance, `n`, is considered unsigned.\n     * (Computes `floor(this * 2<sup>-n</sup>)`.)\n     *\n     * @param  n unsigned shift distance, in bits.\n     * @return `this >> n`\n     */\n    private fun shiftRightImpl(n: Int): BigInteger {\n        val nInts = n.ushr(5)\n        val nBits = n and 0x1f\n        val magLen = _mag.size\n        var newMag: IntArray? = null\n\n        // Special case: entire contents shifted off the end\n        if (nInts >= magLen)\n            return if (_signum >= 0) ZERO else (negConst[1] ?: throw IllegalStateException())\n\n        if (nBits == 0) {\n            val newMagLen = magLen - nInts\n            newMag = _mag.copyOf(newMagLen)\n        } else {\n            var i = 0\n            val highBits = _mag[0].ushr(nBits)\n            if (highBits != 0) {\n                newMag = IntArray(magLen - nInts)\n                newMag[i++] = highBits\n            } else {\n                newMag = IntArray(magLen - nInts - 1)\n            }\n\n            val nBits2 = 32 - nBits\n            var j = 0\n            while (j < magLen - nInts - 1)\n                newMag[i++] = _mag[j++] shl nBits2 or _mag[j].ushr(nBits)\n        }\n\n        if (_signum < 0) {\n            // Find out whether any one-bits were shifted off the end.\n            var onesLost = false\n            var i = magLen - 1\n            val j = magLen - nInts\n            while (i >= j && !onesLost) {\n                onesLost = _mag[i] != 0\n                i--\n            }\n            if (!onesLost && nBits != 0)\n                onesLost = _mag[magLen - nInts - 1] shl 32 - nBits != 0\n\n            if (onesLost)\n                newMag = javaIncrement(newMag)\n        }\n\n        return BigInteger(newMag, _signum)\n    }\n\n    private fun javaIncrement(`val`: IntArray): IntArray {\n        var result = `val`\n        var lastSum = 0\n        var i = result.size - 1\n        while (i >= 0 && lastSum == 0) {\n            lastSum = (result[i]++)\n            i--\n        }\n        if (lastSum == 0) {\n            result = IntArray(result.size + 1)\n            result[0] = 1\n        }\n        return result\n    }\n\n    // Bitwise Operations\n\n    /**\n     * Returns a BigInteger whose value is `(this & val)`.  (This\n     * method returns a negative BigInteger if and only if this and val are\n     * both negative.)\n     *\n     * @param val value to be AND'ed with this BigInteger.\n     * @return `this & val`\n     */\n    @JsName(\"and\")\n    fun and(`val`: BigInteger): BigInteger {\n        val result = IntArray(max(intLength, `val`.intLength))\n        for (i in result.indices)\n            result[i] = getInt(result.size - i - 1) and `val`.getInt(result.size - i - 1)\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this | val)`.  (This method\n     * returns a negative BigInteger if and only if either this or val is\n     * negative.)\n     *\n     * @param val value to be OR'ed with this BigInteger.\n     * @return `this | val`\n     */\n    @JsName(\"or\")\n    fun or(`val`: BigInteger): BigInteger {\n        val result = IntArray(max(intLength, `val`.intLength))\n        for (i in result.indices)\n            result[i] = getInt(result.size - i - 1) or `val`.getInt(result.size - i - 1)\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this ^ val)`.  (This method\n     * returns a negative BigInteger if and only if exactly one of this and\n     * val are negative.)\n     *\n     * @param val value to be XOR'ed with this BigInteger.\n     * @return `this ^ val`\n     */\n    @JsName(\"xor\")\n    fun xor(`val`: BigInteger): BigInteger {\n        val result = IntArray(max(intLength, `val`.intLength))\n        for (i in result.indices)\n            result[i] = getInt(result.size - i - 1) xor `val`.getInt(result.size - i - 1)\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(~this)`.  (This method\n     * returns a negative value if and only if this BigInteger is\n     * non-negative.)\n     *\n     * @return `~this`\n     */\n    @JsName(\"not\")\n    operator fun not(): BigInteger {\n        val result = IntArray(intLength)\n        for (i in result.indices)\n            result[i] = getInt(result.size - i - 1).inv()\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is `(this & ~val)`.  This\n     * method, which is equivalent to `and(val.not())`, is provided as\n     * a convenience for masking operations.  (This method returns a negative\n     * BigInteger if and only if `this` is negative and `val` is\n     * positive.)\n     *\n     * @param val value to be complemented and AND'ed with this BigInteger.\n     * @return `this & ~val`\n     */\n    @JsName(\"andNot\")\n    fun andNot(`val`: BigInteger): BigInteger {\n        val result = IntArray(max(intLength, `val`.intLength))\n        for (i in result.indices)\n            result[i] = getInt(result.size - i - 1) and `val`.getInt(result.size - i - 1).inv()\n\n        return of(result)\n    }\n\n\n    // Single Bit Operations\n\n    /**\n     * Returns `true` if and only if the designated bit is set.\n     * (Computes `((this & (1<<n)) != 0)`.)\n     *\n     * @param  n index of bit to test.\n     * @return `true` if and only if the designated bit is set.\n     * @throws ArithmeticException `n` is negative.\n     */\n    @JsName(\"testBit\")\n    fun testBit(n: Int): Boolean {\n        if (n < 0)\n            throw ArithmeticException(\"Negative bit address\")\n\n        return getInt(n.ushr(5)) and (1 shl (n and 31)) != 0\n    }\n\n    @JsName(\"get\")\n    operator fun get(n: Int): Boolean {\n        return testBit(n)\n    }\n\n    @JsName(\"set\")\n    operator fun set(n: Int, b: Boolean) {\n        if (b) setBit(n) else clearBit(n)\n    }\n\n    /**\n     * Returns a BigInteger whose value is equivalent to this BigInteger\n     * with the designated bit set.  (Computes `(this | (1<<n))`.)\n     *\n     * @param  n index of bit to set.\n     * @return `this | (1<<n)`\n     * @throws ArithmeticException `n` is negative.\n     */\n    @JsName(\"setBit\")\n    fun setBit(n: Int): BigInteger {\n        if (n < 0)\n            throw ArithmeticException(\"Negative bit address\")\n\n        val intNum = n.ushr(5)\n        val result = IntArray(max(intLength, intNum + 2))\n\n        for (i in result.indices)\n            result[result.size - i - 1] = getInt(i)\n\n        result[result.size - intNum - 1] = result[result.size - intNum - 1] or (1 shl (n and 31))\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is equivalent to this BigInteger\n     * with the designated bit cleared.\n     * (Computes `(this & ~(1<<n))`.)\n     *\n     * @param  n index of bit to clear.\n     * @return `this & ~(1<<n)`\n     * @throws ArithmeticException `n` is negative.\n     */\n    @JsName(\"clearBit\")\n    fun clearBit(n: Int): BigInteger {\n        if (n < 0)\n            throw ArithmeticException(\"Negative bit address\")\n\n        val intNum = n.ushr(5)\n        val result = IntArray(max(intLength, (n + 1).ushr(5) + 1))\n\n        for (i in result.indices)\n            result[result.size - i - 1] = getInt(i)\n\n        result[result.size - intNum - 1] = result[result.size - intNum - 1] and (1 shl (n and 31)).inv()\n\n        return of(result)\n    }\n\n    /**\n     * Returns a BigInteger whose value is equivalent to this BigInteger\n     * with the designated bit flipped.\n     * (Computes `(this ^ (1<<n))`.)\n     *\n     * @param  n index of bit to flip.\n     * @return `this ^ (1<<n)`\n     * @throws ArithmeticException `n` is negative.\n     */\n    @JsName(\"flipBit\")\n    fun flipBit(n: Int): BigInteger {\n        if (n < 0)\n            throw ArithmeticException(\"Negative bit address\")\n\n        val intNum = n.ushr(5)\n        val result = IntArray(max(intLength, intNum + 2))\n\n        for (i in result.indices)\n            result[result.size - i - 1] = getInt(i)\n\n        result[result.size - intNum - 1] = result[result.size - intNum - 1] xor (1 shl (n and 31))\n\n        return of(result)\n    }\n\n\n    // Miscellaneous Bit Operations\n\n    /**\n     * Returns the number of bits in the minimal two's-complement\n     * representation of this BigInteger, *excluding* a sign bit.\n     * For positive BigIntegers, this is equivalent to the number of bits in\n     * the ordinary binary representation.  (Computes\n     * `(ceil(log2(this < 0 ? -this : this+1)))`.)\n     *\n     * @return number of bits in the minimal two's-complement\n     * representation of this BigInteger, *excluding* a sign bit.\n     */\n    val bitLength: Int\n        get() {\n            var n = _bitLengthPlusOne - 1\n            if (n == -1) { // bitLength not initialized yet\n                val m = _mag\n                val len = m.size\n                if (len == 0) {\n                    n = 0 // offset by one to initialize\n                } else {\n                    // Calculate the bit length of the magnitude\n                    val magBitLength = (len - 1 shl 5) + bitLengthForInt(_mag[0])\n                    if (_signum < 0) {\n                        // Check if magnitude is a power of two\n                        var pow2 = _mag[0].bitCount() == 1\n                        var i = 1\n                        while (i < len && pow2) {\n                            pow2 = _mag[i] == 0\n                            i++\n                        }\n\n                        n = if (pow2) magBitLength - 1 else magBitLength\n                    } else {\n                        n = magBitLength\n                    }\n                }\n                _bitLengthPlusOne = n + 1\n            }\n            return n\n        }\n\n    /**\n     * Returns the number of bits in the two's complement representation\n     * of this BigInteger that differ from its sign bit.  This method is\n     * useful when implementing bit-vector style sets atop BigIntegers.\n     *\n     * @return number of bits in the two's complement representation\n     * of this BigInteger that differ from its sign bit.\n     */\n    val bitCount: Int\n        get() {\n            var bc = _bitCountPlusOne - 1\n            if (bc == -1) {  // bitCount not initialized yet\n                bc = 0      // offset by one to initialize\n                // Count the bits in the magnitude\n                for (i in _mag.indices)\n                    bc += _mag[i].bitCount()\n                if (_signum < 0) {\n                    // Count the trailing zeros in the magnitude\n                    var magTrailingZeroCount = 0\n                    var j: Int\n                    j = _mag.size - 1\n                    while (_mag[j] == 0) {\n                        magTrailingZeroCount += 32\n                        j--\n                    }\n                    magTrailingZeroCount += _mag[j].numberOfTrailingZeros()\n                    bc += magTrailingZeroCount - 1\n                }\n                _bitCountPlusOne = bc + 1\n            }\n            return bc\n        }\n\n    // Primality Testing\n\n    /**\n     * Returns `true` if this BigInteger is probably prime,\n     * `false` if it's definitely composite.  If\n     * `certainty` is  0, `true` is\n     * returned.\n     *\n     * @param  certainty a measure of the uncertainty that the caller is\n     * willing to tolerate: if the call returns `true`\n     * the probability that this BigInteger is prime exceeds\n     * (1 - 1/2<sup>`certainty`</sup>).  The execution time of\n     * this method is proportional to the value of this parameter.\n     * @return `true` if this BigInteger is probably prime,\n     * `false` if it's definitely composite.\n     */\n    @JsName(\"isProbablePrime\")\n    fun isProbablePrime(certainty: Int): Boolean {\n        if (certainty <= 0)\n            return true\n        val w = this.absoluteValue\n        if (w == TWO)\n            return true\n        return if (!w.testBit(0) || w == ONE) false else w.primeToCertainty(certainty, null)\n\n    }\n\n    // Comparison Operations\n\n    /**\n     * Compares this BigInteger with the specified BigInteger.  This\n     * method is provided in preference to individual methods for each\n     * of the six boolean comparison operators (&lt;, ==,\n     * &gt;, &gt;=, !=, &lt;=).  The suggested\n     * idiom for performing these comparisons is: `(x.compareTo(y)` &lt;*op*&gt; `0)`, where\n     * &lt;*op*&gt; is one of the six comparison operators.\n     *\n     * @param  other BigInteger to which this BigInteger is to be compared.\n     * @return -1, 0 or 1 as this BigInteger is numerically less than, equal\n     * to, or greater than `val`.\n     */\n    override fun compareTo(other: BigInteger): Int {\n        if (_signum == other._signum) {\n            when (_signum) {\n                1 -> return compareMagnitude(other)\n                -1 -> return other.compareMagnitude(this)\n                else -> return 0\n            }\n        }\n        return if (_signum > other._signum) 1 else -1\n    }\n\n    /**\n     * Compares the magnitude array of this BigInteger with the specified\n     * BigInteger's. This is the version of compareTo ignoring sign.\n     *\n     * @param val BigInteger whose magnitude array to be compared.\n     * @return -1, 0 or 1 as this magnitude array is less than, equal to or\n     * greater than the magnitude aray for the specified BigInteger's.\n     */\n    internal fun compareMagnitude(`val`: BigInteger): Int {\n        val m1 = _mag\n        val len1 = m1.size\n        val m2 = `val`._mag\n        val len2 = m2.size\n        if (len1 < len2)\n            return -1\n        if (len1 > len2)\n            return 1\n        for (i in 0 until len1) {\n            val a = m1[i]\n            val b = m2[i]\n            if (a != b)\n                return if (a.toLong()and LONG_MASK < b.toLong()and LONG_MASK) -1 else 1\n        }\n        return 0\n    }\n\n    /**\n     * Version of compareMagnitude that compares magnitude with long value.\n     * val can't be Long.MIN_VALUE.\n     */\n    internal fun compareMagnitude(`val`: Long): Int {\n        var `val` = `val`\n        require(`val` != Long.MIN_VALUE)\n        val m1 = _mag\n        val len = m1.size\n        if (len > 2) {\n            return 1\n        }\n        if (`val` < 0) {\n            `val` = -`val`\n        }\n        val highWord = `val`.ushr(32).toInt()\n        if (highWord == 0) {\n            if (len < 1)\n                return -1\n            if (len > 1)\n                return 1\n            val a = m1[0]\n            val b = `val`.toInt()\n            return if (a != b) {\n                if (a.toLong()and LONG_MASK < b.toLong()and LONG_MASK) -1 else 1\n            } else 0\n        } else {\n            if (len < 2)\n                return -1\n            var a = m1[0]\n            var b = highWord\n            if (a != b) {\n                return if (a.toLong()and LONG_MASK < b.toLong()and LONG_MASK) -1 else 1\n            }\n            a = m1[1]\n            b = `val`.toInt()\n            return if (a != b) {\n                if (a.toLong()and LONG_MASK < b.toLong()and LONG_MASK) -1 else 1\n            } else 0\n        }\n    }\n\n    /**\n     * Compares this BigInteger with the specified Object for equality.\n     *\n     * @param  other Object to which this BigInteger is to be compared.\n     * @return `true` if and only if the specified Object is a\n     * BigInteger whose value is numerically equal to this BigInteger.\n     */\n    override fun equals(other: Any?): Boolean {\n        // This test is just an optimization, which may or may not help\n        if (other === this)\n            return true\n\n        if (other !is BigInteger)\n            return false\n\n        val xInt = other as BigInteger?\n        if (xInt!!._signum != _signum)\n            return false\n\n        val m = _mag\n        val len = m.size\n        val xm = xInt._mag\n        if (len != xm.size)\n            return false\n\n        for (i in 0 until len)\n            if (xm[i] != m[i])\n                return false\n\n        return true\n    }\n\n    /**\n     * Returns the minimum of this BigInteger and `val`.\n     *\n     * @param  val value with which the minimum is to be computed.\n     * @return the BigInteger whose value is the lesser of this BigInteger and\n     * `val`.  If they are equal, either may be returned.\n     */\n    @JsName(\"min\")\n    fun min(`val`: BigInteger): BigInteger {\n        return if (this < `val`) this else `val`\n    }\n\n    /**\n     * Returns the maximum of this BigInteger and `val`.\n     *\n     * @param  val value with which the maximum is to be computed.\n     * @return the BigInteger whose value is the greater of this and\n     * `val`.  If they are equal, either may be returned.\n     */\n    @JsName(\"max\")\n    fun max(`val`: BigInteger): BigInteger {\n        return if (this > `val`) this else `val`\n    }\n\n\n    // Hash Function\n\n    /**\n     * Returns the hash code for this BigInteger.\n     *\n     * @return hash code for this BigInteger.\n     */\n    override fun hashCode(): Int {\n        var hashCode = 0\n\n        for (i in _mag.indices)\n            hashCode = 31 * hashCode + (_mag[i].toLong()and LONG_MASK).toInt()\n\n        return hashCode * _signum\n    }\n\n    /**\n     * Returns the String representation of this BigInteger in the\n     * given radix.  If the radix is outside the range from [CHAR_MIN_RADIX] to [CHAR_MAX_RADIX] inclusive,\n     * it will default to 10 (as is the case for\n     * `Int.toString`).  The digit-to-character mapping\n     * provided by `Character.forDigit` is used, and a subtract\n     * sign is prepended if appropriate.  (This representation is\n     * compatible with the String constructor.)\n     *\n     * @param  radix  radix of the String representation.\n     * @return String representation of this BigInteger in the given radix.\n     * @see Int.toString\n     */\n    @JsName(\"toStringWithRadix\")\n    fun toString(radix: Int): String {\n        var radix = radix\n        if (_signum == 0)\n            return \"0\"\n        if (radix < CHAR_MIN_RADIX || radix > CHAR_MAX_RADIX)\n            radix = 10\n\n        // If it's small enough, use smallToString.\n        if (_mag.size <= SCHOENHAGE_BASE_CONVERSION_THRESHOLD)\n            return smallToString(radix)\n\n        // Otherwise use recursive toString, which requires positive arguments.\n        // The results will be concatenated into this StringBuilder\n        var sb = StringBuilder()\n        if (_signum < 0) {\n            toString(this.unaryMinus(), sb, radix, 0)\n            sb = sb.insertChar(0, '-')\n        } else\n            toString(this, sb, radix, 0)\n\n        return sb.toString()\n    }\n\n    /** This method is used to perform toString when arguments are small.  */\n    private fun smallToString(radix: Int): String {\n        if (_signum == 0) {\n            return \"0\"\n        }\n\n        // Compute upper bound on number of digit groups and allocate space\n        val maxNumDigitGroups = (4 * _mag.size + 6) / 7\n        val digitGroup = arrayOfNulls<String>(maxNumDigitGroups)\n\n        // Translate number to string, a digit group at a time\n        var tmp = this.absoluteValue\n        var numGroups = 0\n        while (tmp._signum != 0) {\n            val d = longRadix[radix]\n\n            val q = MutableBigInteger()\n            val a = MutableBigInteger(tmp._mag)\n            val b = MutableBigInteger(d!!._mag)\n            val r = a.divide(b, q)\n            val q2 = q.toBigInteger(tmp._signum * d._signum)\n            val r2 = r!!.toBigInteger(tmp._signum * d._signum)\n\n            digitGroup[numGroups++] = r2.toLong().toString(radix)\n                    // Long.toString(r2.toLong(), radix)\n            tmp = q2\n        }\n\n        // Put sign (if any) and first digit group into result buffer\n        val buf = StringBuilder(numGroups * digitsPerLong[radix] + 1)\n        if (_signum < 0) {\n            buf.append('-')\n        }\n        buf.append(digitGroup[numGroups - 1])\n\n        // Append remaining digit groups padded with leading zeros\n        for (i in numGroups - 2 downTo 0) {\n            // Prepend (any) leading zeros for this digit group\n            val numLeadingZeros = digitsPerLong[radix] - digitGroup[i]!!.length\n            if (numLeadingZeros != 0) {\n                buf.append(zeros[numLeadingZeros])\n            }\n            buf.append(digitGroup[i])\n        }\n        return buf.toString()\n    }\n\n    /**\n     * Returns the decimal String representation of this BigInteger.\n     * The digit-to-character mapping provided by\n     * `Character.forDigit` is used, and a subtract sign is\n     * prepended if appropriate.  (This representation is compatible\n     * with the string constructor, and\n     * allows for String concatenation with Java's + operator.)\n     *\n     * @return decimal String representation of this BigInteger.\n     */\n    override fun toString(): String {\n        return toString(10)\n    }\n\n    /**\n     * Returns a byte array containing the two's-complement\n     * representation of this BigInteger.  The byte array will be in\n     * *big-endian* byte-order: the most significant byte is in\n     * the zeroth element.  The array will contain the minimum number\n     * of bytes required to represent this BigInteger, including at\n     * least one sign bit, which is `(ceil((this.bitLength() +\n     * 1)/8))`.  (This representation is compatible with the\n     * byte array constructor.)\n     *\n     * @return a byte array containing the two's-complement representation of\n     * this BigInteger.\n     */\n    @JsName(\"toByteArray\")\n    fun toByteArray(): ByteArray {\n        val byteLen = bitLength / 8 + 1\n        val byteArray = ByteArray(byteLen)\n\n        var i = byteLen - 1\n        var bytesCopied = 4\n        var nextInt = 0\n        var intIndex = 0\n        while (i >= 0) {\n            if (bytesCopied == 4) {\n                nextInt = getInt(intIndex++)\n                bytesCopied = 1\n            } else {\n                nextInt = nextInt ushr 8\n                bytesCopied++\n            }\n            byteArray[i] = nextInt.toByte()\n            i--\n        }\n        return byteArray\n    }\n\n    /**\n     * Converts this BigInteger to an `int`.  This\n     * conversion is analogous to a\n     * *narrowing primitive conversion* from `long` to\n     * `int` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * if this BigInteger is too big to fit in an\n     * `int`, only the low-order 32 bits are returned.\n     * Note that this conversion can lose information about the\n     * overall magnitude of the BigInteger value as well as return a\n     * result with the opposite sign.\n     *\n     * @return this BigInteger converted to an `int`.\n     * @see BigInteger.toIntExact\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toInt\")\n    /*override*/ fun toInt(): Int {\n        var result = 0\n        result = getInt(0)\n        return result\n    }\n\n    /**\n     * Converts this BigInteger to a `long`.  This\n     * conversion is analogous to a\n     * *narrowing primitive conversion* from `long` to\n     * `int` as defined in\n     * <cite>The Java Language Specification</cite>:\n     * if this BigInteger is too big to fit in a\n     * `long`, only the low-order 64 bits are returned.\n     * Note that this conversion can lose information about the\n     * overall magnitude of the BigInteger value as well as return a\n     * result with the opposite sign.\n     *\n     * @return this BigInteger converted to a `long`.\n     * @see .toLongExact\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     */\n    @JsName(\"toLong\")\n    /*override*/ fun toLong(): Long {\n        var result: Long = 0\n\n        for (i in 1 downTo 0)\n            result = (result shl 32) + (getInt(i).toLong() and LONG_MASK)\n        return result\n    }\n\n    @JsName(\"toByte\")\n    /*override*/ fun toByte(): Byte {\n        return toInt().toByte()\n    }\n\n    @JsName(\"toChar\")\n    /*override*/ fun toChar(): Char {\n        return toInt().toChar()\n    }\n\n    @JsName(\"toShort\")\n    /*override*/ fun toShort(): Short {\n        return toInt().toShort()\n    }\n\n    @JsName(\"toFloat\")\n    /*override*/ fun toFloat(): Float {\n        return toInt().toFloat()\n    }\n\n    @JsName(\"toDouble\")\n    /*override*/ fun toDouble(): Double {\n        return toLong().toDouble()\n    }\n\n    /**\n     * These routines provide access to the two's complement representation\n     * of BigIntegers.\n     */\n\n    /**\n     * Returns the length of the two's complement representation in ints,\n     * including space for at least one sign bit.\n     */\n    private val intLength: Int\n        get() {\n            return bitLength.ushr(5) + 1\n        }\n\n    /* Returns sign bit */\n    private val signBit: Int\n        get() {\n            return if (_signum < 0) 1 else 0\n        }\n\n    /* Returns an int of sign bits */\n    private val signInt: Int\n        get() {\n            return if (_signum < 0) -1 else 0\n        }\n\n    /**\n     * Returns the specified int of the little-endian two's complement\n     * representation (int 0 is the least significant).  The int number can\n     * be arbitrarily high (values are logically preceded by infinitely many\n     * sign ints).\n     */\n    private fun getInt(n: Int): Int {\n        if (n < 0)\n            return 0\n        if (n >= _mag.size)\n            return signInt\n\n        val magInt = _mag[_mag.size - n - 1]\n\n        return if (_signum >= 0)\n            magInt\n        else\n            if (n <= firstNonzeroIntNum()) -magInt else magInt.inv()\n    }\n\n    /**\n     * Returns the index of the int that contains the first nonzero int in the\n     * little-endian binary representation of the magnitude (int 0 is the\n     * least significant). If the magnitude is zero, return value is undefined.\n     *\n     *\n     * Note: never used for a BigInteger with a magnitude of zero.\n     * @see .getInt\n     */\n    private fun firstNonzeroIntNum(): Int {\n        var fn = _firstNonzeroIntNumPlusTwo - 2\n        if (fn == -2) { // firstNonzeroIntNum not initialized yet\n            // Search for the first nonzero int\n            var i: Int\n            val mlen = _mag.size\n            i = mlen - 1\n            while (i >= 0 && _mag[i] == 0) {\n                i--\n            }\n            fn = mlen - i - 1\n            _firstNonzeroIntNumPlusTwo = fn + 2 // offset by two to initialize\n        }\n        return fn\n    }\n\n\n    /**\n     * Returns the _mag array as an array of bytes.\n     */\n    private fun magSerializedForm(): ByteArray {\n        val len = _mag.size\n\n        val bitLen = if (len == 0) 0 else (len - 1 shl 5) + bitLengthForInt(_mag[0])\n        val byteLen = (bitLen + 7).ushr(3)\n        val result = ByteArray(byteLen)\n\n        var i = byteLen - 1\n        var bytesCopied = 4\n        var intIndex = len - 1\n        var nextInt = 0\n        while (i >= 0) {\n            if (bytesCopied == 4) {\n                nextInt = _mag[intIndex--]\n                bytesCopied = 1\n            } else {\n                nextInt = nextInt ushr 8\n                bytesCopied++\n            }\n            result[i] = nextInt.toByte()\n            i--\n        }\n        return result\n    }\n\n    /**\n     * Converts this `BigInteger` to a `long`, checking\n     * for lost information.  If the value of this `BigInteger`\n     * is out of the range of the `long` type, then an\n     * `ArithmeticException` is thrown.\n     *\n     * @return this `BigInteger` converted to a `long`.\n     * @throws ArithmeticException if the value of `this` will\n     * not exactly fit in a `long`.\n     * @see BigInteger.toLong\n     *\n     * @since  1.8\n     */\n    fun toLongExact(): Long {\n        return if (_mag.size <= 2 && bitLength <= 63)\n            toLong()\n        else\n            throw ArithmeticException(\"BigInteger out of long range\")\n    }\n\n    /**\n     * Converts this `BigInteger` to an `int`, checking\n     * for lost information.  If the value of this `BigInteger`\n     * is out of the range of the `int` type, then an\n     * `ArithmeticException` is thrown.\n     *\n     * @return this `BigInteger` converted to an `int`.\n     * @throws ArithmeticException if the value of `this` will\n     * not exactly fit in an `int`.\n     * @see BigInteger.toInt\n     *\n     * @since  1.8\n     */\n    @JsName(\"toIntExact\")\n    fun toIntExact(): Int {\n        return if (_mag.size <= 1 && bitLength <= 31)\n            toInt()\n        else\n            throw ArithmeticException(\"BigInteger out of int range\")\n    }\n\n    /**\n     * Converts this `BigInteger` to a `short`, checking\n     * for lost information.  If the value of this `BigInteger`\n     * is out of the range of the `short` type, then an\n     * `ArithmeticException` is thrown.\n     *\n     * @return this `BigInteger` converted to a `short`.\n     * @throws ArithmeticException if the value of `this` will\n     * not exactly fit in a `short`.\n     * @see BigInteger.toShort\n     *\n     * @since  1.8\n     */\n    @JsName(\"toShortExact\")\n    fun toShortExact(): Short {\n        if (_mag.size <= 1 && bitLength <= 31) {\n            val value = toInt()\n            if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE)\n                return toShort()\n        }\n        throw ArithmeticException(\"BigInteger out of short range\")\n    }\n\n    /**\n     * Converts this `BigInteger` to a `byte`, checking\n     * for lost information.  If the value of this `BigInteger`\n     * is out of the range of the `byte` type, then an\n     * `ArithmeticException` is thrown.\n     *\n     * @return this `BigInteger` converted to a `byte`.\n     * @throws ArithmeticException if the value of `this` will\n     * not exactly fit in a `byte`.\n     * @see BigInteger.toByte\n     *\n     * @since  1.8\n     */\n    @JsName(\"toByteExact\")\n    fun toByteExact(): Byte {\n        if (_mag.size <= 1 && bitLength <= 31) {\n            val value = toInt()\n            if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE)\n                return toByte()\n        }\n        throw ArithmeticException(\"BigInteger out of byte range\")\n    }\n\n    companion object {\n\n        /**\n         * This mask is used to obtain the value of an int as if it were unsigned.\n         */\n        const val LONG_MASK = 0xffffffffL\n\n        /**\n         * This constant limits `_mag.length` of BigIntegers to the supported\n         * range.\n         */\n        private const val MAX_MAG_LENGTH = Int.MAX_VALUE / Int.SIZE_BITS + 1 // (1 << 26)\n\n        /**\n         * Bit lengths larger than this constant can cause overflow in searchLen\n         * calculation and in BitSieve.singleSearch method.\n         */\n        private const val PRIME_SEARCH_BIT_LENGTH_LIMIT = 500000000\n\n        /**\n         * The threshold value for using Karatsuba multiplication.  If the number\n         * of ints in both _mag arrays are greater than this number, then\n         * Karatsuba multiplication will be used.   This value is found\n         * experimentally to work well.\n         */\n        private const val KARATSUBA_THRESHOLD = 80\n\n        /**\n         * The threshold value for using 3-way Toom-Cook multiplication.\n         * If the number of ints in each _mag array is greater than the\n         * Karatsuba threshold, and the number of ints in at least one of\n         * the _mag arrays is greater than this threshold, then Toom-Cook\n         * multiplication will be used.\n         */\n        private const val TOOM_COOK_THRESHOLD = 240\n\n        /**\n         * The threshold value for using Karatsuba squaring.  If the number\n         * of ints in the number are larger than this value,\n         * Karatsuba squaring will be used.   This value is found\n         * experimentally to work well.\n         */\n        private const val KARATSUBA_SQUARE_THRESHOLD = 128\n\n        /**\n         * The threshold value for using Toom-Cook squaring.  If the number\n         * of ints in the number are larger than this value,\n         * Toom-Cook squaring will be used.   This value is found\n         * experimentally to work well.\n         */\n        private const val TOOM_COOK_SQUARE_THRESHOLD = 216\n\n        /**\n         * The threshold value for using Burnikel-Ziegler division.  If the number\n         * of ints in the divisor are larger than this value, Burnikel-Ziegler\n         * division may be used.  This value is found experimentally to work well.\n         */\n        internal const val BURNIKEL_ZIEGLER_THRESHOLD = 80\n\n        /**\n         * The offset value for using Burnikel-Ziegler division.  If the number\n         * of ints in the divisor exceeds the Burnikel-Ziegler threshold, and the\n         * number of ints in the dividend is greater than the number of ints in the\n         * divisor plus this value, Burnikel-Ziegler division will be used.  This\n         * value is found experimentally to work well.\n         */\n        internal const val BURNIKEL_ZIEGLER_OFFSET = 40\n\n        /**\n         * The threshold value for using Schoenhage recursive base conversion. If\n         * the number of ints in the number are larger than this value,\n         * the Schoenhage algorithm will be used.  In practice, it appears that the\n         * Schoenhage routine is faster for any threshold down to 2, and is\n         * relatively flat for thresholds between 2-25, so this choice may be\n         * varied within this range for very small effect.\n         */\n        private const val SCHOENHAGE_BASE_CONVERSION_THRESHOLD = 20\n\n        /**\n         * The threshold value for using squaring code to perform multiplication\n         * of a `BigInteger` instance by itself.  If the number of ints in\n         * the number are larger than this value, `timesLong(this)` will\n         * return `square()`.\n         */\n        private const val MULTIPLY_SQUARE_THRESHOLD = 20\n\n        /**\n         * The threshold for using an intrinsic version of\n         * implMontgomeryXXX to perform Montgomery multiplication.  If the\n         * number of ints in the number is more than this value we do not\n         * use the intrinsic.\n         */\n        private const val MONTGOMERY_INTRINSIC_THRESHOLD = 512\n\n        // bitsPerDigit in the given radix timesLong 1024\n        // Rounded up to avoid underallocation.\n        private val bitsPerDigit = longArrayOf(\n            0,\n            0,\n            1024,\n            1624,\n            2048,\n            2378,\n            2648,\n            2875,\n            3072,\n            3247,\n            3402,\n            3543,\n            3672,\n            3790,\n            3899,\n            4001,\n            4096,\n            4186,\n            4271,\n            4350,\n            4426,\n            4498,\n            4567,\n            4633,\n            4696,\n            4756,\n            4814,\n            4870,\n            4923,\n            4975,\n            5025,\n            5074,\n            5120,\n            5166,\n            5210,\n            5253,\n            5295\n        )\n\n        // Multiply x array timesLong word y in place, and plus word z\n        private fun destructiveMulAdd(x: IntArray, y: Int, z: Int) {\n            // Perform the multiplication word by word\n            val ylong = y.toLong() and LONG_MASK\n            val zlong = z.toLong() and LONG_MASK\n            val len = x.size\n\n            var product: Long = 0\n            var carry: Long = 0\n            for (i in len - 1 downTo 0) {\n                product = ylong * (x[i].toLong() and LONG_MASK) + carry\n                x[i] = product.toInt()\n                carry = product.ushr(32)\n            }\n\n            // Perform the addition\n            var sum = (x[len - 1].toLong() and LONG_MASK) + zlong\n            x[len - 1] = sum.toInt()\n            carry = sum.ushr(32)\n            for (i in len - 2 downTo 0) {\n                sum = (x[i].toLong() and LONG_MASK) + carry\n                x[i] = sum.toInt()\n                carry = sum.ushr(32)\n            }\n        }\n\n        private fun randomBits(numBits: Int, rnd: Random): ByteArray {\n            if (numBits < 0)\n                throw IllegalArgumentException(\"numBits must be non-negative\")\n            val numBytes = ((numBits.toLong() + 7) / 8).toInt() // avoid overflow\n            val randomBits = ByteArray(numBytes)\n\n            // Generate random bytes and mask out any excess bits\n            if (numBytes > 0) {\n                rnd.nextBytes(randomBits)\n                val excessBits = 8 * numBytes - numBits\n                randomBits[0] = randomBits[0] and ((1 shl 8 - excessBits) - 1).toByte()\n            }\n            return randomBits\n        }\n\n        // Minimum size in bits that the requested prime number has\n        // before we use the large prime number generating algorithms.\n        // The cutoff of 95 was chosen empirically for best performance.\n        private const val SMALL_PRIME_THRESHOLD = 95\n\n        // Certainty required to meet the spec of probablePrime\n        private const val DEFAULT_PRIME_CERTAINTY = 100\n\n        /**\n         * Returns a positive BigInteger that is probably prime, with the\n         * specified bitLength. The probability that a BigInteger returned\n         * by this method is composite does not exceed 2<sup>-100</sup>.\n         *\n         * @param  bitLength bitLength of the returned BigInteger.\n         * @param  rnd source of random bits used to select candidates to be\n         * tested for primality.\n         * @return a BigInteger of `bitLength` bits that is probably prime\n         * @throws ArithmeticException `bitLength < 2` or `bitLength` is too large.\n         * @see BigInteger.bitLength\n         * @since 1.4\n         */\n        fun probablePrime(bitLength: Int, rnd: Random): BigInteger {\n            if (bitLength < 2)\n                throw ArithmeticException(\"bitLength < 2\")\n\n            return if (bitLength < SMALL_PRIME_THRESHOLD)\n                smallPrime(\n                    bitLength,\n                    DEFAULT_PRIME_CERTAINTY,\n                    rnd\n                )\n            else\n                largePrime(\n                    bitLength,\n                    DEFAULT_PRIME_CERTAINTY,\n                    rnd\n                )\n        }\n\n        /**\n         * Find a random number of the specified bitLength that is probably prime.\n         * This method is used for smaller primes, its performance degrades on\n         * larger bitlengths.\n         *\n         * This method assumes bitLength > 1.\n         */\n        private fun smallPrime(bitLength: Int, certainty: Int, rnd: Random): BigInteger {\n            val magLen = (bitLength + 31).ushr(5)\n            val temp = IntArray(magLen)\n            val highBit = 1 shl (bitLength + 31 and 0x1f)  // High bit of high int\n            val highMask = (highBit shl 1) - 1  // Bits to keep in high int\n\n            while (true) {\n                // Construct a candidate\n                for (i in 0 until magLen)\n                    temp[i] = rnd.nextInt()\n                temp[0] = temp[0] and highMask or highBit  // Ensure exact length\n                if (bitLength > 2)\n                    temp[magLen - 1] = temp[magLen - 1] or 1  // Make odd if bitlen > 2\n\n                val p = BigInteger(temp, 1)\n\n                // Do cheap \"pre-test\" if applicable\n                if (bitLength > 6) {\n                    val r = p.remainder(SMALL_PRIME_PRODUCT).toLong()\n                    if (r % 3 == 0L || r % 5 == 0L || r % 7 == 0L || r % 11 == 0L ||\n                        r % 13 == 0L || r % 17 == 0L || r % 19 == 0L || r % 23 == 0L ||\n                        r % 29 == 0L || r % 31 == 0L || r % 37 == 0L || r % 41 == 0L\n                    )\n                        continue // Candidate is composite; try another\n                }\n\n                // All candidates of bitLength 2 and 3 are prime by this point\n                if (bitLength < 4)\n                    return p\n\n                // Do expensive test if we survive pre-test (or it's inapplicable)\n                if (p.primeToCertainty(certainty, rnd))\n                    return p\n            }\n        }\n\n        private val SMALL_PRIME_PRODUCT = of(3L * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41)\n\n        /**\n         * Find a random number of the specified bitLength that is probably prime.\n         * This method is more appropriate for larger bitlengths since it uses\n         * a sieve to eliminate most composites before using a more expensive\n         * test.\n         */\n        private fun largePrime(bitLength: Int, certainty: Int, rnd: Random): BigInteger {\n            var p: BigInteger\n            p = BigInteger(bitLength, rnd).setBit(bitLength - 1)\n            p._mag[p._mag.size - 1] = p._mag[p._mag.size - 1] and -0x2\n\n            // Use a sieve length likely to contain the next prime number\n            val searchLen = getPrimeSearchLen(bitLength)\n            var searchSieve = BitSieve(p, searchLen)\n            var candidate = searchSieve.retrieve(p, certainty, rnd)\n\n            while (candidate == null || candidate.bitLength != bitLength) {\n                p = p.plus(of((2 * searchLen).toLong()))\n                if (p.bitLength != bitLength)\n                    p = BigInteger(bitLength, rnd).setBit(bitLength - 1)\n                p._mag[p._mag.size - 1] = p._mag[p._mag.size - 1] and -0x2\n                searchSieve = BitSieve(p, searchLen)\n                candidate = searchSieve.retrieve(p, certainty, rnd)\n            }\n            return candidate\n        }\n\n        private fun getPrimeSearchLen(bitLength: Int): Int {\n            if (bitLength > PRIME_SEARCH_BIT_LENGTH_LIMIT + 1) {\n                throw ArithmeticException(\"Prime search implementation restriction on bitLength\")\n            }\n            return bitLength / 20 * 64\n        }\n\n        /**\n         * Computes Jacobi(p,n).\n         * Assumes n positive, odd, n>=3.\n         */\n        private fun jacobiSymbol(p: Int, n: BigInteger): Int {\n            var p = p\n            if (p == 0)\n                return 0\n\n            // Algorithm and comments adapted from Colin Plumb's C library.\n            var j = 1\n            var u = n._mag[n._mag.size - 1]\n\n            // Make p positive\n            if (p < 0) {\n                p = -p\n                val n8 = u and 7\n                if (n8 == 3 || n8 == 7)\n                    j = -j // 3 (011) or 7 (111) rem 8\n            }\n\n            // Get rid of factors of 2 in p\n            while (p and 3 == 0)\n                p = p shr 2\n            if (p and 1 == 0) {\n                p = p shr 1\n                if (u xor (u shr 1) and 2 != 0)\n                    j = -j // 3 (011) or 5 (101) rem 8\n            }\n            if (p == 1)\n                return j\n            // Then, apply quadratic reciprocity\n            if (p and u and 2 != 0)\n            // p = u = 3 (rem 4)?\n                j = -j\n            // And reduce u rem p\n            u = n.rem(of(p.toLong())).toInt()\n\n            // Now compute Jacobi(u,p), u < p\n            while (u != 0) {\n                while (u and 3 == 0)\n                    u = u shr 2\n                if (u and 1 == 0) {\n                    u = u shr 1\n                    if (p xor (p shr 1) and 2 != 0)\n                        j = -j     // 3 (011) or 5 (101) rem 8\n                }\n                if (u == 1)\n                    return j\n                // Now both u and p are odd, so use quadratic reciprocity\n                require(u < p)\n                val t = u\n                u = p\n                p = t\n                if (u and p and 2 != 0)\n                // u = p = 3 (rem 4)?\n                    j = -j\n                // Now u >= p, so it can be reduced\n                u %= p\n            }\n            return 0\n        }\n\n        private fun lucasLehmerSequence(z: Int, k: BigInteger, n: BigInteger): BigInteger {\n            val d = of(z.toLong())\n            var u = ONE\n            var u2: BigInteger\n            var v = ONE\n            var v2: BigInteger\n\n            for (i in k.bitLength - 2 downTo 0) {\n                u2 = u.times(v).rem(n)\n\n                v2 = v.square().plus(d.times(u.square())).rem(n)\n                if (v2.testBit(0))\n                    v2 = v2.minus(n)\n\n                v2 = v2.shr(1)\n\n                u = u2\n                v = v2\n                if (k.testBit(i)) {\n                    u2 = u.plus(v).rem(n)\n                    if (u2.testBit(0))\n                        u2 = u2.minus(n)\n\n                    u2 = u2.shr(1)\n                    v2 = v.plus(d.times(u)).rem(n)\n                    if (v2.testBit(0))\n                        v2 = v2.minus(n)\n                    v2 = v2.shr(1)\n\n                    u = u2\n                    v = v2\n                }\n            }\n            return u\n        }\n\n        private fun reportOverflow() {\n            throw ArithmeticException(\"BigInteger would overflow supported range\")\n        }\n\n        //Static Factory Methods\n\n        /**\n         * Returns a BigInteger whose value is equal to that of the\n         * specified `long`.\n         *\n         * @apiNote This static factory method is provided in preference\n         * to a (`long`) constructor because it allows for reuse of\n         * frequently used BigIntegers.\n         *\n         * @param  val value of the BigInteger to return.\n         * @return a BigInteger with the specified value.\n         */\n        @JsName(\"ofLong\")\n        fun of(`val`: Long): BigInteger {\n            // If -MAX_CONSTANT < val < MAX_CONSTANT, return stashed constant\n            if (`val` == 0L)\n                return ZERO\n            if (`val` in 1..MAX_CONSTANT)\n                return posConst[`val`.toInt()] ?: throw IllegalStateException()\n            else if (`val` < 0 && `val` >= -MAX_CONSTANT)\n                return negConst[(-`val`).toInt()] ?: throw IllegalStateException()\n\n            return BigInteger(`val`)\n        }\n\n        @JsName(\"of\")\n        fun of(value: Int): BigInteger {\n            return of(value.toLong())\n        }\n\n        private fun String.getRadix(): Pair<Int, String> {\n            return when {\n                this.contains(\"0B\", ignoreCase = true) -> {\n                    Pair(2, this.replaceFirst(\"0B\", \"\").replaceFirst(\"0b\", \"\"))\n                }\n                this.contains(\"0O\", ignoreCase = true) -> {\n                    Pair(8, this.replaceFirst(\"0O\", \"\").replaceFirst(\"0o\", \"\"))\n                }\n                this.contains(\"0X\", ignoreCase = true) -> {\n                    Pair(16, this.replaceFirst(\"0X\", \"\").replaceFirst(\"0x\", \"\"))\n                }\n                else -> Pair(10, this)\n            }\n        }\n\n        @JsName(\"parse\")\n        fun of(value: String): BigInteger {\n            val radixed = value.getRadix()\n            return BigInteger(radixed.second, radixed.first)\n        }\n\n        @JsName(\"parseWithRadix\")\n        fun of(value: String, radix: Int): BigInteger {\n            return BigInteger(value, radix)\n        }\n\n        /**\n         * Returns a BigInteger with the given two's complement representation.\n         * Assumes that the input array will not be modified (the returned\n         * BigInteger will reference the input array if feasible).\n         */\n        @JsName(\"ofIntArray\")\n        private fun of(`val`: IntArray): BigInteger {\n            return if (`val`[0] > 0) BigInteger(`val`, 1) else BigInteger(`val`)\n        }\n\n        // Constants\n\n        /**\n         * Initialize static constant array when class is loaded.\n         */\n        private val MAX_CONSTANT = 16\n        private val posConst = arrayOfNulls<BigInteger>(MAX_CONSTANT + 1)\n        private val negConst = arrayOfNulls<BigInteger>(MAX_CONSTANT + 1)\n\n        /**\n         * The cache of powers of each radix.  This allows us to not have to\n         * recalculate powers of radix^(2^n) more than once.  This speeds\n         * Schoenhage recursive base conversion significantly.\n         */\n        private var powerCache: Array<Array<BigInteger>?> = arrayOfNulls(0)\n\n        /** The cache of logarithms of radices for base conversion.  */\n        private val logCache: DoubleArray\n\n        /** The natural log of 2.  This is used in computing cache indices.  */\n        private val LOG_TWO = ln(2.0)\n\n        init {\n            for (i in 1..MAX_CONSTANT) {\n                val magnitude = IntArray(1)\n                magnitude[0] = i\n                posConst[i] = BigInteger(magnitude, 1)\n                negConst[i] = BigInteger(magnitude, -1)\n            }\n\n            /*\n         * Initialize the cache of radix^(2^x) values used for base conversion\n         * with just the very first value.  Additional values will be created\n         * on demand.\n         */\n            powerCache = arrayOfNulls(CHAR_MAX_RADIX + 1)\n            logCache = DoubleArray(CHAR_MAX_RADIX + 1)\n\n            for (i in CHAR_MIN_RADIX .. CHAR_MAX_RADIX) {\n                powerCache[i] = arrayOf(of(i.toLong()))\n                logCache[i] = ln(i.toDouble())\n            }\n        }\n\n        /**\n         * The BigInteger constant zero.\n         *\n         * @since   1.2\n         */\n        val ZERO = BigInteger(IntArray(0), 0)\n\n        /**\n         * The BigInteger constant one.\n         *\n         * @since   1.2\n         */\n        val ONE = of(1)\n\n        /**\n         * The BigInteger constant two.\n         *\n         * @since   9\n         */\n        val TWO = of(2)\n\n        /**\n         * The BigInteger constant -1.  (Not exported.)\n         */\n        private val NEGATIVE_ONE = of(-1)\n\n        /**\n         * The BigInteger constant ten.\n         *\n         * @since   1.5\n         */\n        val TEN = of(10)\n\n        /**\n         * Adds the contents of the int array x and long value val. This\n         * method allocates a new int array to hold the answer and returns\n         * a reference to that array.  Assumes x.length &gt; 0 and val is\n         * non-negative\n         */\n        private fun sum(x: IntArray, `val`: Long): IntArray {\n            var sum: Long = 0\n            var xIndex = x.size\n            val result: IntArray\n            val highWord = `val`.ushr(32).toInt()\n            if (highWord == 0) {\n                result = IntArray(xIndex)\n                sum = (x[--xIndex].toLong()and LONG_MASK) + `val`\n                result[xIndex] = sum.toInt()\n            } else {\n                if (xIndex == 1) {\n                    result = IntArray(2)\n                    sum = `val` + (x[0].toLong()and LONG_MASK)\n                    result[1] = sum.toInt()\n                    result[0] = sum.ushr(32).toInt()\n                    return result\n                } else {\n                    result = IntArray(xIndex)\n                    sum = (x[--xIndex].toLong()and LONG_MASK) + (`val`.toLong()and LONG_MASK)\n                    result[xIndex] = sum.toInt()\n                    sum = (x[--xIndex].toLong()and LONG_MASK) + (highWord.toLong()and LONG_MASK) + sum.ushr(32)\n                    result[xIndex] = sum.toInt()\n                }\n            }\n            // Copy remainder of longer number while carry propagation is required\n            var carry = sum.ushr(32) != 0L\n            while (xIndex > 0 && carry) {\n                result[xIndex - 1] = x[xIndex] + 1\n                carry = result[--xIndex] == 0\n            }\n            // Copy remainder of longer number\n            while (xIndex > 0)\n                result[--xIndex] = x[xIndex]\n            // Grow result if necessary\n            if (carry) {\n                val bigger = IntArray(result.size + 1)\n                arrayCopy(result, 0, bigger, 1, result.size)\n                bigger[0] = 0x01\n                return bigger\n            }\n            return result\n        }\n\n        /**\n         * Adds the contents of the int arrays x and y. This method allocates\n         * a new int array to hold the answer and returns a reference to that\n         * array.\n         */\n        private fun sum(x: IntArray, y: IntArray): IntArray {\n            var x = x\n            var y = y\n            // If x is shorter, swap the two arrays\n            if (x.size < y.size) {\n                val tmp = x\n                x = y\n                y = tmp\n            }\n\n            var xIndex = x.size\n            var yIndex = y.size\n            val result = IntArray(xIndex)\n            var sum: Long = 0\n            if (yIndex == 1) {\n                xIndex--\n                sum = (x[xIndex].toLong()and LONG_MASK) + (y[0].toLong()and LONG_MASK)\n                result[xIndex] = sum.toInt()\n            } else {\n                // Add common parts of both numbers\n                while (yIndex > 0) {\n                    sum = (x[--xIndex].toLong()and LONG_MASK) +\n                            (y[--yIndex].toLong()and LONG_MASK) + sum.ushr(32)\n                    result[xIndex] = sum.toInt()\n                }\n            }\n            // Copy remainder of longer number while carry propagation is required\n            var carry = sum.ushr(32) != 0L\n            while (xIndex > 0 && carry) {\n                //carry = ((result[--xIndex] = x[xIndex] + 1) == 0)\n                result[--xIndex] = x[xIndex] + 1\n                carry = result[xIndex] == 0\n            }\n\n            // Copy remainder of longer number\n            while (xIndex > 0)\n                result[--xIndex] = x[xIndex]\n\n            // Grow result if necessary\n            if (carry) {\n                val bigger = IntArray(result.size + 1)\n                arrayCopy(result, 0, bigger, 1, result.size)\n                bigger[0] = 0x01\n                return bigger\n            }\n            return result\n        }\n\n        private fun subtract(`val`: Long, little: IntArray): IntArray {\n            val highWord = `val`.ushr(32).toInt()\n            if (highWord == 0) {\n                val result = IntArray(1)\n                result[0] = (`val` - (little[0].toLong() and LONG_MASK)).toInt()\n                return result\n            } else {\n                val result = IntArray(2)\n                if (little.size == 1) {\n                    val difference = (`val`.toInt().toLong() and LONG_MASK) - (little[0].toLong() and LONG_MASK)\n                    result[1] = difference.toInt()\n                    // Subtract remainder of longer number while borrow propagates\n                    val borrow = difference shr 32 != 0L\n                    if (borrow) {\n                        result[0] = highWord - 1\n                    } else {        // Copy remainder of longer number\n                        result[0] = highWord\n                    }\n                    return result\n                } else { // little.length == 2\n                    var difference = (`val`.toInt().toLong() and LONG_MASK) - (little[1].toLong() and LONG_MASK)\n                    result[1] = difference.toInt()\n                    difference = (highWord.toLong() and LONG_MASK) - (little[0].toLong() and LONG_MASK) + (difference shr 32)\n                    result[0] = difference.toInt()\n                    return result\n                }\n            }\n        }\n\n        /**\n         * Subtracts the contents of the second argument (val) from the\n         * first (big).  The first int array (big) must represent a larger number\n         * than the second.  This method allocates the space necessary to hold the\n         * answer.\n         * assumes val &gt;= 0\n         */\n        private fun subtract(big: IntArray, `val`: Long): IntArray {\n            val highWord = `val`.ushr(32).toInt()\n            var bigIndex = big.size\n            val result = IntArray(bigIndex)\n            var difference: Long = 0\n\n            if (highWord == 0) {\n                difference = (big[--bigIndex].toLong() and LONG_MASK) - `val`\n                result[bigIndex] = difference.toInt()\n            } else {\n                difference = (big[--bigIndex].toLong() and LONG_MASK) - (`val` and LONG_MASK)\n                result[bigIndex] = difference.toInt()\n                difference = (big[--bigIndex].toLong() and LONG_MASK) - (highWord.toLong() and LONG_MASK) + (difference shr 32)\n                result[bigIndex] = difference.toInt()\n            }\n\n            // Subtract remainder of longer number while borrow propagates\n            var borrow = difference shr 32 != 0L\n            while (bigIndex > 0 && borrow) {\n                result[--bigIndex] = big[bigIndex] - 1\n                borrow = result[bigIndex] == -1\n            }\n\n            // Copy remainder of longer number\n            while (bigIndex > 0)\n                result[--bigIndex] = big[bigIndex]\n\n            return result\n        }\n\n        /**\n         * Subtracts the contents of the second int arrays (little) from the\n         * first (big).  The first int array (big) must represent a larger number\n         * than the second.  This method allocates the space necessary to hold the\n         * answer.\n         */\n        private fun subtract(big: IntArray, little: IntArray): IntArray {\n            var bigIndex = big.size\n            val result = IntArray(bigIndex)\n            var littleIndex = little.size\n            var difference: Long = 0\n\n            // Subtract common parts of both numbers\n            while (littleIndex > 0) {\n                difference =\n                    (big[--bigIndex].toLong() and LONG_MASK) - (little[--littleIndex].toLong() and LONG_MASK) + (difference shr 32)\n                result[bigIndex] = difference.toInt()\n            }\n\n            // Subtract remainder of longer number while borrow propagates\n            var borrow = difference shr 32 != 0L\n            while (bigIndex > 0 && borrow) {\n                result[--bigIndex] = big[bigIndex] - 1\n                borrow = result[bigIndex] == -1\n            }\n\n            // Copy remainder of longer number\n            while (bigIndex > 0)\n                result[--bigIndex] = big[bigIndex]\n\n            return result\n        }\n\n        private fun multiplyByInt(x: IntArray, y: Int, sign: Int): BigInteger {\n            if (y.bitCount() == 1) {\n                return BigInteger(\n                    shl(\n                        x,\n                        y.numberOfTrailingZeros()\n                    ), sign\n                )\n            }\n            val xlen = x.size\n            var rmag = IntArray(xlen + 1)\n            var carry: Long = 0\n            val yl = y.toLong() and LONG_MASK\n            var rstart = rmag.size - 1\n            for (i in xlen - 1 downTo 0) {\n                val product = (x[i].toLong() and LONG_MASK) * yl + carry\n                rmag[rstart--] = product.toInt()\n                carry = product.ushr(32)\n            }\n            if (carry == 0L) {\n                rmag = rmag.copyOfRange(1, rmag.size)\n            } else {\n                rmag[rstart] = carry.toInt()\n            }\n            return BigInteger(rmag, sign)\n        }\n\n        /**\n         * Multiplies int arrays x and y to the specified lengths and places\n         * the result into z. There will be no leading zeros in the resultant array.\n         */\n        private fun multiplyToLen(x: IntArray, xlen: Int, y: IntArray, ylen: Int, z: IntArray?): IntArray {\n            multiplyToLenCheck(x, xlen)\n            multiplyToLenCheck(y, ylen)\n            return implMultiplyToLen(x, xlen, y, ylen, z)\n        }\n\n        private fun implMultiplyToLen(x: IntArray, xlen: Int, y: IntArray, ylen: Int, z: IntArray?): IntArray {\n            var z = z\n            val xstart = xlen - 1\n            val ystart = ylen - 1\n\n            if (z == null || z.size < xlen + ylen)\n                z = IntArray(xlen + ylen)\n\n            var carry: Long = 0\n            run {\n                var j = ystart\n                var k = ystart + 1 + xstart\n                while (j >= 0) {\n                    val product = (y[j].toLong() and LONG_MASK) * (x[xstart].toLong() and LONG_MASK) + carry\n                    z[k] = product.toInt()\n                    carry = product.ushr(32)\n                    j--\n                    k--\n                }\n            }\n            z[xstart] = carry.toInt()\n\n            for (i in xstart - 1 downTo 0) {\n                carry = 0\n                var j = ystart\n                var k = ystart + 1 + i\n                while (j >= 0) {\n                    val product = (y[j].toLong() and LONG_MASK) * (x[i].toLong() and LONG_MASK) +\n                            (z[k].toLong() and LONG_MASK) + carry\n                    z[k] = product.toInt()\n                    carry = product.ushr(32)\n                    j--\n                    k--\n                }\n                z[i] = carry.toInt()\n            }\n            return z\n        }\n\n        private fun multiplyToLenCheck(array: IntArray, length: Int) {\n            if (length <= 0) {\n                return   // not an error because multiplyToLen won't execute if len <= 0\n            }\n\n            if (length > array.size) {\n                throw IndexOutOfBoundsException(\"${length - 1}\")\n            }\n        }\n\n        /**\n         * Multiplies two BigIntegers using the Karatsuba multiplication\n         * algorithm.  This is a recursive div-and-conquer algorithm which is\n         * more efficient for large numbers than what is commonly called the\n         * \"grade-school\" algorithm used in multiplyToLen.  If the numbers to be\n         * multiplied have length n, the \"grade-school\" algorithm has an\n         * asymptotic complexity of O(n^2).  In contrast, the Karatsuba algorithm\n         * has complexity of O(n^(log2(3))), or O(n^1.585).  It achieves this\n         * increased performance by doing 3 multiplies instead of 4 when\n         * evaluating the product.  As it has some overhead, should be used when\n         * both numbers are larger than a certain threshold (found\n         * experimentally).\n         *\n         * See:  http://en.wikipedia.org/wiki/Karatsuba_algorithm\n         */\n        private fun multiplyKaratsuba(x: BigInteger, y: BigInteger): BigInteger {\n            val xlen = x._mag.size\n            val ylen = y._mag.size\n\n            // The number of ints in each half of the number.\n            val half = (max(xlen, ylen) + 1) / 2\n\n            // xl and yl are the lower halves of x and y respectively,\n            // xh and yh are the upper halves.\n            val xl = x.getLower(half)\n            val xh = x.getUpper(half)\n            val yl = y.getLower(half)\n            val yh = y.getUpper(half)\n\n            val p1 = xh.times(yh)  // p1 = xh*yh\n            val p2 = xl.times(yl)  // p2 = xl*yl\n\n            // p3=(xh+xl)*(yh+yl)\n            val p3 = xh.plus(xl).times(yh.plus(yl))\n\n            // result = p1 * 2^(32*2*half) + (p3 - p1 - p2) * 2^(32*half) + p2\n            val result = p1.shl(32 * half).plus(p3.minus(p1).minus(p2)).shl(32 * half).plus(p2)\n\n            return if (x._signum != y._signum) {\n                result.unaryMinus()\n            } else {\n                result\n            }\n        }\n\n        /**\n         * Multiplies two BigIntegers using a 3-way Toom-Cook multiplication\n         * algorithm.  This is a recursive div-and-conquer algorithm which is\n         * more efficient for large numbers than what is commonly called the\n         * \"grade-school\" algorithm used in multiplyToLen.  If the numbers to be\n         * multiplied have length n, the \"grade-school\" algorithm has an\n         * asymptotic complexity of O(n^2).  In contrast, 3-way Toom-Cook has a\n         * complexity of about O(n^1.465).  It achieves this increased asymptotic\n         * performance by breaking each number into three parts and by doing 5\n         * multiplies instead of 9 when evaluating the product.  Due to overhead\n         * (additions, shifts, and one division) in the Toom-Cook algorithm, it\n         * should only be used when both numbers are larger than a certain\n         * threshold (found experimentally).  This threshold is generally larger\n         * than that for Karatsuba multiplication, so this algorithm is generally\n         * only used when numbers become significantly larger.\n         *\n         * The algorithm used is the \"optimal\" 3-way Toom-Cook algorithm outlined\n         * by Marco Bodrato.\n         *\n         * See: http://bodrato.it/toom-cook/\n         * http://bodrato.it/papers/#WAIFI2007\n         *\n         * \"Towards Optimal Toom-Cook Multiplication for Univariate and\n         * Multivariate Polynomials in Characteristic 2 and 0.\" by Marco BODRATO;\n         * In C.Carlet and B.Sunar, Eds., \"WAIFI'07 proceedings\", p. 116-133,\n         * LNCS #4547. Springer, Madrid, Spain, June 21-22, 2007.\n         *\n         */\n        private fun multiplyToomCook3(a: BigInteger, b: BigInteger): BigInteger {\n            val alen = a._mag.size\n            val blen = b._mag.size\n\n            val largest = max(alen, blen)\n\n            // k is the size (in ints) of the lower-order slices.\n            val k = (largest + 2) / 3   // Equal to ceil(largest/3)\n\n            // r is the size (in ints) of the highest-order slice.\n            val r = largest - 2 * k\n\n            // Obtain slices of the numbers. a2 and b2 are the most significant\n            // bits of the numbers a and b, and a0 and b0 the least significant.\n            val a0: BigInteger\n            val a1: BigInteger\n            val a2: BigInteger\n            val b0: BigInteger\n            val b1: BigInteger\n            val b2: BigInteger\n            a2 = a.getToomSlice(k, r, 0, largest)\n            a1 = a.getToomSlice(k, r, 1, largest)\n            a0 = a.getToomSlice(k, r, 2, largest)\n            b2 = b.getToomSlice(k, r, 0, largest)\n            b1 = b.getToomSlice(k, r, 1, largest)\n            b0 = b.getToomSlice(k, r, 2, largest)\n\n            val v0: BigInteger\n            val v1: BigInteger\n            val v2: BigInteger\n            val vm1: BigInteger\n            val vinf: BigInteger\n            var t1: BigInteger\n            var t2: BigInteger\n            var tm1: BigInteger\n            var da1: BigInteger\n            var db1: BigInteger\n\n            v0 = a0.times(b0)\n            da1 = a2.plus(a0)\n            db1 = b2.plus(b0)\n            vm1 = da1.minus(a1).times(db1.minus(b1))\n            da1 = da1.plus(a1)\n            db1 = db1.plus(b1)\n            v1 = da1.times(db1)\n            v2 = da1.plus(a2).shl(1).minus(a0).times(\n                db1.plus(b2).shl(1).minus(b0)\n            )\n            vinf = a2.times(b2)\n\n            // The algorithm requires two divisions by 2 and one by 3.\n            // All divisions are known to be exact, that is, they do not produce\n            // remainders, and all results are positive.  The divisions by 2 are\n            // implemented as right shifts which are relatively efficient, leaving\n            // only an exact division by 3, which is done by a specialized\n            // linear-time algorithm.\n            t2 = v2.minus(vm1).exactDivideBy3()\n            tm1 = v1.minus(vm1).shr(1)\n            t1 = v1.minus(v0)\n            t2 = t2.minus(t1).shr(1)\n            t1 = t1.minus(tm1).minus(vinf)\n            t2 = t2.minus(vinf.shl(1))\n            tm1 = tm1.minus(t2)\n\n            // Number of bits to shift left.\n            val ss = k * 32\n\n            val result = vinf.shl(ss).plus(t2).shl(ss).plus(t1).shl(ss).plus(tm1).shl(ss).plus(v0)\n\n            return if (a._signum != b._signum) {\n                result.unaryMinus()\n            } else {\n                result\n            }\n        }\n\n        /**\n         * Squares the contents of the int array x. The result is placed into the\n         * int array z.  The contents of x are not changed.\n         */\n        private fun squareToLen(x: IntArray, len: Int, z: IntArray?): IntArray {\n            var z = z\n            val zlen = len shl 1\n            if (z == null || z.size < zlen)\n                z = IntArray(zlen)\n\n            // Execute checks before calling intrinsified method.\n            implSquareToLenChecks(x, len, z, zlen)\n            return implSquareToLen(x, len, z, zlen)\n        }\n\n        /**\n         * Parameters validation.\n         */\n        private fun implSquareToLenChecks(x: IntArray, len: Int, z: IntArray, zlen: Int) {\n            if (len < 1) {\n                throw IllegalArgumentException(\"invalid input length: $len\")\n            }\n            if (len > x.size) {\n                throw IllegalArgumentException(\n                    \"input length out of bound: \" +\n                            len + \" > \" + x.size\n                )\n            }\n            if (len * 2 > z.size) {\n                throw IllegalArgumentException(\n                    \"input length out of bound: \" +\n                            len * 2 + \" > \" + z.size\n                )\n            }\n            if (zlen < 1) {\n                throw IllegalArgumentException(\"invalid input length: $zlen\")\n            }\n            if (zlen > z.size) {\n                throw IllegalArgumentException(\n                    \"input length out of bound: \" +\n                            len + \" > \" + z.size\n                )\n            }\n        }\n\n        /**\n         * Java Runtime may use intrinsic for this method.\n         */\n        private fun implSquareToLen(x: IntArray, len: Int, z: IntArray, zlen: Int): IntArray {\n            /*\n         * The algorithm used here is adapted from Colin Plumb's C library.\n         * Technique: Consider the partial products in the multiplication\n         * of \"abcde\" by itself:\n         *\n         *               a  b  c  d  e\n         *            *  a  b  c  d  e\n         *          ==================\n         *              ae be ce de ee\n         *           ad bd cd dd de\n         *        ac bc cc cd ce\n         *     ab bb bc bd be\n         *  aa ab ac ad ae\n         *\n         * Note that everything above the main diagonal:\n         *              ae be ce de = (abcd) * e\n         *           ad bd cd       = (abc) * d\n         *        ac bc             = (ab) * c\n         *     ab                   = (a) * b\n         *\n         * is a copy of everything below the main diagonal:\n         *                       de\n         *                 cd ce\n         *           bc bd be\n         *     ab ac ad ae\n         *\n         * Thus, the sum is 2 * (off the diagonal) + diagonal.\n         *\n         * This is accumulated beginning with the diagonal (which\n         * consist of the squares of the digits of the input), which is then\n         * divided by two, the off-diagonal added, and multiplied by two\n         * again.  The low bit is simply a copy of the low bit of the\n         * input, so it doesn't need special care.\n         */\n\n            // Store the squares, right shifted one bit (i.e., divided by 2)\n            var lastProductLowWord = 0\n            run {\n                var j = 0\n                var i = 0\n                while (j < len) {\n                    val piece = x[j].toLong() and LONG_MASK\n                    val product = piece * piece\n                    z[i++] = lastProductLowWord shl 31 or product.ushr(33).toInt()\n                    z[i++] = product.ushr(1).toInt()\n                    lastProductLowWord = product.toInt()\n                    j++\n                }\n            }\n\n            // Add in off-diagonal sums\n            var i = len\n            var offset = 1\n            while (i > 0) {\n                var t = x[i - 1]\n                t = mulAdd(z, x, offset, i - 1, t)\n                addOne(z, offset - 1, i, t)\n                i--\n                offset += 2\n            }\n\n            // Shift back up and set low bit\n            primitiveLeftShift(z, zlen, 1)\n            z[zlen - 1] = z[zlen - 1] or (x[len - 1] and 1)\n\n            return z\n        }\n\n        /**\n         * Package private method to return bit length for an integer.\n         */\n        internal fun bitLengthForInt(n: Int): Int {\n            return 32 - n.numberOfLeadingZeros()\n        }\n\n        /**\n         * Left shift int array a up to len by n bits. Returns the array that\n         * results from the shift since space may have to be reallocated.\n         */\n        private fun leftShift(a: IntArray, len: Int, n: Int): IntArray {\n            val nInts = n.ushr(5)\n            val nBits = n and 0x1F\n            val bitsInHighWord = bitLengthForInt(a[0])\n\n            // If shift can be done without recopy, do so\n            if (n <= 32 - bitsInHighWord) {\n                primitiveLeftShift(a, len, nBits)\n                return a\n            } else { // Array must be resized\n                if (nBits <= 32 - bitsInHighWord) {\n                    val result = IntArray(nInts + len)\n                    arrayCopy(a, 0, result, 0, len)\n                    primitiveLeftShift(result, result.size, nBits)\n                    return result\n                } else {\n                    val result = IntArray(nInts + len + 1)\n                    arrayCopy(a, 0, result, 0, len)\n                    primitiveRightShift(result, result.size, 32 - nBits)\n                    return result\n                }\n            }\n        }\n\n        // shifts a up to len right n bits assumes no leading zeros, 0<n<32\n        internal fun primitiveRightShift(a: IntArray, len: Int, n: Int) {\n            val n2 = 32 - n\n            var i = len - 1\n            var c = a[i]\n            while (i > 0) {\n                val b = c\n                c = a[i - 1]\n                a[i] = c shl n2 or b.ushr(n)\n                i--\n            }\n            a[0] = a[0] ushr n\n        }\n\n        // shifts a up to len left n bits assumes no leading zeros, 0<=n<32\n        internal fun primitiveLeftShift(a: IntArray, len: Int, n: Int) {\n            if (len == 0 || n == 0)\n                return\n\n            val n2 = 32 - n\n            var i = 0\n            var c = a[i]\n            val m = i + len - 1\n            while (i < m) {\n                val b = c\n                c = a[i + 1]\n                a[i] = b shl n or c.ushr(n2)\n                i++\n            }\n            a[len - 1] = a[len - 1] shl n\n        }\n\n        /**\n         * Calculate bitlength of contents of the first len elements an int array,\n         * assuming there are no leading zero ints.\n         */\n        private fun bitLength(`val`: IntArray, len: Int): Int {\n            return if (len == 0) 0 else (len - 1 shl 5) + bitLengthForInt(`val`[0])\n        }\n\n        // Montgomery multiplication.  These are wrappers for\n        // implMontgomeryXX routines which are expected to be replaced by\n        // virtual machine intrinsics.  We don't use the intrinsics for\n        // very large operands: MONTGOMERY_INTRINSIC_THRESHOLD should be\n        // larger than any reasonable crypto key.\n        private fun montgomeryMultiply(\n            a: IntArray, b: IntArray, n: IntArray, len: Int, inv: Long,\n            product: IntArray?\n        ): IntArray {\n            var product = product\n            implMontgomeryMultiplyChecks(a, b, n, len, product)\n            if (len > MONTGOMERY_INTRINSIC_THRESHOLD) {\n                // Very long argument: do not use an intrinsic\n                product = multiplyToLen(a, len, b, len, product)\n                return montReduce(product, n, len, inv.toInt())\n            } else {\n                return implMontgomeryMultiply(\n                    a,\n                    b,\n                    n,\n                    len,\n                    inv,\n                    materialize(product, len)\n                )\n            }\n        }\n\n        private fun montgomerySquare(\n            a: IntArray, n: IntArray, len: Int, inv: Long,\n            product: IntArray?\n        ): IntArray {\n            var product = product\n            implMontgomeryMultiplyChecks(a, a, n, len, product)\n            if (len > MONTGOMERY_INTRINSIC_THRESHOLD) {\n                // Very long argument: do not use an intrinsic\n                product = squareToLen(a, len, product)\n                return montReduce(product, n, len, inv.toInt())\n            } else {\n                return implMontgomerySquare(\n                    a,\n                    n,\n                    len,\n                    inv,\n                    materialize(product, len)\n                )\n            }\n        }\n\n        private fun implMontgomeryMultiplyChecks(a: IntArray, b: IntArray, n: IntArray, len: Int, product: IntArray?) {\n            if (len % 2 != 0) {\n                throw IllegalArgumentException(\"input array length must be even: $len\")\n            }\n\n            if (len < 1) {\n                throw IllegalArgumentException(\"invalid input length: $len\")\n            }\n\n            if (len > a.size ||\n                len > b.size ||\n                len > n.size ||\n                product != null && len > product.size\n            ) {\n                throw IllegalArgumentException(\"input array length out of bound: $len\")\n            }\n        }\n\n        // Make sure that the int array z (which is expected to contain\n        // the result of a Montgomery multiplication) is present and\n        // sufficiently large.\n        private fun materialize(z: IntArray?, len: Int): IntArray {\n            var z = z\n            if (z == null || z.size < len)\n                z = IntArray(len)\n            return z\n        }\n\n        // These methods are intended to be be replaced by virtual machine\n        // intrinsics.\n        private fun implMontgomeryMultiply(\n            a: IntArray, b: IntArray, n: IntArray, len: Int,\n            inv: Long, product: IntArray\n        ): IntArray {\n            var product = product\n            product = multiplyToLen(a, len, b, len, product)\n            return montReduce(product, n, len, inv.toInt())\n        }\n\n        private fun implMontgomerySquare(\n            a: IntArray, n: IntArray, len: Int,\n            inv: Long, product: IntArray\n        ): IntArray {\n            var product = product\n            product = squareToLen(a, len, product)\n            return montReduce(product, n, len, inv.toInt())\n        }\n\n        internal var bnExpModThreshTable = intArrayOf(7, 25, 81, 241, 673, 1793, Int.MAX_VALUE) // Sentinel\n\n        /**\n         * Montgomery reduce n, modulo rem.  This reduces modulo rem and divides\n         * by 2^(32*mlen). Adapted from Colin Plumb's C library.\n         */\n        private fun montReduce(n: IntArray, mod: IntArray, mlen: Int, inv: Int): IntArray {\n            var c = 0\n            var len = mlen\n            var offset = 0\n\n            do {\n                val nEnd = n[n.size - 1 - offset]\n                val carry = mulAdd(n, mod, offset, mlen, inv * nEnd)\n                c += addOne(n, offset, mlen, carry)\n                offset++\n            } while (--len > 0)\n\n            while (c > 0)\n                c += subN(n, mod, mlen)\n\n            while (intArrayCmpToLen(n, mod, mlen) >= 0)\n                subN(n, mod, mlen)\n\n            return n\n        }\n\n\n        /*\n     * Returns -1, 0 or +1 as big-endian unsigned int array arg1 is less than,\n     * equal to, or greater than arg2 up to length len.\n     */\n        private fun intArrayCmpToLen(arg1: IntArray, arg2: IntArray, len: Int): Int {\n            for (i in 0 until len) {\n                val b1 = arg1[i].toLong() and LONG_MASK\n                val b2 = arg2[i].toLong() and LONG_MASK\n                if (b1 < b2)\n                    return -1\n                if (b1 > b2)\n                    return 1\n            }\n            return 0\n        }\n\n        /**\n         * Subtracts two numbers of same length, returning borrow.\n         */\n        private fun subN(a: IntArray, b: IntArray, len: Int): Int {\n            var len = len\n            var sum: Long = 0\n\n            while (--len >= 0) {\n                sum = (a[len].toLong() and LONG_MASK) - (b[len].toLong() and LONG_MASK) + (sum shr 32)\n                a[len] = sum.toInt()\n            }\n\n            return (sum shr 32).toInt()\n        }\n\n        /**\n         * Multiply an array by one word k and plus to result, return the carry\n         */\n        internal fun mulAdd(out: IntArray, `in`: IntArray, offset: Int, len: Int, k: Int): Int {\n            implMulAddCheck(out, `in`, offset, len, k)\n            return implMulAdd(out, `in`, offset, len, k)\n        }\n\n        /**\n         * Parameters validation.\n         */\n        @Suppress(\"UNUSED_PARAMETER\")\n        private fun implMulAddCheck(out: IntArray, `in`: IntArray, offset: Int, len: Int, k: Int) {\n            if (len > `in`.size) {\n                throw IllegalArgumentException(\"input length is out of bound: \" + len + \" > \" + `in`.size)\n            }\n            if (offset < 0) {\n                throw IllegalArgumentException(\"input offset is invalid: $offset\")\n            }\n            if (offset > out.size - 1) {\n                throw IllegalArgumentException(\"input offset is out of bound: \" + offset + \" > \" + (out.size - 1))\n            }\n            if (len > out.size - offset) {\n                throw IllegalArgumentException(\"input len is out of bound: \" + len + \" > \" + (out.size - offset))\n            }\n        }\n\n        /**\n         * Java Runtime may use intrinsic for this method.\n         */\n        private fun implMulAdd(out: IntArray, `in`: IntArray, offset: Int, len: Int, k: Int): Int {\n            var offset = offset\n            val kLong = k.toLong() and LONG_MASK\n            var carry: Long = 0\n\n            offset = out.size - offset - 1\n            for (j in len - 1 downTo 0) {\n                val product = (`in`[j].toLong() and LONG_MASK) * kLong +\n                        (out[offset].toLong() and LONG_MASK) + carry\n                out[offset--] = product.toInt()\n                carry = product.ushr(32)\n            }\n            return carry.toInt()\n        }\n\n        /**\n         * Add one word to the number a mlen words into a. Return the resulting\n         * carry.\n         */\n            internal fun addOne(a: IntArray, offset: Int, mlen: Int, carry: Int): Int {\n            var offset = offset\n            var mlen = mlen\n            offset = a.size - 1 - mlen - offset\n            val t = (a[offset].toLong() and LONG_MASK) + (carry.toLong() and LONG_MASK)\n\n            a[offset] = t.toInt()\n            if (t.ushr(32) == 0L)\n                return 0\n            while (--mlen >= 0) {\n                if (--offset < 0) { // Carry out of number\n                    return 1\n                } else {\n                    a[offset]++\n                    if (a[offset] != 0)\n                        return 0\n                }\n            }\n            return 1\n        }\n\n        /**\n         * Returns a magnitude array whose value is `(_mag << n)`.\n         * The shift distance, `n`, is considered unnsigned.\n         * (Computes `this * 2<sup>n</sup>`.)\n         *\n         * @param mag magnitude, the most-significant int (`_mag[0]`) must be non-zero.\n         * @param  n unsigned shift distance, in bits.\n         * @return `_mag << n`\n         */\n        private fun shl(mag: IntArray, n: Int): IntArray {\n            val nInts = n.ushr(5)\n            val nBits = n and 0x1f\n            val magLen = mag.size\n            var newMag: IntArray? = null\n\n            if (nBits == 0) {\n                newMag = IntArray(magLen + nInts)\n                arrayCopy(mag, 0, newMag, 0, magLen)\n            } else {\n                var i = 0\n                val nBits2 = 32 - nBits\n                val highBits = mag[0].ushr(nBits2)\n                if (highBits != 0) {\n                    newMag = IntArray(magLen + nInts + 1)\n                    newMag[i++] = highBits\n                } else {\n                    newMag = IntArray(magLen + nInts)\n                }\n                var j = 0\n                while (j < magLen - 1)\n                    newMag[i++] = mag[j++] shl nBits or mag[j].ushr(nBits2)\n                newMag[i] = mag[j] shl nBits\n            }\n            return newMag\n        }\n\n        /**\n         * Converts the specified BigInteger to a string and appends to\n         * `sb`.  This implements the recursive Schoenhage algorithm\n         * for base conversions.\n         *\n         *\n         * See Knuth, Donald,  _The Art of Computer Programming_, Vol. 2,\n         * Answers to Exercises (4.4) Question 14.\n         *\n         * @param u      The number to convert to a string.\n         * @param sb     The StringBuilder that will be appended to in place.\n         * @param radix  The base to convert to.\n         * @param digits The minimum number of digits to pad to.\n         */\n        private fun toString(\n            u: BigInteger, sb: StringBuilder, radix: Int,\n            digits: Int\n        ) {\n            // If we're smaller than a certain threshold, use the smallToString\n            // method, padding with leading zeroes when necessary.\n            if (u._mag.size <= SCHOENHAGE_BASE_CONVERSION_THRESHOLD) {\n                val s = u.smallToString(radix)\n\n                // Pad with internal zeros if necessary.\n                // Don't pad if we're at the beginning of the string.\n                if (s.length < digits && sb.length > 0) {\n                    for (i in s.length until digits) {\n                        sb.append('0')\n                    }\n                }\n\n                sb.append(s)\n                return\n            }\n\n            val b: Int\n            val n: Int\n            b = u.bitLength\n\n            // Calculate a value for n in the equation radix^(2^n) = u\n            // and subtract 1 from that value.  This is used to find the\n            // cache index that contains the best value to div u.\n            n = round(ln(b * LOG_TWO / logCache[radix]) / LOG_TWO - 1.0).toInt()\n            val v = getRadixConversionCache(radix, n)\n            val results: Array<BigInteger>\n            results = u.divideAndRemainder(v)\n\n            val expectedDigits = 1 shl n\n\n            // Now recursively build the two halves of each number.\n            toString(results[0], sb, radix, digits - expectedDigits)\n            toString(results[1], sb, radix, expectedDigits)\n        }\n\n        /**\n         * Returns the value radix^(2^exponent) from the cache.\n         * If this value doesn't already exist in the cache, it is added.\n         *\n         *\n         * This could be changed to a more complicated caching method using\n         * `Future`.\n         */\n        private fun getRadixConversionCache(radix: Int, exponent: Int): BigInteger {\n            // volatile read\n            var cacheLine: Array<BigInteger>? = powerCache[radix]\n            if (exponent < cacheLine!!.size) {\n                return cacheLine[exponent]\n            }\n\n            val oldLength = cacheLine.size\n            val cacheLine2 = cacheLine.copyOf(exponent + 1)\n            for (i in oldLength..exponent) {\n                cacheLine2[i] = cacheLine2[i - 1]!!.pow(2)\n            }\n\n            var pc = powerCache // volatile read again\n            if (exponent >= pc[radix]!!.size) {\n                pc = pc.cloneArray()\n                pc[radix] = cacheLine2.requireNoNulls()\n                powerCache = pc // volatile write, publish\n            }\n            return cacheLine2[exponent]!!\n        }\n\n        /* zero[i] is a string of i consecutive zeros. */\n        private val zeros = arrayOfNulls<String>(64)\n\n        init {\n            zeros[63] = \"000000000000000000000000000000000000000000000000000000000000000\"\n            for (i in 0..62)\n                zeros[i] = zeros[63]!!.substring(0, i)\n        }\n\n        /**\n         * Returns a copy of the input array stripped of any leading zero bytes.\n         */\n        private fun stripLeadingZeroInts(`val`: IntArray): IntArray {\n            val vlen = `val`.size\n            var keep: Int\n\n            // Find first nonzero byte\n            keep = 0\n            while (keep < vlen && `val`[keep] == 0) {\n                keep++\n            }\n            return `val`.copyOfRange(keep, vlen)\n        }\n\n        /**\n         * Returns the input array stripped of any leading zero bytes.\n         * Since the source is trusted the copying may be skipped.\n         */\n        private fun trustedStripLeadingZeroInts(`val`: IntArray): IntArray {\n            val vlen = `val`.size\n            var keep: Int\n\n            // Find first nonzero byte\n            keep = 0\n            while (keep < vlen && `val`[keep] == 0) {\n                keep++\n            }\n            return if (keep == 0) `val` else `val`.copyOfRange(keep, vlen)\n        }\n\n        /**\n         * Returns a copy of the input array stripped of any leading zero bytes.\n         */\n        private fun stripLeadingZeroBytes(a: ByteArray, off: Int, len: Int): IntArray {\n            val indexBound = off + len\n            var keep: Int\n\n            // Find first nonzero byte\n            keep = off\n            while (keep < indexBound && a[keep].toInt() == 0) {\n                keep++\n            }\n\n            // Allocate new array and copy relevant part of input array\n            val intLength = (indexBound - keep + 3).ushr(2)\n            val result = IntArray(intLength)\n            var b = indexBound - 1\n            for (i in intLength - 1 downTo 0) {\n                result[i] = a[b--].toInt() and 0xff\n                val bytesRemaining = b - keep + 1\n                val bytesToTransfer = min(3, bytesRemaining)\n                var j = 8\n                while (j <= bytesToTransfer shl 3) {\n                    result[i] = result[i] or (a[b--].toInt() and 0xff shl j)\n                    j += 8\n                }\n            }\n            return result\n        }\n\n        /**\n         * Takes an array a representing a negative 2's-complement number and\n         * returns the minimal (no leading zero bytes) unsigned whose value is -a.\n         */\n        private fun makePositive(a: ByteArray, off: Int, len: Int): IntArray {\n            var keep: Int\n            var k: Int\n            val indexBound = off + len\n\n            // Find first non-sign (0xff) byte of input\n            keep = off\n            while (keep < indexBound && a[keep].toInt() == -1) {\n                keep++\n            }\n\n\n            /* Allocate output array.  If all non-sign bytes are 0x00, we must\n         * allocate space for one extra output byte. */\n            k = keep\n            while (k < indexBound && a[k].toInt() == 0) {\n                k++\n            }\n\n            val extraByte = if (k == indexBound) 1 else 0\n            val intLength = (indexBound - keep + extraByte + 3).ushr(2)\n            val result = IntArray(intLength)\n\n            /* Copy one's complement of input into output, leaving extra\n         * byte (if it exists) == 0x00 */\n            var b = indexBound - 1\n            for (i in intLength - 1 downTo 0) {\n                result[i] = a[b--].toInt() and 0xff\n                var numBytesToTransfer = min(3, b - keep + 1)\n                if (numBytesToTransfer < 0)\n                    numBytesToTransfer = 0\n                var j = 8\n                while (j <= 8 * numBytesToTransfer) {\n                    result[i] = result[i] or (a[b--].toInt() and 0xff shl j)\n                    j += 8\n                }\n\n                // Mask indicates which bits must be complemented\n                val mask = (-1).ushr(8 * (3 - numBytesToTransfer))\n                result[i] = result[i].inv() and mask\n            }\n\n            // Add one to one's complement to generate two's complement\n            for (i in result.indices.reversed()) {\n                result[i] = ((result[i].toLong() and LONG_MASK) + 1L).toInt()\n                if (result[i] != 0)\n                    break\n            }\n\n            return result\n        }\n\n        /**\n         * Takes an array a representing a negative 2's-complement number and\n         * returns the minimal (no leading zero ints) unsigned whose value is -a.\n         */\n        private fun makePositive(a: IntArray): IntArray {\n            var keep: Int\n            var j: Int\n\n            // Find first non-sign (0xffffffff) int of input\n            keep = 0\n            while (keep < a.size && a[keep] == -1) {\n                keep++\n            }\n\n            /* Allocate output array.  If all non-sign ints are 0x00, we must\n         * allocate space for one extra output int. */\n            j = keep\n            while (j < a.size && a[j] == 0) {\n                j++\n            }\n            val extraInt = if (j == a.size) 1 else 0\n            val result = IntArray(a.size - keep + extraInt)\n\n            /* Copy one's complement of input into output, leaving extra\n         * int (if it exists) == 0x00 */\n            for (i in keep until a.size)\n                result[i - keep + extraInt] = a[i].inv()\n\n            // Add one to one's complement to generate two's complement\n            var i = result.size - 1\n            while (++result[i] == 0) {\n                i--\n            }\n\n            return result\n        }\n\n        /*\n     * The following two arrays are used for fast String conversions.  Both\n     * are indexed by radix.  The first is the number of digits of the given\n     * radix that can fit in a Java long without \"going negative\", i.e., the\n     * highest integer n such that radix**n < 2**63.  The second is the\n     * \"long radix\" that tears each number into \"long digits\", each of which\n     * consists of the number of digits in the corresponding element in\n     * digitsPerLong (longRadix[i] = i**digitPerLong[i]).  Both arrays have\n     * nonsense values in their 0 and 1 elements, as radixes 0 and 1 are not\n     * used.\n     */\n        private val digitsPerLong = intArrayOf(\n            0,\n            0,\n            62,\n            39,\n            31,\n            27,\n            24,\n            22,\n            20,\n            19,\n            18,\n            18,\n            17,\n            17,\n            16,\n            16,\n            15,\n            15,\n            15,\n            14,\n            14,\n            14,\n            14,\n            13,\n            13,\n            13,\n            13,\n            13,\n            13,\n            12,\n            12,\n            12,\n            12,\n            12,\n            12,\n            12,\n            12\n        )\n\n        private val longRadix = arrayOf(\n            null,\n            null,\n            of(0x4000000000000000L),\n            of(0x383d9170b85ff80bL),\n            of(0x4000000000000000L),\n            of(0x6765c793fa10079dL),\n            of(0x41c21cb8e1000000L),\n            of(0x3642798750226111L),\n            of(0x1000000000000000L),\n            of(0x12bf307ae81ffd59L),\n            of(0xde0b6b3a7640000L),\n            of(0x4d28cb56c33fa539L),\n            of(0x1eca170c00000000L),\n            of(0x780c7372621bd74dL),\n            of(0x1e39a5057d810000L),\n            of(0x5b27ac993df97701L),\n            of(0x1000000000000000L),\n            of(0x27b95e997e21d9f1L),\n            of(0x5da0e1e53c5c8000L),\n            of(0xb16a458ef403f19L),\n            of(0x16bcc41e90000000L),\n            of(0x2d04b7fdd9c0ef49L),\n            of(0x5658597bcaa24000L),\n            of(0x6feb266931a75b7L),\n            of(0xc29e98000000000L),\n            of(0x14adf4b7320334b9L),\n            of(0x226ed36478bfa000L),\n            of(0x383d9170b85ff80bL),\n            of(0x5a3c23e39c000000L),\n            of(0x4e900abb53e6b71L),\n            of(0x7600ec618141000L),\n            of(0xaee5720ee830681L),\n            of(0x1000000000000000L),\n            of(0x172588ad4f5f0981L),\n            of(0x211e44f7d02c1000L),\n            of(0x2ee56725f06e5c71L),\n            of(0x41c21cb8e1000000L)\n        )\n\n        /*\n     * These two arrays are the integer analogue of above.\n     */\n        private val digitsPerInt = intArrayOf(\n            0,\n            0,\n            30,\n            19,\n            15,\n            13,\n            11,\n            11,\n            10,\n            9,\n            9,\n            8,\n            8,\n            8,\n            8,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            7,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            5\n        )\n\n        private val intRadix = intArrayOf(\n            0,\n            0,\n            0x40000000,\n            0x4546b3db,\n            0x40000000,\n            0x48c27395,\n            0x159fd800,\n            0x75db9c97,\n            0x40000000,\n            0x17179149,\n            0x3b9aca00,\n            0xcc6db61,\n            0x19a10000,\n            0x309f1021,\n            0x57f6c100,\n            0xa2f1b6f,\n            0x10000000,\n            0x18754571,\n            0x247dbc80,\n            0x3547667b,\n            0x4c4b4000,\n            0x6b5a6e1d,\n            0x6c20a40,\n            0x8d2d931,\n            0xb640000,\n            0xe8d4a51,\n            0x1269ae40,\n            0x17179149,\n            0x1cb91000,\n            0x23744899,\n            0x2b73a840,\n            0x34e63b41,\n            0x40000000,\n            0x4cfa3cc1,\n            0x5c13d840,\n            0x6d91b519,\n            0x39aa400\n        )\n    }\n}\n/**\n * Translates a byte array containing the two's-complement binary\n * representation of a BigInteger into a BigInteger.  The input array is\n * assumed to be in *big-endian* byte-order: the most significant\n * byte is in the zeroth element.  The `val` array is assumed to be\n * unchanged for the duration of the constructor call.\n *\n * @param  val big-endian two's-complement binary representation of a\n * BigInteger.\n * @throws NumberFormatException `val` is zero bytes long.\n */\n/**\n * Translates the sign-magnitude representation of a BigInteger into a\n * BigInteger.  The sign is represented as an integer _signum value: -1 for\n * negative, 0 for zero, or 1 for positive.  The magnitude is a byte array\n * in *big-endian* byte-order: the most significant byte is the\n * zeroth element.  A zero-length magnitude array is permissible, and will\n * result in a BigInteger value of 0, whether _signum is -1, 0 or 1.  The\n * `magnitude` array is assumed to be unchanged for the duration of\n * the constructor call.\n *\n * @param  _signum _signum of the number (-1 for negative, 0 for zero, 1\n * for positive).\n * @param  magnitude big-endian binary representation of the magnitude of\n * the number.\n * @throws NumberFormatException `_signum` is not one of the three\n * legal values (-1, 0, and 1), or `_signum` is 0 and\n * `magnitude` contains one or more non-zero bytes.\n */\n/**\n * Translates the decimal String representation of a BigInteger into a\n * BigInteger.  The String representation consists of an optional minus\n * sign followed by a sequence of one or more decimal digits.  The\n * character-to-digit mapping is provided by `Character.digit`.\n * The String may not contain any extraneous characters (whitespace, for\n * example).\n *\n * @param val decimal String representation of BigInteger.\n * @throws NumberFormatException `val` is not a valid representation\n * of a BigInteger.\n * @see Character.digit\n */\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright (c) 1999, 2015, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.gciatto.kt.math\n\n/**\n * A class used to represent multiprecision integers that makes efficient\n * use of allocated space by allowing a number to occupy only part of\n * an array so that the arrays do not have to be reallocated as often.\n * When performing an operation with many iterations the array used to\n * hold a number is only reallocated when necessary and does not have to\n * be the same size as the number it represents. A mutable number allows\n * calculations to occur on the same number without having to create\n * a new number for every step of the calculation as occurs with\n * BigIntegers.\n *\n * @see BigInteger\n *\n * @author  Michael McCloskey\n * @author  Timothy Buktu\n * @since   1.3\n */\n\nimport org.gciatto.kt.math.BigDecimal.Companion.INFLATED\nimport org.gciatto.kt.math.BigInteger.Companion.LONG_MASK\nimport kotlin.math.*\n\n@Suppress(\"NAME_SHADOWING\", \"VARIABLE_WITH_REDUNDANT_INITIALIZER\", \"UNUSED_CHANGED_VALUE\")\ninternal open class MutableBigInteger {\n    /**\n     * Holds the magnitude of this MutableBigInteger in big endian order.\n     * The magnitude may start at an offset into the value array, and it may\n     * end before the length of the value array.\n     */\n    var value: IntArray\n\n    /**\n     * The number of ints of the value array that are currently used\n     * to hold the magnitude of this MutableBigInteger. The magnitude starts\n     * at an offset and offset + intLen may be less than value.length.\n     */\n    var intLen: Int = 0\n\n    /**\n     * The offset into the value array where the magnitude of this\n     * MutableBigInteger begins.\n     */\n    var offset = 0\n\n    /**\n     * Internal helper method to return the magnitude array. The caller is not\n     * supposed to modify the returned array.\n     */\n    private val magnitudeArray: IntArray\n        get() = if (offset > 0 || value.size != intLen) value.copyOfRange(offset, offset + intLen) else value\n\n    /**\n     * Return the index of the lowest set bit in this MutableBigInteger. If the\n     * magnitude of this MutableBigInteger is zero, -1 is returned.\n     */\n    private val lowestSetBit: Int\n        get() {\n            if (intLen == 0)\n                return -1\n            var j: Int\n            val b: Int\n            j = intLen - 1\n            while (j > 0 && value[j + offset] == 0) {\n                j--\n            }\n            b = value[j + offset]\n            return if (b == 0) -1 else (intLen - 1 - j shl 5) + b.numberOfTrailingZeros()\n        }\n\n    /**\n     * Returns true iff this MutableBigInteger has a value of one.\n     */\n    val isOne: Boolean\n        get() = intLen == 1 && value[offset] == 1\n\n    /**\n     * Returns true iff this MutableBigInteger has a value of zero.\n     */\n    val isZero: Boolean\n        get() = intLen == 0\n\n    /**\n     * Returns true iff this MutableBigInteger is even.\n     */\n    val isEven: Boolean\n        get() = intLen == 0 || value[offset + intLen - 1] and 1 == 0\n\n    /**\n     * Returns true iff this MutableBigInteger is odd.\n     */\n    val isOdd: Boolean\n        get() = if (isZero) false else value[offset + intLen - 1] and 1 == 1\n\n    /**\n     * Returns true iff this MutableBigInteger is in normal form. A\n     * MutableBigInteger is in normal form if it has no leading zeros\n     * after the offset, and intLen + offset <= value.length.\n     */\n    val isNormal: Boolean\n        get() {\n            if (intLen + offset > value.size)\n                return false\n            return if (intLen == 0) true else value[offset] != 0\n        }\n\n    // Constructors\n\n    /**\n     * The default constructor. An empty MutableBigInteger is created with\n     * a one word capacity.\n     */\n    constructor() {\n        value = IntArray(1)\n        intLen = 0\n    }\n\n    /**\n     * Construct a new MutableBigInteger with a magnitude specified by\n     * the int val.\n     */\n    constructor(`val`: Int) {\n        value = IntArray(1)\n        intLen = 1\n        value[0] = `val`\n    }\n\n    /**\n     * Construct a new MutableBigInteger with the specified value array\n     * up to the length of the array supplied.\n     */\n    constructor(`val`: IntArray) {\n        value = `val`\n        intLen = `val`.size\n    }\n\n    /**\n     * Construct a new MutableBigInteger with a magnitude equal to the\n     * specified BigInteger.\n     */\n    constructor(b: BigInteger) {\n        intLen = b._mag.size\n        value = b._mag.copyOf(intLen)\n    }\n\n    /**\n     * Construct a new MutableBigInteger with a magnitude equal to the\n     * specified MutableBigInteger.\n     */\n    constructor(`val`: MutableBigInteger) {\n        intLen = `val`.intLen\n        value = `val`.value.copyOfRange(`val`.offset, `val`.offset + intLen)\n    }\n\n    /**\n     * Makes this number an `n`-int number all of whose bits are ones.\n     * Used by Burnikel-Ziegler division.\n     * @param n number of ints in the `value` array\n     * @return a number equal to `((1<<(32*n)))-1`\n     */\n    private fun ones(n: Int) {\n        if (n > value.size)\n            value = IntArray(n)\n        value.fill(-1)\n        offset = 0\n        intLen = n\n    }\n\n    /**\n     * Convert this MutableBigInteger to a long value. The caller has to make\n     * sure this MutableBigInteger can be fit into long.\n     */\n    private fun toLong(): Long {\n        require(intLen <= 2) { \"this MutableBigInteger exceeds the range of long\" }\n        if (intLen == 0)\n            return 0\n        val d = value[offset].toLong() and LONG_MASK\n        return if (intLen == 2) d shl 32 or (value[offset + 1].toLong() and LONG_MASK) else d\n    }\n\n    /**\n     * Convert this MutableBigInteger to a BigInteger object.\n     */\n    fun toBigInteger(sign: Int): BigInteger {\n        return if (intLen == 0 || sign == 0) BigInteger.ZERO else BigInteger(\n            magnitudeArray,\n            sign\n        )\n    }\n\n    /**\n     * Converts this number to a nonnegative `BigInteger`.\n     */\n    fun toBigInteger(): BigInteger {\n        normalize()\n        return toBigInteger(if (isZero) 0 else 1)\n    }\n\n    /**\n     * Convert this MutableBigInteger to BigDecimal object with the specified sign\n     * and setScale.\n     */\n    fun toBigDecimal(sign: Int, scale: Int): BigDecimal {\n        if (intLen == 0 || sign == 0)\n            return BigDecimal.zeroValueOf(scale)\n        val mag = magnitudeArray\n        val len = mag.size\n        val d = mag[0]\n        // If this MutableBigInteger can't be fit into long, we need to\n        // make a BigInteger object for the resultant BigDecimal object.\n        if (len > 2 || d < 0 && len == 2)\n            return BigDecimal(BigInteger(mag, sign), INFLATED, scale, 0)\n        val v = if (len == 2)\n            mag[1].toLong() and LONG_MASK or (d.toLong() and LONG_MASK shl 32)\n        else\n            d.toLong() and LONG_MASK\n        return BigDecimal.of(if (sign == -1) -v else v, scale)\n    }\n\n    /**\n     * This is for internal use in converting from a MutableBigInteger\n     * object into a long value given a specified sign.\n     * returns INFLATED if value is not fit into long\n     */\n    fun toCompactValue(sign: Int): Long {\n        if (intLen == 0 || sign == 0)\n            return 0L\n        val mag = magnitudeArray\n        val len = mag.size\n        val d = mag[0]\n        // If this MutableBigInteger can not be fitted into long, we need to\n        // make a BigInteger object for the resultant BigDecimal object.\n        if (len > 2 || d < 0 && len == 2)\n            return INFLATED\n        val v = if (len == 2)\n            mag[1].toLong() and LONG_MASK or (d.toLong() and LONG_MASK shl 32)\n        else\n            d.toLong() and LONG_MASK\n        return if (sign == -1) -v else v\n    }\n\n    /**\n     * Clear out a MutableBigInteger for reuse.\n     */\n    fun clear() {\n        intLen = 0\n        offset = intLen\n        var index = 0\n        val n = value.size\n        while (index < n) {\n            value[index] = 0\n            index++\n        }\n    }\n\n    /**\n     * Set a MutableBigInteger to zero, removing its offset.\n     */\n    fun reset() {\n        intLen = 0\n        offset = intLen\n    }\n\n    /**\n     * Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1\n     * as this MutableBigInteger is numerically less than, equal to, or\n     * greater than `b`.\n     */\n    fun compare(b: MutableBigInteger): Int {\n        val blen = b.intLen\n        if (intLen < blen)\n            return -1\n        if (intLen > blen)\n            return 1\n\n        // Add Integer.MIN_VALUE to make the comparison act as unsigned integer\n        // comparison.\n        val bval = b.value\n        var i = offset\n        var j = b.offset\n        while (i < intLen + offset) {\n            val b1 = value[i] + -0x80000000\n            val b2 = bval[j] + -0x80000000\n            if (b1 < b2)\n                return -1\n            if (b1 > b2)\n                return 1\n            i++\n            j++\n        }\n        return 0\n    }\n\n    /**\n     * Returns a value equal to what `b.leftShift(32*ints); return compare(b);`\n     * would return, but doesn't change the value of `b`.\n     */\n    private fun compareShifted(b: MutableBigInteger, ints: Int): Int {\n        val blen = b.intLen\n        val alen = intLen - ints\n        if (alen < blen)\n            return -1\n        if (alen > blen)\n            return 1\n\n        // Add Integer.MIN_VALUE to make the comparison act as unsigned integer\n        // comparison.\n        val bval = b.value\n        var i = offset\n        var j = b.offset\n        while (i < alen + offset) {\n            val b1 = value[i] + -0x80000000\n            val b2 = bval[j] + -0x80000000\n            if (b1 < b2)\n                return -1\n            if (b1 > b2)\n                return 1\n            i++\n            j++\n        }\n        return 0\n    }\n\n    /**\n     * Compare this against half of a MutableBigInteger object (Needed for\n     * remainder tests).\n     * Assumes no leading unnecessary zeros, which holds for results\n     * from div().\n     */\n    fun compareHalf(b: MutableBigInteger): Int {\n        val blen = b.intLen\n        val len = intLen\n        if (len <= 0)\n            return if (blen <= 0) 0 else -1\n        if (len > blen)\n            return 1\n        if (len < blen - 1)\n            return -1\n        val bval = b.value\n        var bstart = 0\n        var carry = 0\n        // Only 2 cases left:len == blen or len == blen - 1\n        if (len != blen) { // len == blen - 1\n            if (bval[bstart] == 1) {\n                ++bstart\n                carry = -0x80000000\n            } else\n                return -1\n        }\n        // compare values with right-shifted values of b,\n        // carrying shifted-out bits across words\n        val `val` = value\n        var i = offset\n        var j = bstart\n        while (i < len + offset) {\n            val bv = bval[j++]\n            val hb = bv.ushr(1).toLong() + carry and LONG_MASK\n            val v = `val`[i++].toLong() and LONG_MASK\n            if (v != hb)\n                return if (v < hb) -1 else 1\n            carry = bv and 1 shl 31 // carray will be either 0x80000000 or 0\n        }\n        return if (carry == 0) 0 else -1\n    }\n\n    /**\n     * Return the int in use in this MutableBigInteger at the specified\n     * index. This method is not used because it is not inlined on all\n     * platforms.\n     */\n    private fun getInt(index: Int): Int {\n        return value[offset + index]\n    }\n\n    /**\n     * Return a long which is equal to the unsigned value of the int in\n     * use in this MutableBigInteger at the specified index. This method is\n     * not used because it is not inlined on all platforms.\n     */\n    private fun getLong(index: Int): Long {\n        return value[offset + index].toLong() and LONG_MASK\n    }\n\n    /**\n     * Ensure that the MutableBigInteger is in normal form, specifically\n     * making sure that there are no leading zeros, and that if the\n     * magnitude is zero, then intLen is zero.\n     */\n    fun normalize() {\n        if (intLen == 0) {\n            offset = 0\n            return\n        }\n\n        var index = offset\n        if (value[index] != 0)\n            return\n\n        val indexBound = index + intLen\n        do {\n            index++\n        } while (index < indexBound && value[index] == 0)\n\n        val numZeros = index - offset\n        intLen -= numZeros\n        offset = if (intLen == 0) 0 else offset + numZeros\n    }\n\n    /**\n     * If this MutableBigInteger cannot hold len words, increase the size\n     * of the value array to len words.\n     */\n    private fun ensureCapacity(len: Int) {\n        if (value.size < len) {\n            value = IntArray(len)\n            offset = 0\n            intLen = len\n        }\n    }\n\n    /**\n     * Convert this MutableBigInteger into an int array with no leading\n     * zeros, of a length that is equal to this MutableBigInteger's intLen.\n     */\n    fun toIntArray(): IntArray {\n        val result = IntArray(intLen)\n        for (i in 0 until intLen)\n            result[i] = value[offset + i]\n        return result\n    }\n\n    /**\n     * Sets the int at index+offset in this MutableBigInteger to val.\n     * This does not get inlined on all platforms so it is not used\n     * as often as originally intended.\n     */\n    fun setInt(index: Int, `val`: Int) {\n        value[offset + index] = `val`\n    }\n\n    /**\n     * Sets this MutableBigInteger's value array to the specified array.\n     * The intLen is set to the specified length.\n     */\n    fun setValue(`val`: IntArray, length: Int) {\n        value = `val`\n        intLen = length\n        offset = 0\n    }\n\n    /**\n     * Sets this MutableBigInteger's value array to a copy of the specified\n     * array. The intLen is set to the length of the new array.\n     */\n    fun copyValue(src: MutableBigInteger) {\n        val len = src.intLen\n        if (value.size < len)\n            value = IntArray(len)\n        arrayCopy(src.value, src.offset, value, 0, len)\n        intLen = len\n        offset = 0\n    }\n\n    /**\n     * Sets this MutableBigInteger's value array to a copy of the specified\n     * array. The intLen is set to the length of the specified array.\n     */\n    fun copyValue(`val`: IntArray) {\n        val len = `val`.size\n        if (value.size < len)\n            value = IntArray(len)\n        arrayCopy(`val`, 0, value, 0, len)\n        intLen = len\n        offset = 0\n    }\n\n    /**\n     * Returns a String representation of this MutableBigInteger in radix 10.\n     */\n    override fun toString(): String {\n        val b = toBigInteger(1)\n        return b.toString()\n    }\n\n    /**\n     * Like [.rightShift] but `n` can be greater than the length of the number.\n     */\n    fun safeRightShift(n: Int) {\n        if (n / 32 >= intLen) {\n            reset()\n        } else {\n            rightShift(n)\n        }\n    }\n\n    /**\n     * Right shift this MutableBigInteger n bits. The MutableBigInteger is left\n     * in normal form.\n     */\n    fun rightShift(n: Int) {\n        if (intLen == 0)\n            return\n        val nInts = n.ushr(5)\n        val nBits = n and 0x1F\n        this.intLen -= nInts\n        if (nBits == 0)\n            return\n        val bitsInHighWord = BigInteger.bitLengthForInt(value[offset])\n        if (nBits >= bitsInHighWord) {\n            this.primitiveLeftShift(32 - nBits)\n            this.intLen--\n        } else {\n            primitiveRightShift(nBits)\n        }\n    }\n\n    /**\n     * Like [.leftShift] but `n` can be zero.\n     */\n    fun safeLeftShift(n: Int) {\n        if (n > 0) {\n            leftShift(n)\n        }\n    }\n\n    /**\n     * Left shift this MutableBigInteger n bits.\n     */\n    fun leftShift(n: Int) {\n        /*\n         * If there is enough storage space in this MutableBigInteger already\n         * the available space will be used. Space to the right of the used\n         * ints in the value array is faster to utilize, so the extra space\n         * will be taken from the right if possible.\n         */\n        if (intLen == 0)\n            return\n        val nInts = n.ushr(5)\n        val nBits = n and 0x1F\n        val bitsInHighWord = BigInteger.bitLengthForInt(value[offset])\n\n        // If shift can be done without moving words, do so\n        if (n <= 32 - bitsInHighWord) {\n            primitiveLeftShift(nBits)\n            return\n        }\n\n        var newLen = intLen + nInts + 1\n        if (nBits <= 32 - bitsInHighWord)\n            newLen--\n        if (value.size < newLen) {\n            // The array must grow\n            val result = IntArray(newLen)\n            for (i in 0 until intLen)\n                result[i] = value[offset + i]\n            setValue(result, newLen)\n        } else if (value.size - offset >= newLen) {\n            // Use space on right\n            for (i in 0 until newLen - intLen)\n                value[offset + intLen + i] = 0\n        } else {\n            // Must use space on left\n            for (i in 0 until intLen)\n                value[i] = value[offset + i]\n            for (i in intLen until newLen)\n                value[i] = 0\n            offset = 0\n        }\n        intLen = newLen\n        if (nBits == 0)\n            return\n        if (nBits <= 32 - bitsInHighWord)\n            primitiveLeftShift(nBits)\n        else\n            primitiveRightShift(32 - nBits)\n    }\n\n    /**\n     * A primitive used for division. This method adds in one multiple of the\n     * divisor a back to the dividend result at a specified offset. It is used\n     * when qhat was estimated too large, and must be adjusted.\n     */\n    private fun divadd(a: IntArray, result: IntArray, offset: Int): Int {\n        var carry: Long = 0\n\n        for (j in a.indices.reversed()) {\n            val sum = (a[j].toLong() and LONG_MASK) +\n                    (result[j + offset].toLong() and LONG_MASK) + carry\n            result[j + offset] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n        return carry.toInt()\n    }\n\n    /**\n     * This method is used for division. It multiplies an n word input a by one\n     * word input x, and subtracts the n word product from q. This is needed\n     * when subtracting qhat*divisor from dividend.\n     */\n    private fun mulsub(q: IntArray, a: IntArray, x: Int, len: Int, offset: Int): Int {\n        var offset = offset\n        val xLong = x.toLong() and LONG_MASK\n        var carry: Long = 0\n        offset += len\n\n        for (j in len - 1 downTo 0) {\n            val product = (a[j].toLong() and LONG_MASK) * xLong + carry\n            val difference = q[offset] - product\n            q[offset--] = difference.toInt()\n            carry = product.ushr(32) + if (difference and LONG_MASK > product.toInt().inv().toLong() and LONG_MASK)\n                1\n            else\n                0\n        }\n        return carry.toInt()\n    }\n\n    /**\n     * The method is the same as mulsun, except the fact that q array is not\n     * updated, the only result of the method is borrow flag.\n     */\n    private fun mulsubBorrow(q: IntArray, a: IntArray, x: Int, len: Int, offset: Int): Int {\n        var offset = offset\n        val xLong = x.toLong() and LONG_MASK\n        var carry: Long = 0\n        offset += len\n        for (j in len - 1 downTo 0) {\n            val product = (a[j].toLong() and LONG_MASK) * xLong + carry\n            val difference = q[offset--] - product\n            carry = product.ushr(32) + if (difference and LONG_MASK > product.toInt().inv().toLong() and LONG_MASK)\n                1\n            else\n                0\n        }\n        return carry.toInt()\n    }\n\n    /**\n     * Right shift this MutableBigInteger n bits, where n is\n     * less than 32.\n     * Assumes that intLen > 0, n > 0 for speed\n     */\n    private fun primitiveRightShift(n: Int) {\n        val `val` = value\n        val n2 = 32 - n\n        var i = offset + intLen - 1\n        var c = `val`[i]\n        while (i > offset) {\n            val b = c\n            c = `val`[i - 1]\n            `val`[i] = c shl n2 or b.ushr(n)\n            i--\n        }\n        `val`[offset] = `val`[offset] ushr n\n    }\n\n    /**\n     * Left shift this MutableBigInteger n bits, where n is\n     * less than 32.\n     * Assumes that intLen > 0, n > 0 for speed\n     */\n    private fun primitiveLeftShift(n: Int) {\n        val `val` = value\n        val n2 = 32 - n\n        var i = offset\n        var c = `val`[i]\n        val m = i + intLen - 1\n        while (i < m) {\n            val b = c\n            c = `val`[i + 1]\n            `val`[i] = b shl n or c.ushr(n2)\n            i++\n        }\n        `val`[offset + intLen - 1] = `val`[offset + intLen - 1] shl n\n    }\n\n    /**\n     * Returns a `BigInteger` equal to the `n`\n     * low ints of this number.\n     */\n    private fun getLower(n: Int): BigInteger {\n        if (isZero) {\n            return BigInteger.ZERO\n        } else if (intLen < n) {\n            return toBigInteger(1)\n        } else {\n            // strip zeros\n            var len = n\n            while (len > 0 && value[offset + intLen - len] == 0)\n                len--\n            val sign = if (len > 0) 1 else 0\n            return BigInteger(value.copyOfRange(offset + intLen - len, offset + intLen), sign)\n        }\n    }\n\n    /**\n     * Discards all ints whose index is greater than `n`.\n     */\n    private fun keepLower(n: Int) {\n        if (intLen >= n) {\n            offset += intLen - n\n            intLen = n\n        }\n    }\n\n    /**\n     * Adds the contents of two MutableBigInteger objects.The result\n     * is placed within this MutableBigInteger.\n     * The contents of the addend are not changed.\n     */\n    fun add(addend: MutableBigInteger) {\n        var x = intLen\n        var y = addend.intLen\n        var resultLen = if (intLen > addend.intLen) intLen else addend.intLen\n        var result = if (value.size < resultLen) IntArray(resultLen) else value\n\n        var rstart = result.size - 1\n        var sum: Long\n        var carry: Long = 0\n\n        // Add common parts of both numbers\n        while (x > 0 && y > 0) {\n            x--\n            y--\n            sum = (value[x + offset].toLong() and LONG_MASK) +\n                    (addend.value[y + addend.offset].toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n\n        // Add remainder of the longer number\n        while (x > 0) {\n            x--\n            if (carry == 0L && result == value && rstart == x + offset)\n                return\n            sum = (value[x + offset].toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n        while (y > 0) {\n            y--\n            sum = (addend.value[y + addend.offset].toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n\n        if (carry > 0) { // Result must grow in length\n            resultLen++\n            if (result.size < resultLen) {\n                val temp = IntArray(resultLen)\n                // Result one word longer from carry-out; copy low-order\n                // bits into new result.\n                arrayCopy(result, 0, temp, 1, result.size)\n                temp[0] = 1\n                result = temp\n            } else {\n                result[rstart--] = 1\n            }\n        }\n\n        value = result\n        intLen = resultLen\n        offset = result.size - resultLen\n    }\n\n    /**\n     * Adds the value of `addend` shifted `n` ints to the left.\n     * Has the same effect as `addend.leftShift(32*ints); plus(addend);`\n     * but doesn't change the value of `addend`.\n     */\n    fun addShifted(addend: MutableBigInteger, n: Int) {\n        if (addend.isZero) {\n            return\n        }\n\n        var x = intLen\n        var y = addend.intLen + n\n        var resultLen = if (intLen > y) intLen else y\n        var result = if (value.size < resultLen) IntArray(resultLen) else value\n\n        var rstart = result.size - 1\n        var sum: Long\n        var carry: Long = 0\n\n        // Add common parts of both numbers\n        while (x > 0 && y > 0) {\n            x--\n            y--\n            val bval = if (y + addend.offset < addend.value.size) addend.value[y + addend.offset] else 0\n            sum = (value[x + offset].toLong() and LONG_MASK) +\n                    (bval.toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n\n        // Add remainder of the longer number\n        while (x > 0) {\n            x--\n            if (carry == 0L && result == value && rstart == x + offset) {\n                return\n            }\n            sum = (value[x + offset].toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n        while (y > 0) {\n            y--\n            val bval = if (y + addend.offset < addend.value.size) addend.value[y + addend.offset] else 0\n            sum = (bval.toLong() and LONG_MASK) + carry\n            result[rstart--] = sum.toInt()\n            carry = sum.ushr(32)\n        }\n\n        if (carry > 0) { // Result must grow in length\n            resultLen++\n            if (result.size < resultLen) {\n                val temp = IntArray(resultLen)\n                // Result one word longer from carry-out; copy low-order\n                // bits into new result.\n                arrayCopy(result, 0, temp, 1, result.size)\n                temp[0] = 1\n                result = temp\n            } else {\n                result[rstart--] = 1\n            }\n        }\n\n        value = result\n        intLen = resultLen\n        offset = result.size - resultLen\n    }\n\n    /**\n     * Like [.addShifted] but `this.intLen` must\n     * not be greater than `n`. In other words, concatenates `this`\n     * and `addend`.\n     */\n    fun addDisjoint(addend: MutableBigInteger?, n: Int) {\n        if (addend!!.isZero)\n            return\n\n        val x = intLen\n        var y = addend.intLen + n\n        val resultLen = if (intLen > y) intLen else y\n        val result: IntArray\n        if (value.size < resultLen)\n            result = IntArray(resultLen)\n        else {\n            result = value\n            value.fill(offset + intLen, value.size, 0)\n        }\n\n\n\n        var rstart = result.size - 1\n\n        // copy from this if needed\n        arrayCopy(value, offset, result, rstart + 1 - x, x)\n        y -= x\n        rstart -= x\n\n        val len = min(y, addend.value.size - addend.offset)\n        arrayCopy(addend.value, addend.offset, result, rstart + 1 - y, len)\n\n        // zero the gap\n        for (i in rstart + 1 - y + len until rstart + 1)\n            result[i] = 0\n\n        value = result\n        intLen = resultLen\n        offset = result.size - resultLen\n    }\n\n    /**\n     * Adds the low `n` ints of `addend`.\n     */\n    fun addLower(addend: MutableBigInteger, n: Int) {\n        val a = MutableBigInteger(addend)\n        if (a.offset + a.intLen >= n) {\n            a.offset = a.offset + a.intLen - n\n            a.intLen = n\n        }\n        a.normalize()\n        add(a)\n    }\n\n    /**\n     * Subtracts the smaller of this and b from the larger and places the\n     * result into this MutableBigInteger.\n     */\n    fun subtract(b: MutableBigInteger): Int {\n        var b = b\n        var a = this\n\n        var result = value\n        val sign = a.compare(b)\n\n        if (sign == 0) {\n            reset()\n            return 0\n        }\n        if (sign < 0) {\n            val tmp = a\n            a = b\n            b = tmp\n        }\n\n        val resultLen = a.intLen\n        if (result.size < resultLen)\n            result = IntArray(resultLen)\n\n        var diff: Long = 0\n        var x = a.intLen\n        var y = b.intLen\n        var rstart = result.size - 1\n\n        // Subtract common parts of both numbers\n        while (y > 0) {\n            x--\n            y--\n\n            diff = (a.value[x + a.offset].toLong() and LONG_MASK) -\n                    (b.value[y + b.offset].toLong() and LONG_MASK) - (-(diff shr 32)).toInt().toLong()\n            result[rstart--] = diff.toInt()\n        }\n        // Subtract remainder of longer number\n        while (x > 0) {\n            x--\n            diff = (a.value[x + a.offset].toLong() and LONG_MASK) - (-(diff shr 32)).toInt()\n            result[rstart--] = diff.toInt()\n        }\n\n        value = result\n        intLen = resultLen\n        offset = value.size - resultLen\n        normalize()\n        return sign\n    }\n\n    /**\n     * Subtracts the smaller of a and b from the larger and places the result\n     * into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no\n     * operation was performed.\n     */\n    private fun difference(b: MutableBigInteger): Int {\n        var b = b\n        var a = this\n        val sign = a.compare(b)\n        if (sign == 0)\n            return 0\n        if (sign < 0) {\n            val tmp = a\n            a = b\n            b = tmp\n        }\n\n        var diff: Long = 0\n        var x = a.intLen\n        var y = b.intLen\n\n        // Subtract common parts of both numbers\n        while (y > 0) {\n            x--\n            y--\n            diff = (a.value[a.offset + x].toLong() and LONG_MASK) -\n                    (b.value[b.offset + y].toLong() and LONG_MASK) - (-(diff shr 32)).toInt().toLong()\n            a.value[a.offset + x] = diff.toInt()\n        }\n        // Subtract remainder of longer number\n        while (x > 0) {\n            x--\n            diff = (a.value[a.offset + x].toLong() and LONG_MASK) - (-(diff shr 32)).toInt()\n            a.value[a.offset + x] = diff.toInt()\n        }\n\n        a.normalize()\n        return sign\n    }\n\n    /**\n     * Multiply the contents of two MutableBigInteger objects. The result is\n     * placed into MutableBigInteger z. The contents of y are not changed.\n     */\n    fun multiply(y: MutableBigInteger, z: MutableBigInteger) {\n        val xLen = intLen\n        val yLen = y.intLen\n        val newLen = xLen + yLen\n\n        // Put z into an appropriate state to receive product\n        if (z.value.size < newLen)\n            z.value = IntArray(newLen)\n        z.offset = 0\n        z.intLen = newLen\n\n        // The first iteration is hoisted out of the loop to avoid extra plus\n        var carry: Long = 0\n        run {\n            var j = yLen - 1\n            var k = yLen + xLen - 1\n            while (j >= 0) {\n                val product = (y.value[j + y.offset].toLong() and LONG_MASK) * (value[xLen - 1 + offset].toLong() and LONG_MASK) + carry\n                z.value[k] = product.toInt()\n                carry = product.ushr(32)\n                j--\n                k--\n            }\n        }\n        z.value[xLen - 1] = carry.toInt()\n\n        // Perform the multiplication word by word\n        for (i in xLen - 2 downTo 0) {\n            carry = 0\n            var j = yLen - 1\n            var k = yLen + i\n            while (j >= 0) {\n                val product = (y.value[j + y.offset].toLong() and LONG_MASK) * (value[i + offset].toLong() and LONG_MASK) +\n                        (z.value[k].toLong() and LONG_MASK) + carry\n                z.value[k] = product.toInt()\n                carry = product.ushr(32)\n                j--\n                k--\n            }\n            z.value[i] = carry.toInt()\n        }\n\n        // Remove leading zeros from product\n        z.normalize()\n    }\n\n    /**\n     * Multiply the contents of this MutableBigInteger by the word y. The\n     * result is placed into z.\n     */\n    fun mul(y: Int, z: MutableBigInteger) {\n        if (y == 1) {\n            z.copyValue(this)\n            return\n        }\n\n        if (y == 0) {\n            z.clear()\n            return\n        }\n\n        // Perform the multiplication word by word\n        val ylong = y.toLong() and LONG_MASK\n        val zval = if (z.value.size < intLen + 1)\n            IntArray(intLen + 1)\n        else\n            z.value\n        var carry: Long = 0\n        for (i in intLen - 1 downTo 0) {\n            val product = ylong * (value[i + offset].toLong() and LONG_MASK) + carry\n            zval[i + 1] = product.toInt()\n            carry = product.ushr(32)\n        }\n\n        if (carry == 0L) {\n            z.offset = 1\n            z.intLen = intLen\n        } else {\n            z.offset = 0\n            z.intLen = intLen + 1\n            zval[0] = carry.toInt()\n        }\n        z.value = zval\n    }\n\n    /**\n     * This method is used for division of an n word dividend by a one word\n     * divisor. The quotient is placed into quotient. The one word divisor is\n     * specified by divisor.\n     *\n     * @return the remainder of the division is returned.\n     */\n    fun divideOneWord(divisor: Int, quotient: MutableBigInteger): Int {\n        val divisorLong = divisor.toLong() and LONG_MASK\n\n        // Special case of one word dividend\n        if (intLen == 1) {\n            val dividendValue = value[offset].toLong() and LONG_MASK\n            val q: Int = (dividendValue / divisorLong).toInt()\n            val r: Int = (dividendValue - q * divisorLong).toInt()\n            quotient.value[0] = q\n            quotient.intLen = if (q == 0) 0 else 1\n            quotient.offset = 0\n            return r\n        }\n\n        if (quotient.value.size < intLen)\n            quotient.value = IntArray(intLen)\n        quotient.offset = 0\n        quotient.intLen = intLen\n\n        // Normalize the divisor\n        val shift = divisor.numberOfLeadingZeros()\n\n        var rem = value[offset]\n        var remLong = rem.toLong() and LONG_MASK\n        if (remLong < divisorLong) {\n            quotient.value[0] = 0\n        } else {\n            quotient.value[0] = (remLong / divisorLong).toInt()\n            rem = (remLong - quotient.value[0] * divisorLong).toInt()\n            remLong = rem.toLong() and LONG_MASK\n        }\n        var xlen = intLen\n        while (--xlen > 0) {\n            val dividendEstimate = remLong shl 32 or (value[offset + intLen - xlen].toLong() and LONG_MASK)\n            val q: Int\n            if (dividendEstimate >= 0) {\n                q = (dividendEstimate / divisorLong).toInt()\n                rem = (dividendEstimate - q * divisorLong).toInt()\n            } else {\n                val tmp = divWord(dividendEstimate, divisor)\n                q = (tmp and LONG_MASK).toInt()\n                rem = tmp.ushr(32).toInt()\n            }\n            quotient.value[intLen - xlen] = q\n            remLong = rem.toLong() and LONG_MASK\n        }\n\n        quotient.normalize()\n        // Unnormalize\n        return if (shift > 0)\n            rem % divisor\n        else\n            rem\n    }\n\n    fun divide(b: MutableBigInteger, quotient: MutableBigInteger, needRemainder: Boolean = true): MutableBigInteger? {\n        return if (b.intLen < BigInteger.BURNIKEL_ZIEGLER_THRESHOLD || intLen - b.intLen < BigInteger.BURNIKEL_ZIEGLER_OFFSET) {\n            divideKnuth(b, quotient, needRemainder)\n        } else {\n            divideAndRemainderBurnikelZiegler(b, quotient)\n        }\n    }\n\n    /**\n     * Calculates the quotient of this div b and places the quotient in the\n     * provided MutableBigInteger objects and the remainder object is returned.\n     *\n     * Uses Algorithm D in Knuth section 4.3.1.\n     * Many optimizations to that algorithm have been adapted from the Colin\n     * Plumb C library.\n     * It special cases one word divisors for speed. The content of b is not\n     * changed.\n     *\n     */\n    fun divideKnuth(\n        b: MutableBigInteger,\n        quotient: MutableBigInteger,\n        needRemainder: Boolean = true\n    ): MutableBigInteger? {\n        var b = b\n        if (b.intLen == 0)\n            throw ArithmeticException(\"BigInteger div by zero\")\n\n        // Dividend is zero\n        if (intLen == 0) {\n            quotient.offset = 0\n            quotient.intLen = quotient.offset\n            return if (needRemainder) MutableBigInteger() else null\n        }\n\n        val cmp = compare(b)\n        // Dividend less than divisor\n        if (cmp < 0) {\n            quotient.offset = 0\n            quotient.intLen = quotient.offset\n            return if (needRemainder) MutableBigInteger(this) else null\n        }\n        // Dividend equal to divisor\n        if (cmp == 0) {\n            quotient.intLen = 1\n            quotient.value[0] = quotient.intLen\n            quotient.offset = 0\n            return if (needRemainder) MutableBigInteger() else null\n        }\n\n        quotient.clear()\n        // Special case one word divisor\n        if (b.intLen == 1) {\n            val r = divideOneWord(b.value[b.offset], quotient)\n            return if (needRemainder) {\n                if (r == 0) MutableBigInteger() else MutableBigInteger(r)\n            } else {\n                null\n            }\n        }\n\n        // Cancel common powers of two if we're above the KNUTH_POW2_* thresholds\n        if (intLen >= KNUTH_POW2_THRESH_LEN) {\n            val trailingZeroBits = min(lowestSetBit, b.lowestSetBit)\n            if (trailingZeroBits >= KNUTH_POW2_THRESH_ZEROS * 32) {\n                val a = MutableBigInteger(this)\n                b = MutableBigInteger(b)\n                a.rightShift(trailingZeroBits)\n                b.rightShift(trailingZeroBits)\n                val r = a.divideKnuth(b, quotient)\n                r!!.leftShift(trailingZeroBits)\n                return r\n            }\n        }\n\n        return divideMagnitude(b, quotient, needRemainder)\n    }\n\n    /**\n     * Computes `this/b` and `this%b` using the\n     * [ Burnikel-Ziegler algorithm](http://cr.yp.to/bib/1998/burnikel.ps).\n     * This method implements algorithm 3 from pg. 9 of the Burnikel-Ziegler paper.\n     * The parameter beta was chosen to b 2<sup>32</sup> so almost all shifts are\n     * multiples of 32 bits.<br></br>\n     * `this` and `b` must be nonnegative.\n     * @param b the divisor\n     * @param quotient output parameter for `this/b`\n     * @return the remainder\n     */\n    fun divideAndRemainderBurnikelZiegler(b: MutableBigInteger, quotient: MutableBigInteger): MutableBigInteger {\n        val r = intLen\n        val s = b.intLen\n\n        // Clear the quotient\n        quotient.intLen = 0\n        quotient.offset = quotient.intLen\n\n        if (r < s) {\n            return this\n        } else {\n            // Unlike Knuth division, we don't check for common powers of two here because\n            // BZ already runs faster if both numbers contain powers of two and cancelling them has no\n            // additional benefit.\n\n            // step 1: let m = min{2^k | (2^k)*BURNIKEL_ZIEGLER_THRESHOLD > s}\n            val m = 1 shl 32 - (s / BigInteger.BURNIKEL_ZIEGLER_THRESHOLD).numberOfLeadingZeros()\n\n            val j = (s + m - 1) / m      // step 2a: j = ceil(s/m)\n            val n = j * m            // step 2b: block length in 32-bit units\n            val n32 = 32L * n         // block length in bits\n            val sigma = max(0, n32 - b.bitLength()).toInt()   // step 3: sigma = max{T | (2^T)*B < beta^n}\n            val bShifted = MutableBigInteger(b)\n            bShifted.safeLeftShift(sigma)   // step 4a: shift b so its length is a multiple of n\n            val aShifted = MutableBigInteger(this)\n            aShifted.safeLeftShift(sigma)     // step 4b: shift a by the same amount\n\n            // step 5: t is the number of blocks needed to accommodate a plus one additional bit\n            var t = ((aShifted.bitLength() + n32) / n32).toInt()\n            if (t < 2) {\n                t = 2\n            }\n\n            // step 6: conceptually split a into blocks a[t-1], ..., a[0]\n            val a1 = aShifted.getBlock(t - 1, t, n)   // the most significant block of a\n\n            // step 7: z[t-2] = [a[t-1], a[t-2]]\n            var z = aShifted.getBlock(t - 2, t, n)    // the second to most significant block\n            z.addDisjoint(a1, n)   // z[t-2]\n\n            // do schoolbook division on blocks, dividing 2-block numbers by 1-block numbers\n            val qi = MutableBigInteger()\n            var ri: MutableBigInteger?\n            for (i in t - 2 downTo 1) {\n                // step 8a: compute (qi,ri) such that z=b*qi+ri\n                ri = z.divide2n1n(bShifted, qi)\n\n                // step 8b: z = [ri, a[i-1]]\n                z = aShifted.getBlock(i - 1, t, n)   // a[i-1]\n                z.addDisjoint(ri, n)\n                quotient.addShifted(qi, i * n)   // update q (part of step 9)\n            }\n            // final iteration of step 8: do the loop one more time for i=0 but leave z unchanged\n            ri = z.divide2n1n(bShifted, qi)\n            quotient.add(qi)\n\n            ri!!.rightShift(sigma)   // step 9: a and b were shifted, so shift back\n            return ri\n        }\n    }\n\n    /**\n     * This method implements algorithm 1 from pg. 4 of the Burnikel-Ziegler paper.\n     * It divides a 2n-digit number by a n-digit number.<br></br>\n     * The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.\n     * <br></br>\n     * `this` must be a nonnegative number such that `this.bitLength() <= 2*b.bitLength()`\n     * @param b a positive number such that `b.bitLength()` is even\n     * @param quotient output parameter for `this/b`\n     * @return `this%b`\n     */\n    private fun divide2n1n(b: MutableBigInteger, quotient: MutableBigInteger): MutableBigInteger? {\n        val n = b.intLen\n\n        // step 1: base case\n        if (n % 2 != 0 || n < BigInteger.BURNIKEL_ZIEGLER_THRESHOLD) {\n            return divideKnuth(b, quotient)\n        }\n\n        // step 2: view this as [a1,a2,a3,a4] where each ai is n/2 ints or less\n        val aUpper = MutableBigInteger(this)\n        aUpper.safeRightShift(32 * (n / 2))   // aUpper = [a1,a2,a3]\n        keepLower(n / 2)   // this = a4\n\n        // step 3: q1=aUpper/b, r1=aUpper%b\n        val q1 = MutableBigInteger()\n        val r1 = aUpper.divide3n2n(b, q1)\n\n        // step 4: quotient=[r1,this]/b, r2=[r1,this]%b\n        addDisjoint(r1, n / 2)   // this = [r1,this]\n        val r2 = divide3n2n(b, quotient)\n\n        // step 5: let quotient=[q1,quotient] and return r2\n        quotient.addDisjoint(q1, n / 2)\n        return r2\n    }\n\n    /**\n     * This method implements algorithm 2 from pg. 5 of the Burnikel-Ziegler paper.\n     * It divides a 3n-digit number by a 2n-digit number.<br></br>\n     * The parameter beta is 2<sup>32</sup> so all shifts are multiples of 32 bits.<br></br>\n     * <br></br>\n     * `this` must be a nonnegative number such that `2*this.bitLength() <= 3*b.bitLength()`\n     * @param quotient output parameter for `this/b`\n     * @return `this%b`\n     */\n    private fun divide3n2n(b: MutableBigInteger, quotient: MutableBigInteger): MutableBigInteger {\n        val n = b.intLen / 2   // half the length of b in ints\n\n        // step 1: view this as [a1,a2,a3] where each ai is n ints or less; let a12=[a1,a2]\n        val a12 = MutableBigInteger(this)\n        a12.safeRightShift(32 * n)\n\n        // step 2: view b as [b1,b2] where each bi is n ints or less\n        val b1 = MutableBigInteger(b)\n        b1.safeRightShift(n * 32)\n        val b2 = b.getLower(n)\n\n        val r: MutableBigInteger?\n        val d: MutableBigInteger\n        if (compareShifted(b, n) < 0) {\n            // step 3a: if a1<b1, let quotient=a12/b1 and r=a12%b1\n            r = a12.divide2n1n(b1, quotient)\n\n            // step 4: d=quotient*b2\n            d = MutableBigInteger(quotient.toBigInteger().times(b2))\n        } else {\n            // step 3b: if a1>=b1, let quotient=beta^n-1 and r=a12-b1*2^n+b1\n            quotient.ones(n)\n            a12.add(b1)\n            b1.leftShift(32 * n)\n            a12.subtract(b1)\n            r = a12\n\n            // step 4: d=quotient*b2=(b2 << 32*n) - b2\n            d = MutableBigInteger(b2)\n            d.leftShift(32 * n)\n            d.subtract(MutableBigInteger(b2))\n        }\n\n        // step 5: r = r*beta^n + a3 - d (paper says a4)\n        // However, don't minus d until after the while loop so r doesn't become negative\n        r!!.leftShift(32 * n)\n        r.addLower(this, n)\n\n        // step 6: plus b until r>=d\n        while (r.compare(d) < 0) {\n            r.add(b)\n            quotient.subtract(ONE)\n        }\n        r.subtract(d)\n\n        return r\n    }\n\n    /**\n     * Returns a `MutableBigInteger` containing `blockLength` ints from\n     * `this` number, starting at `index*blockLength`.<br></br>\n     * Used by Burnikel-Ziegler division.\n     * @param index the block index\n     * @param numBlocks the total number of blocks in `this` number\n     * @param blockLength length of one block in units of 32 bits\n     * @return\n     */\n    private fun getBlock(index: Int, numBlocks: Int, blockLength: Int): MutableBigInteger {\n        val blockStart = index * blockLength\n        if (blockStart >= intLen) {\n            return MutableBigInteger()\n        }\n\n        val blockEnd: Int\n        if (index == numBlocks - 1) {\n            blockEnd = intLen\n        } else {\n            blockEnd = (index + 1) * blockLength\n        }\n        if (blockEnd > intLen) {\n            return MutableBigInteger()\n        }\n\n        val newVal = value.copyOfRange(offset + intLen - blockEnd, offset + intLen - blockStart)\n        return MutableBigInteger(newVal)\n    }\n\n    /** @see BigInteger.getBitLength\n     */\n    fun bitLength(): Long {\n        return if (intLen == 0) 0 else intLen * 32L - value[offset].numberOfLeadingZeros()\n    }\n\n    /**\n     * Internally used  to calculate the quotient of this div v and places the\n     * quotient in the provided MutableBigInteger object and the remainder is\n     * returned.\n     *\n     * @return the remainder of the division will be returned.\n     */\n    fun divide(v: Long, quotient: MutableBigInteger): Long {\n        var v = v\n        if (v == 0L)\n            throw ArithmeticException(\"BigInteger div by zero\")\n\n        // Dividend is zero\n        if (intLen == 0) {\n            quotient.offset = 0\n            quotient.intLen = quotient.offset\n            return 0\n        }\n        if (v < 0)\n            v = -v\n\n        val d = v.ushr(32).toInt()\n        quotient.clear()\n        // Special case on word divisor\n        return if (d == 0)\n            divideOneWord(v.toInt(), quotient).toLong() and LONG_MASK\n        else {\n            divideLongMagnitude(v, quotient).toLong()\n        }\n    }\n\n    /**\n     * Divide this MutableBigInteger by the divisor.\n     * The quotient will be placed into the provided quotient object &\n     * the remainder object is returned.\n     */\n    private fun divideMagnitude(\n        div: MutableBigInteger,\n        quotient: MutableBigInteger,\n        needRemainder: Boolean\n    ): MutableBigInteger? {\n        // assert div.intLen > 1\n        // D1 normalize the divisor\n        val shift = div.value[div.offset].numberOfLeadingZeros()\n        // Copy divisor value to protect divisor\n        val dlen = div.intLen\n        val divisor: IntArray\n        val rem: MutableBigInteger // Remainder starts as dividend with space for a leading zero\n        if (shift > 0) {\n            divisor = IntArray(dlen)\n            copyAndShift(div.value, div.offset, dlen, divisor, 0, shift)\n            if (value[offset].numberOfLeadingZeros() >= shift) {\n                val remarr = IntArray(intLen + 1)\n                rem = MutableBigInteger(remarr)\n                rem.intLen = intLen\n                rem.offset = 1\n                copyAndShift(value, offset, intLen, remarr, 1, shift)\n            } else {\n                val remarr = IntArray(intLen + 2)\n                rem = MutableBigInteger(remarr)\n                rem.intLen = intLen + 1\n                rem.offset = 1\n                var rFrom = offset\n                var c = 0\n                val n2 = 32 - shift\n                var i = 1\n                while (i < intLen + 1) {\n                    val b = c\n                    c = value[rFrom]\n                    remarr[i] = b shl shift or c.ushr(n2)\n                    i++\n                    rFrom++\n                }\n                remarr[intLen + 1] = c shl shift\n            }\n        } else {\n            divisor = div.value.copyOfRange(div.offset, div.offset + div.intLen)\n            rem = MutableBigInteger(IntArray(intLen + 1))\n            arrayCopy(value, offset, rem.value, 1, intLen)\n            rem.intLen = intLen\n            rem.offset = 1\n        }\n\n        val nlen = rem.intLen\n\n        // Set the quotient size\n        val limit = nlen - dlen + 1\n        if (quotient.value.size < limit) {\n            quotient.value = IntArray(limit)\n            quotient.offset = 0\n        }\n        quotient.intLen = limit\n        val q = quotient.value\n\n\n        // Must insert leading 0 in rem if its length did not change\n        if (rem.intLen == nlen) {\n            rem.offset = 0\n            rem.value[0] = 0\n            rem.intLen++\n        }\n\n        val dh = divisor[0]\n        val dhLong = dh.toLong() and LONG_MASK\n        val dl = divisor[1]\n\n        // D2 Initialize j\n        for (j in 0 until limit - 1) {\n            // D3 Calculate qhat\n            // estimate qhat\n            var qhat = 0\n            var qrem = 0\n            var skipCorrection = false\n            val nh = rem.value[j + rem.offset]\n            val nh2 = nh + -0x80000000\n            val nm = rem.value[j + 1 + rem.offset]\n\n            if (nh == dh) {\n                qhat = 0.inv()\n                qrem = nh + nm\n                skipCorrection = qrem + -0x80000000 < nh2\n            } else {\n                val nChunk = nh.toLong() shl 32 or (nm.toLong().toLong() and LONG_MASK)\n                if (nChunk >= 0) {\n                    qhat = (nChunk / dhLong).toInt()\n                    qrem = (nChunk - qhat * dhLong).toInt()\n                } else {\n                    val tmp = divWord(nChunk, dh)\n                    qhat = (tmp.toLong() and LONG_MASK).toInt()\n                    qrem = tmp.ushr(32).toInt()\n                }\n            }\n\n            if (qhat == 0)\n                continue\n\n            if (!skipCorrection) { // Correct qhat\n                val nl = rem.value[j + 2 + rem.offset].toLong() and LONG_MASK\n                var rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                var estProduct = (dl.toLong() and LONG_MASK) * (qhat.toLong() and LONG_MASK)\n\n                if (unsignedLongCompare(estProduct, rs)) {\n                    qhat--\n                    qrem = ((qrem.toLong() and LONG_MASK) + dhLong).toInt()\n                    if (qrem.toLong() and LONG_MASK >= dhLong) {\n                        estProduct -= dl.toLong() and LONG_MASK\n                        rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                        if (unsignedLongCompare(estProduct, rs))\n                            qhat--\n                    }\n                }\n            }\n\n            // D4 Multiply and minus\n            rem.value[j + rem.offset] = 0\n            val borrow = mulsub(rem.value, divisor, qhat, dlen, j + rem.offset)\n\n            // D5 Test remainder\n            if (borrow + -0x80000000 > nh2) {\n                // D6 Add back\n                divadd(divisor, rem.value, j + 1 + rem.offset)\n                qhat--\n            }\n\n            // Store the quotient digit\n            q[j] = qhat\n        } // D7 loop on j\n        // D3 Calculate qhat\n        // estimate qhat\n        var qhat = 0\n        var qrem = 0\n        var skipCorrection = false\n        val nh = rem.value[limit - 1 + rem.offset]\n        val nh2 = nh + -0x80000000\n        val nm = rem.value[limit + rem.offset]\n\n        if (nh == dh) {\n            qhat = 0.inv()\n            qrem = nh + nm\n            skipCorrection = qrem + -0x80000000 < nh2\n        } else {\n            val nChunk = nh.toLong() shl 32 or (nm.toLong() and LONG_MASK)\n            if (nChunk >= 0) {\n                qhat = (nChunk / dhLong).toInt()\n                qrem = (nChunk - qhat * dhLong).toInt()\n            } else {\n                val tmp = divWord(nChunk, dh)\n                qhat = (tmp and LONG_MASK).toInt()\n                qrem = tmp.ushr(32).toInt()\n            }\n        }\n        if (qhat != 0) {\n            if (!skipCorrection) { // Correct qhat\n                val nl = rem.value[limit + 1 + rem.offset].toLong() and LONG_MASK\n                var rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                var estProduct = (dl.toLong() and LONG_MASK) * (qhat.toLong() and LONG_MASK)\n\n                if (unsignedLongCompare(estProduct, rs)) {\n                    qhat--\n                    qrem = ((qrem.toLong() and LONG_MASK) + dhLong).toInt()\n                    if (qrem.toLong() and LONG_MASK >= dhLong) {\n                        estProduct -= dl.toLong() and LONG_MASK\n                        rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                        if (unsignedLongCompare(estProduct, rs))\n                            qhat--\n                    }\n                }\n            }\n\n\n            // D4 Multiply and minus\n            val borrow: Int\n            rem.value[limit - 1 + rem.offset] = 0\n            if (needRemainder)\n                borrow = mulsub(rem.value, divisor, qhat, dlen, limit - 1 + rem.offset)\n            else\n                borrow = mulsubBorrow(rem.value, divisor, qhat, dlen, limit - 1 + rem.offset)\n\n            // D5 Test remainder\n            if (borrow + -0x80000000 > nh2) {\n                // D6 Add back\n                if (needRemainder)\n                    divadd(divisor, rem.value, limit - 1 + 1 + rem.offset)\n                qhat--\n            }\n\n            // Store the quotient digit\n            q[limit - 1] = qhat\n        }\n\n\n        if (needRemainder) {\n            // D8 Unnormalize\n            if (shift > 0)\n                rem.rightShift(shift)\n            rem.normalize()\n        }\n        quotient.normalize()\n        return if (needRemainder) rem else null\n    }\n\n    /**\n     * Divide this MutableBigInteger by the divisor represented by positive long\n     * value. The quotient will be placed into the provided quotient object &\n     * the remainder object is returned.\n     */\n    private fun divideLongMagnitude(ldivisor: Long, quotient: MutableBigInteger): MutableBigInteger {\n        var ldivisor = ldivisor\n        // Remainder starts as dividend with space for a leading zero\n        val rem = MutableBigInteger(IntArray(intLen + 1))\n        arrayCopy(value, offset, rem.value, 1, intLen)\n        rem.intLen = intLen\n        rem.offset = 1\n\n        val nlen = rem.intLen\n\n        val limit = nlen - 2 + 1\n        if (quotient.value.size < limit) {\n            quotient.value = IntArray(limit)\n            quotient.offset = 0\n        }\n        quotient.intLen = limit\n        val q = quotient.value\n\n        // D1 normalize the divisor\n        val shift = ldivisor.numberOfLeadingZeros()\n        if (shift > 0) {\n            ldivisor = ldivisor shl shift\n            rem.leftShift(shift)\n        }\n\n        // Must insert leading 0 in rem if its length did not change\n        if (rem.intLen == nlen) {\n            rem.offset = 0\n            rem.value[0] = 0\n            rem.intLen++\n        }\n\n        val dh = ldivisor.ushr(32).toInt()\n        val dhLong = dh.toLong() and LONG_MASK\n        val dl = (ldivisor.toLong() and LONG_MASK).toInt()\n\n        // D2 Initialize j\n        for (j in 0 until limit) {\n            // D3 Calculate qhat\n            // estimate qhat\n            var qhat = 0\n            var qrem = 0\n            var skipCorrection = false\n            val nh = rem.value[j + rem.offset]\n            val nh2 = nh + -0x80000000\n            val nm = rem.value[j + 1 + rem.offset]\n\n            if (nh == dh) {\n                qhat = 0.inv()\n                qrem = nh + nm\n                skipCorrection = qrem + -0x80000000 < nh2\n            } else {\n                val nChunk = nh.toLong() shl 32 or (nm.toLong() and LONG_MASK)\n                if (nChunk >= 0) {\n                    qhat = (nChunk / dhLong).toInt()\n                    qrem = (nChunk - qhat * dhLong).toInt()\n                } else {\n                    val tmp = divWord(nChunk, dh)\n                    qhat = (tmp.toLong() and LONG_MASK).toInt()\n                    qrem = tmp.ushr(32).toInt()\n                }\n            }\n\n            if (qhat == 0)\n                continue\n\n            if (!skipCorrection) { // Correct qhat\n                val nl = rem.value[j + 2 + rem.offset].toLong() and LONG_MASK\n                var rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                var estProduct = (dl.toLong() and LONG_MASK) * (qhat.toLong() and LONG_MASK)\n\n                if (unsignedLongCompare(estProduct, rs)) {\n                    qhat--\n                    qrem = ((qrem.toLong() and LONG_MASK) + dhLong).toInt()\n                    if (qrem.toLong() and LONG_MASK >= dhLong) {\n                        estProduct -= dl.toLong() and LONG_MASK\n                        rs = qrem.toLong() and LONG_MASK shl 32 or nl\n                        if (unsignedLongCompare(estProduct, rs))\n                            qhat--\n                    }\n                }\n            }\n\n            // D4 Multiply and minus\n            rem.value[j + rem.offset] = 0\n            val borrow = mulsubLong(rem.value, dh, dl, qhat, j + rem.offset)\n\n            // D5 Test remainder\n            if (borrow + -0x80000000 > nh2) {\n                // D6 Add back\n                divaddLong(dh, dl, rem.value, j + 1 + rem.offset)\n                qhat--\n            }\n\n            // Store the quotient digit\n            q[j] = qhat\n        } // D7 loop on j\n\n        // D8 Unnormalize\n        if (shift > 0)\n            rem.rightShift(shift)\n\n        quotient.normalize()\n        rem.normalize()\n        return rem\n    }\n\n    /**\n     * A primitive used for division by long.\n     * Specialized version of the method divadd.\n     * dh is a high part of the divisor, dl is a low part\n     */\n    private fun divaddLong(dh: Int, dl: Int, result: IntArray, offset: Int): Int {\n        var carry: Long = 0\n\n        var sum = (dl.toLong() and LONG_MASK) + (result[1 + offset].toLong() and LONG_MASK)\n        result[1 + offset] = sum.toInt()\n\n        sum = (dh.toLong() and LONG_MASK) + (result[offset].toLong() and LONG_MASK) + carry\n        result[offset] = sum.toInt()\n        carry = sum.ushr(32)\n        return carry.toInt()\n    }\n\n    /**\n     * This method is used for division by long.\n     * Specialized version of the method sulsub.\n     * dh is a high part of the divisor, dl is a low part\n     */\n    @Suppress(\"UNUSED_CHANGED_VALUE\")\n    private fun mulsubLong(q: IntArray, dh: Int, dl: Int, x: Int, offset: Int): Int {\n        var offset = offset\n        val xLong = x.toLong()and LONG_MASK\n        offset += 2\n        var product = (dl.toLong()and LONG_MASK) * xLong\n        var difference = q[offset] - product\n        q[offset--] = difference.toInt()\n        var carry = product.ushr(32) + if (difference.toLong()and LONG_MASK > product.inv().toLong()and LONG_MASK)\n            1\n        else\n            0\n        product = (dh.toLong()and LONG_MASK) * xLong + carry\n        difference = q[offset] - product\n        q[offset--] = difference.toInt()\n        carry = product.ushr(32) + if (difference.toLong()and LONG_MASK > product.inv().toLong()and LONG_MASK)\n            1\n        else\n            0\n        return carry.toInt()\n    }\n\n    /**\n     * Compare two longs as if they were unsigned.\n     * Returns true iff one is bigger than two.\n     */\n    private fun unsignedLongCompare(one: Long, two: Long): Boolean {\n        return one + Long.MIN_VALUE > two + Long.MIN_VALUE\n    }\n\n    /**\n     * Calculate the integer square root `floor(sqrt(this))` where\n     * `sqrt(.)` denotes the mathematical square root. The contents of\n     * `this` are **not** changed. The value of `this` is assumed\n     * to be non-negative.\n     *\n     * @implNote The implementation is based on the material in Henry S. Warren,\n     * Jr., *Hacker's Delight (2nd ed.)* (Addison Wesley, 2013), 279-282.\n     *\n     * @throws ArithmeticException if the value returned by `bitLength()`\n     * overflows the range of `int`.\n     * @return the integer square root of `this`\n     * @since 9\n     */\n    fun sqrt(): MutableBigInteger {\n        // Special cases.\n        if (this.isZero) {\n            return MutableBigInteger(0)\n        } else if (this.value.size == 1 && this.value[0].toLong() and LONG_MASK < 4) { // result is unity\n            return ONE\n        }\n\n        if (bitLength() <= 63) {\n            // Initial estimate is the square root of the positive long value.\n            val v = BigInteger(this.value, 1).toLongExact()\n            var xk = floor(sqrt(v.toDouble())).toLong()\n\n            // Refine the estimate.\n            do {\n                val xk1 = (xk + v / xk) / 2\n\n                // Terminate when non-decreasing.\n                if (xk1 >= xk) {\n                    return MutableBigInteger(\n                        intArrayOf(\n                            xk.ushr(32).toInt(),\n                            (xk.toLong() and LONG_MASK).toInt()\n                        )\n                    )\n                }\n\n                xk = xk1\n            } while (true)\n        } else {\n            // Set up the initial estimate of the iteration.\n\n            // Obtain the bitLength > 63.\n            val bitLength = this.bitLength().toInt()\n            if (bitLength.toLong() != this.bitLength()) {\n                throw ArithmeticException(\"bitLength() integer overflow\")\n            }\n\n            // Determine an even valued right shift into positive long range.\n            var shift = bitLength - 63\n            if (shift % 2 == 1) {\n                shift++\n            }\n\n            // Shift the value into positive long range.\n            var xk = MutableBigInteger(this)\n            xk.rightShift(shift)\n            xk.normalize()\n\n            // Use the square root of the shifted value as an approximation.\n            val d = BigInteger(xk.value, 1).toDouble()\n            val bi = BigInteger.of(ceil(sqrt(d)).toLong())\n            xk = MutableBigInteger(bi._mag)\n\n            // Shift the approximate square root back into the original range.\n            xk.leftShift(shift / 2)\n\n            // Refine the estimate.\n            val xk1 = MutableBigInteger()\n            do {\n                // xk1 = (xk + n/xk)/2\n                this.divide(xk, xk1, false)\n                xk1.add(xk)\n                xk1.rightShift(1)\n\n                // Terminate when non-decreasing.\n                if (xk1.compare(xk) >= 0) {\n                    return xk\n                }\n\n                // xk = xk1\n                xk.copyValue(xk1)\n\n                xk1.reset()\n            } while (true)\n        }\n    }\n\n    /**\n     * Calculate GCD of this and b. This and b are changed by the computation.\n     */\n    fun hybridGCD(b: MutableBigInteger?): MutableBigInteger {\n        var b = b\n        // Use Euclid's algorithm until the numbers are approximately the\n        // same length, then use the binary GCD algorithm to find the GCD.\n        var a = this\n        val q = MutableBigInteger()\n\n        while (b!!.intLen != 0) {\n            if (abs(a.intLen - b.intLen) < 2)\n                return a.binaryGCD(b)\n\n            val r = a.divide(b, q)\n            a = b\n            b = r\n        }\n        return a\n    }\n\n    /**\n     * Calculate GCD of this and v.\n     * Assumes that this and v are not zero.\n     */\n    @Suppress(\"UNUSED_VALUE\")\n    private fun binaryGCD(v: MutableBigInteger): MutableBigInteger {\n        var v = v\n        // Algorithm B from Knuth section 4.5.2\n        var u = this\n        val r = MutableBigInteger()\n\n        // step B1\n        val s1 = u.lowestSetBit\n        val s2 = v.lowestSetBit\n        val k = if (s1 < s2) s1 else s2\n        if (k != 0) {\n            u.rightShift(k)\n            v.rightShift(k)\n        }\n\n        // step B2\n        val uOdd = k == s1\n        var t = if (uOdd) v else u\n        var tsign = if (uOdd) -1 else 1\n\n        var lb: Int = t.lowestSetBit\n        while (lb >= 0) {\n            // steps B3 and B4\n            t.rightShift(lb)\n            // step B5\n            if (tsign > 0)\n                u = t\n            else\n                v = t\n\n            // Special case one word numbers\n            if (u.intLen < 2 && v.intLen < 2) {\n                var x = u.value[u.offset]\n                val y = v.value[v.offset]\n                x = binaryGcd(x, y)\n                r.value[0] = x\n                r.intLen = 1\n                r.offset = 0\n                if (k > 0)\n                    r.leftShift(k)\n                return r\n            }\n\n            // step B6\n            tsign = u.difference(v)\n            if (tsign == 0) {\n                lb = t.lowestSetBit\n                break\n            }\n            t = if (tsign >= 0) u else v\n            lb = t.lowestSetBit\n        }\n\n        if (k > 0)\n            u.leftShift(k)\n        return u\n    }\n\n    /**\n     * Returns the modInverse of this rem p. This and p are not affected by\n     * the operation.\n     */\n    fun mutableModInverse(p: MutableBigInteger): MutableBigInteger? {\n        // Modulus is odd, use Schroeppel's algorithm\n        if (p.isOdd)\n            return modInverse(p)\n\n        // Base and modulus are even, throw exception\n        if (isEven)\n            throw ArithmeticException(\"BigInteger not invertible.\")\n\n        // Get even part of modulus expressed as a power of 2\n        val powersOf2 = p.lowestSetBit\n\n        // Construct odd part of modulus\n        val oddMod = MutableBigInteger(p)\n        oddMod.rightShift(powersOf2)\n\n        if (oddMod.isOne)\n            return modInverseMP2(powersOf2)\n\n        // Calculate 1/a rem oddMod\n        val oddPart = modInverse(oddMod)\n\n        // Calculate 1/a rem evenMod\n        val evenPart = modInverseMP2(powersOf2)\n\n        // Combine the results using Chinese Remainder Theorem\n        val y1 = modInverseBP2(oddMod, powersOf2)\n        val y2 = oddMod.modInverseMP2(powersOf2)\n\n        val temp1 = MutableBigInteger()\n        val temp2 = MutableBigInteger()\n        val result = MutableBigInteger()\n\n        oddPart.leftShift(powersOf2)\n        oddPart.multiply(y1, result)\n\n        evenPart.multiply(oddMod, temp1)\n        temp1.multiply(y2, temp2)\n\n        result.add(temp2)\n        return result.divide(p, temp1)\n    }\n\n    /*\n     * Calculate the multiplicative inverse of this rem 2^k.\n     */\n    fun modInverseMP2(k: Int): MutableBigInteger {\n        if (isEven)\n            throw ArithmeticException(\"Non-invertible. (GCD != 1)\")\n\n        if (k > 64)\n            return euclidModInverse(k)\n\n        var t = inverseMod32(value[offset + intLen - 1])\n\n        if (k < 33) {\n            t = if (k == 32) t else t and (1 shl k) - 1\n            return MutableBigInteger(t)\n        }\n\n        var pLong = value[offset + intLen - 1].toLong() and LONG_MASK\n        if (intLen > 1)\n            pLong = pLong or (value[offset + intLen - 2].toLong() shl 32)\n        var tLong = t.toLong() and LONG_MASK\n        tLong = tLong * (2 - pLong * tLong)  // 1 more Newton iter step\n        tLong = if (k == 64) tLong else tLong and (1L shl k) - 1\n\n        val result = MutableBigInteger(IntArray(2))\n        result.value[0] = tLong.ushr(32).toInt()\n        result.value[1] = tLong.toInt()\n        result.intLen = 2\n        result.normalize()\n        return result\n    }\n\n    /**\n     * Calculate the multiplicative inverse of this rem rem, where rem is odd.\n     * This and rem are not changed by the calculation.\n     *\n     * This method implements an algorithm due to Richard Schroeppel, that uses\n     * the same intermediate representation as Montgomery Reduction\n     * (\"Montgomery Form\").  The algorithm is described in an unpublished\n     * manuscript entitled \"Fast Modular Reciprocals.\"\n     */\n    private fun modInverse(mod: MutableBigInteger): MutableBigInteger {\n        val p = MutableBigInteger(mod)\n        var f = MutableBigInteger(this)\n        var g = MutableBigInteger(p)\n        var c = SignedMutableBigInteger(1)\n        var d = SignedMutableBigInteger()\n        var temp: MutableBigInteger?\n        var sTemp: SignedMutableBigInteger?\n\n        var k = 0\n        // Right shift f k timesLong until odd, left shift d k timesLong\n        if (f.isEven) {\n            val trailingZeros = f.lowestSetBit\n            f.rightShift(trailingZeros)\n            d.leftShift(trailingZeros)\n            k = trailingZeros\n        }\n\n        // The Almost Inverse Algorithm\n        while (!f.isOne) {\n            // If gcd(f, g) != 1, number is not invertible modulo rem\n            if (f.isZero)\n                throw ArithmeticException(\"BigInteger not invertible.\")\n\n            // If f < g exchange f, g and c, d\n            if (f.compare(g) < 0) {\n                temp = f\n                f = g\n                g = temp\n                sTemp = d\n                d = c\n                c = sTemp\n            }\n\n            // If f == g (rem 4)\n            if (f.value[f.offset + f.intLen - 1] xor g.value[g.offset + g.intLen - 1] and 3 == 0) {\n                f.subtract(g)\n                c.signedSubtract(d)\n            } else { // If f != g (rem 4)\n                f.add(g)\n                c.signedAdd(d)\n            }\n\n            // Right shift f k timesLong until odd, left shift d k timesLong\n            val trailingZeros = f.lowestSetBit\n            f.rightShift(trailingZeros)\n            d.leftShift(trailingZeros)\n            k += trailingZeros\n        }\n\n        while (c.sign < 0)\n            c.signedAdd(p)\n\n        return fixup(c, p, k)\n    }\n\n    /**\n     * Uses the extended Euclidean algorithm to compute the modInverse of base\n     * rem a modulus that is a power of 2. The modulus is 2^k.\n     */\n    @Suppress(\"UNUSED_VALUE\")\n    fun euclidModInverse(k: Int): MutableBigInteger {\n        var b: MutableBigInteger? = MutableBigInteger(1)\n        b!!.leftShift(k)\n        val mod = MutableBigInteger(b)\n\n        var a = MutableBigInteger(this)\n        var q = MutableBigInteger()\n        var r = b.divide(a, q)\n\n        var swapper: MutableBigInteger = b\n        // swap b & r\n        b = r\n        r = swapper\n\n        val t1 = MutableBigInteger(q)\n        val t0 = MutableBigInteger(1)\n        var temp = MutableBigInteger()\n\n        while (!b!!.isOne) {\n            r = a.divide(b, q)\n\n            if (r!!.intLen == 0)\n                throw ArithmeticException(\"BigInteger not invertible.\")\n\n            swapper = r\n            a = swapper\n\n            if (q.intLen == 1)\n                t1.mul(q.value[q.offset], temp)\n            else\n                q.multiply(t1, temp)\n            swapper = q\n            q = temp\n            temp = swapper\n            t0.add(q)\n\n            if (a.isOne)\n                return t0\n\n            r = b.divide(a, q)\n\n            if (r!!.intLen == 0)\n                throw ArithmeticException(\"BigInteger not invertible.\")\n\n            swapper = b\n            b = r\n\n            if (q.intLen == 1)\n                t0.mul(q.value[q.offset], temp)\n            else\n                q.multiply(t0, temp)\n            swapper = q\n            q = temp\n            temp = swapper\n\n            t1.add(q)\n        }\n        mod.subtract(t1)\n        return mod\n    }\n\n    companion object {\n\n        // Constants\n        /**\n         * MutableBigInteger with one element value array with the value 1. Used by\n         * BigDecimal divideAndRound to increment the quotient. Use this constant\n         * only when the method is not going to modify this object.\n         */\n        val ONE = MutableBigInteger(1)\n\n        /**\n         * The minimum `intLen` for cancelling powers of two before\n         * dividing.\n         * If the number of ints is less than this threshold,\n         * `divideKnuth` does not eliminate common powers of two from\n         * the dividend and divisor.\n         */\n        val KNUTH_POW2_THRESH_LEN = 6\n\n        /**\n         * The minimum number of trailing zero ints for cancelling powers of two\n         * before dividing.\n         * If the dividend and divisor don't share at least this many zero ints\n         * at the end, `divideKnuth` does not eliminate common powers\n         * of two from the dividend and divisor.\n         */\n        val KNUTH_POW2_THRESH_ZEROS = 3\n\n        private fun copyAndShift(src: IntArray, srcFrom: Int, srcLen: Int, dst: IntArray, dstFrom: Int, shift: Int) {\n            var srcFrom = srcFrom\n            val n2 = 32 - shift\n            var c = src[srcFrom]\n            for (i in 0 until srcLen - 1) {\n                val b = c\n                c = src[++srcFrom]\n                dst[dstFrom + i] = b shl shift or c.ushr(n2)\n            }\n            dst[dstFrom + srcLen - 1] = c shl shift\n        }\n\n        /**\n         * This method divides a long quantity by an int to estimate\n         * qhat for two multi precision numbers. It is used when\n         * the signed value of n is less than zero.\n         * Returns long value where high 32 bits contain remainder value and\n         * low 32 bits contain quotient value.\n         */\n        fun divWord(n: Long, d: Int): Long {\n            val dLong = d.toLong() and LONG_MASK\n            var r: Long\n            var q: Long\n            if (dLong == 1L) {\n                q = n.toInt().toLong()\n                r = 0\n                return r shl 32 or (q and LONG_MASK)\n            }\n\n            // Approximate the quotient and remainder\n            q = n.ushr(1) / dLong.ushr(1)\n            r = n - q * dLong\n\n            // Correct the approximation\n            while (r < 0) {\n                r += dLong\n                q--\n            }\n            while (r >= dLong) {\n                r -= dLong\n                q++\n            }\n            // n - q*dlong == r && 0 <= r <dLong, hence we're done.\n            return r shl 32 or (q and LONG_MASK)\n        }\n\n        /**\n         * Calculate GCD of a and b interpreted as unsigned integers.\n         */\n        fun binaryGcd(a: Int, b: Int): Int {\n            var a = a\n            var b = b\n            if (b == 0)\n                return a\n            if (a == 0)\n                return b\n\n            // Right shift a & b till their last bits equal to 1.\n            val aZeros = a.numberOfTrailingZeros()\n            val bZeros = b.numberOfTrailingZeros()\n            a = a ushr aZeros\n            b = b ushr bZeros\n\n            val t = if (aZeros < bZeros) aZeros else bZeros\n\n            while (a != b) {\n                if (a + -0x80000000 > b + -0x80000000) {  // a > b as unsigned\n                    a -= b\n                    a = a ushr a.numberOfTrailingZeros()\n                } else {\n                    b -= a\n                    b = b ushr b.numberOfTrailingZeros()\n                }\n            }\n            return a shl t\n        }\n\n        /**\n         * Returns the multiplicative inverse of val rem 2^32.  Assumes val is odd.\n         */\n        fun inverseMod32(`val`: Int): Int {\n            // Newton's iteration!\n            var t = `val`\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            return t\n        }\n\n        /**\n         * Returns the multiplicative inverse of val rem 2^64.  Assumes val is odd.\n         */\n        fun inverseMod64(`val`: Long): Long {\n            // Newton's iteration!\n            var t = `val`\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            t *= 2 - `val` * t\n            require(t * `val` == 1L)\n            return t\n        }\n\n        /**\n         * Calculate the multiplicative inverse of 2^k rem rem, where rem is odd.\n         */\n        fun modInverseBP2(mod: MutableBigInteger, k: Int): MutableBigInteger {\n            // Copy the rem to protect original\n            return fixup(\n                MutableBigInteger(1),\n                MutableBigInteger(mod),\n                k\n            )\n        }\n\n        /**\n         * The Fixup Algorithm\n         * Calculates X such that X = C * 2^(-k) (rem P)\n         * Assumes C<P and P is odd.></P>\n         */\n        fun fixup(\n            c: MutableBigInteger, p: MutableBigInteger,\n            k: Int\n        ): MutableBigInteger {\n            val temp = MutableBigInteger()\n            // Set r to the multiplicative inverse of p rem 2^32\n            val r = -inverseMod32(p.value[p.offset + p.intLen - 1])\n\n            var i = 0\n            val numWords = k shr 5\n            while (i < numWords) {\n                // V = R * c (rem 2^j)\n                val v = r * c.value[c.offset + c.intLen - 1]\n                // c = c + (v * p)\n                p.mul(v, temp)\n                c.add(temp)\n                // c = c / 2^j\n                c.intLen--\n                i++\n            }\n            val numBits = k and 0x1f\n            if (numBits != 0) {\n                // V = R * c (rem 2^j)\n                var v = r * c.value[c.offset + c.intLen - 1]\n                v = v and (1 shl numBits) - 1\n                // c = c + (v * p)\n                p.mul(v, temp)\n                c.add(temp)\n                // c = c / 2^j\n                c.rightShift(numBits)\n            }\n\n            // In theory, c may be greater than p at this point (Very rare!)\n            while (c.compare(p) >= 0)\n                c.subtract(p)\n\n            return c\n        }\n    }\n}\n/**\n * Calculates the quotient of this div b and places the quotient in the\n * provided MutableBigInteger objects and the remainder object is returned.\n *\n */\n/**\n * @see .divideKnuth\n */\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.lowercase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\n@OptIn(ExperimentalStdlibApi::class)\nprivate fun String.isNaN(): Boolean = when (this.lowercase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.4\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@OptIn(ExperimentalStdlibApi::class)\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.experimental\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.and(other: Byte): Byte = (this.toInt() and other.toInt()).toByte()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.or(other: Byte): Byte = (this.toInt() or other.toInt()).toByte()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.xor(other: Byte): Byte = (this.toInt() xor other.toInt()).toByte()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.inv(): Byte = (this.toInt().inv()).toByte()\n\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.and(other: Short): Short = (this.toInt() and other.toInt()).toShort()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.or(other: Short): Short = (this.toInt() or other.toInt()).toShort()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.xor(other: Short): Short = (this.toInt() xor other.toInt()).toShort()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.inv(): Short = (this.toInt().inv()).toShort()\n\n\n","package org.gciatto.kt.math\n\nconst val DEBUG = false\n\ninternal fun log(lazyObject: () -> Any) {\n    if (DEBUG) {\n        logImpl(lazyObject)\n    }\n}\n\ninternal expect fun logImpl(lazyObject: () -> Any)\n\ninternal fun Long.numberOfLeadingZeros(): Int {\n    // HD, Figure 5-6\n    if (this == 0L)\n        return 64\n    var n = 1\n    var x = this.ushr(32).toInt()\n\n    if (x == 0) {\n        n += 32\n        x = this.toInt()\n    }\n    if (x.ushr(16) == 0) {\n        n += 16\n        x = x shl 16\n    }\n    if (x.ushr(24) == 0) {\n        n += 8\n        x = x shl 8\n    }\n    if (x.ushr(28) == 0) {\n        n += 4\n        x = x shl 4\n    }\n    if (x.ushr(30) == 0) {\n        n += 2\n        x = x shl 2\n    }\n    n -= x.ushr(31)\n    return n\n}\n\ninternal fun Int.numberOfLeadingZeros(): Int {\n    // HD, Figure 5-6\n    var x = this\n\n    if (x == 0)\n\n        return 32\n\n    var n = 1\n\n    if (x.ushr(16) == 0) {\n        n += 16\n        x = x shl 16\n    }\n\n    if (x.ushr(24) == 0) {\n        n += 8\n        x = x shl 8\n    }\n\n    if (x.ushr(28) == 0) {\n        n += 4\n        x = x shl 4\n    }\n\n    if (x.ushr(30) == 0) {\n        n += 2\n        x = x shl 2\n    }\n\n    n -= x.ushr(31)\n\n    return n\n}\n\ninternal fun Int.numberOfTrailingZeros(): Int {\n    // HD, Figure 5-14\n\n    var y: Int\n    var i = this\n\n    if (i == 0) return 32\n\n    var n = 31\n\n    y = i shl 16\n    if (y != 0) {\n        n -= 16\n        i = y\n    }\n\n    y = i shl 8\n    if (y != 0) {\n        n -= 8\n        i = y\n    }\n\n    y = i shl 4\n    if (y != 0) {\n        n -= 4\n        i = y\n    }\n\n    y = i shl 2\n    if (y != 0) {\n        n -= 2\n        i = y\n    }\n\n    return n - (i shl 1).ushr(31)\n}\n\ninternal const val CHAR_MIN_RADIX = 2\n\ninternal const val CHAR_MAX_RADIX = 36\n\ninternal fun Char.isDigit(): Boolean {\n    return this.isDigit(10)\n}\n\ninternal fun Char.isDigit(radix: Int): Boolean {\n    return radix in CHAR_MAX_RADIX .. CHAR_MAX_RADIX\n            && if (radix > 10) {\n                    val delta = radix - 10\n                    this in '0'..'9'\n                            ||  this in 'a' until ('a' + delta)\n                            ||  this in 'A' until ('A' + delta)\n                } else {\n                    this in '0' until ('0' + radix)\n                }\n}\n\ninternal fun Char.toDigit(): Int {\n    return this.toDigit(10)\n}\n\ninternal fun Char.toDigit(radix: Int): Int {\n    if (radix in CHAR_MIN_RADIX .. CHAR_MAX_RADIX) {\n        if (radix > 10) {\n            val delta = radix - 10\n            when (this) {\n                in '0'..'9' -> return this - '0'\n                in 'a' until ('a' + delta) -> return this - 'a' + 10\n                in 'A' until ('A' + delta) -> return this - 'A' + 10\n            }\n        } else {\n            if (this in '0' until ('0' + radix)) {\n                return this - '0'\n            }\n        }\n    }\n\n    return -1\n}\n\ninternal fun <T> arrayCopy(src: Array<T>, srcIndex: Int, dest: Array<T>, destIndex: Int, size: Int) {\n\n    for (i in 0 until size) {\n        dest[destIndex + i] = src[srcIndex + i]\n    }\n}\n\ninternal fun arrayCopy(src: IntArray, srcIndex: Int, dest: IntArray, destIndex: Int, size: Int) {\n    for (i in 0 until size) {\n        dest[destIndex + i] = src[srcIndex + i]\n    }\n}\n\ninternal inline fun <reified T> Array<T>.cloneArray(): Array<T> {\n    return Array<T>(this.size) { i -> this[i] }\n}\n\ninternal fun IntArray.cloneArray(): IntArray {\n    return IntArray(this.size) { i -> this[i] }\n}\n\ninternal fun Int.bitCount(): Int {\n    // HD, Figure 5-2\n    var i = this\n\n    i -= (i.ushr(1) and 0x55555555)\n\n    i = (i and 0x33333333) + (i.ushr(2) and 0x33333333)\n\n    i = i + i.ushr(4) and 0x0f0f0f0f\n\n    i += i.ushr(8)\n\n    i += i.ushr(16)\n\n    return i and 0x3f\n}\n\ninternal fun StringBuilder.insertChar(index: Int, char: Char): StringBuilder {\n    return this.insertCharSeq(index, char.toString())\n}\n\ninternal fun StringBuilder.insertCharSeq(index: Int, string: CharSequence): StringBuilder {\n    val temp = StringBuilder(this.subSequence(0, index))\n    temp.append(string)\n    temp.append(this.subSequence(index, this.length))\n    return temp\n}\n\ninternal fun CharSequence.toCharArray(): CharArray {\n    return CharArray(this.length) { this[it] }\n}\n\ninternal fun IntArray.fill(x: Int): IntArray {\n    return this.fill(0, this.size, x)\n}\n\ninternal fun IntArray.fill(from: Int, to: Int, x: Int): IntArray {\n    for (i in from until to) {\n        this[i] = x\n    }\n    return this\n}\n\ninternal fun StringBuilder.appendCharArray(char: CharArray, offset: Int, len: Int): StringBuilder {\n    for (i in offset until offset + len) {\n        append(char[i])\n    }\n    return this\n}","/*\n * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.gciatto.kt.math\n\nimport kotlin.random.Random\n\n/**\n * A simple bit sieve used for finding prime number candidates. Allows setting\n * and clearing of bits in a storage array. The size of the sieve is assumed to\n * be constant to reduce overhead. All the bits of a new bitSieve are zero, and\n * bits are removed from it by setting them.\n *\n * To reduce storage space and increase efficiency, no even numbers are\n * represented in the sieve (each bit in the sieve represents an odd number).\n * The relationship between the index of a bit and the number it represents is\n * given by\n * N = offset + (2*index + 1);\n * Where N is the integer represented by a bit in the sieve, offset is some\n * even integer offset indicating where the sieve begins, and index is the\n * index of a bit in the sieve array.\n *\n * @see BigInteger\n *\n * @author  Michael McCloskey\n * @since   1.3\n */\n@Suppress(\"NAME_SHADOWING\")\ninternal class BitSieve {\n    /**\n     * Stores the bits in this bitSieve.\n     */\n    private var bits: LongArray? = null\n\n    /**\n     * Length is how many bits this sieve holds.\n     */\n    private var length: Int = 0\n\n    /**\n     * Construct a \"small sieve\" with a base of 0.  This constructor is\n     * used internally to generate the set of \"small primes\" whose multiples\n     * are excluded from sieves generated by the main (package private)\n     * constructor, BitSieve(BigInteger base, int searchLen).  The length\n     * of the sieve generated by this constructor was chosen for performance;\n     * it controls a tradeoff between how much time is spent constructing\n     * other sieves, and how much time is wasted testing composite candidates\n     * for primality.  The length was chosen experimentally to yield good\n     * performance.\n     */\n    private constructor() {\n        length = 150 * 64\n        bits = LongArray(unitIndex(length - 1) + 1)\n\n        // Mark 1 as composite\n        set(0)\n        var nextIndex = 1\n        var nextPrime = 3\n\n        // Find primes and remove their multiples from sieve\n        do {\n            sieveSingle(length, nextIndex + nextPrime, nextPrime)\n            nextIndex = sieveSearch(length, nextIndex + 1)\n            nextPrime = 2 * nextIndex + 1\n        } while (nextIndex > 0 && nextPrime < length)\n    }\n\n    /**\n     * Construct a bit sieve of searchLen bits used for finding prime number\n     * candidates. The new sieve begins at the specified base, which must\n     * be even.\n     */\n    constructor(base: BigInteger, searchLen: Int) {\n        /*\n         * Candidates are indicated by clear bits in the sieve. As a candidates\n         * nonprimality is calculated, a bit is set in the sieve to eliminate\n         * it. To reduce storage space and increase efficiency, no even numbers\n         * are represented in the sieve (each bit in the sieve represents an\n         * odd number).\n         */\n        bits = LongArray(unitIndex(searchLen - 1) + 1)\n        length = searchLen\n        var start = 0\n\n        var step = smallSieve.sieveSearch(smallSieve.length, start)\n        var convertedStep = step * 2 + 1\n\n        // Construct the large sieve at an even offset specified by base\n        val b = MutableBigInteger(base)\n        val q = MutableBigInteger()\n        do {\n            // Calculate base rem convertedStep\n            start = b.divideOneWord(convertedStep, q)\n\n            // Take each multiple of step out of sieve\n            start = convertedStep - start\n            if (start % 2 == 0)\n                start += convertedStep\n            sieveSingle(searchLen, (start - 1) / 2, convertedStep)\n\n            // Find next prime from small sieve\n            step = smallSieve.sieveSearch(smallSieve.length, step + 1)\n            convertedStep = step * 2 + 1\n        } while (step > 0)\n    }\n\n    /**\n     * Get the value of the bit at the specified index.\n     */\n    private operator fun get(bitIndex: Int): Boolean {\n        val unitIndex = unitIndex(bitIndex)\n        return bits!![unitIndex] and bit(bitIndex) != 0L\n    }\n\n    /**\n     * Set the bit at the specified index.\n     */\n    private fun set(bitIndex: Int) {\n        val unitIndex = unitIndex(bitIndex)\n        bits!![unitIndex] = bits!![unitIndex] or bit(bitIndex)\n    }\n\n    /**\n     * This method returns the index of the first clear bit in the search\n     * array that occurs at or after start. It will not search past the\n     * specified limit. It returns -1 if there is no such clear bit.\n     */\n    private fun sieveSearch(limit: Int, start: Int): Int {\n        if (start >= limit)\n            return -1\n\n        var index = start\n        do {\n            if (!get(index))\n                return index\n            index++\n        } while (index < limit - 1)\n        return -1\n    }\n\n    /**\n     * Sieve a single set of multiples out of the sieve. Begin to remove\n     * multiples of the specified step starting at the specified start index,\n     * up to the specified limit.\n     */\n    private fun sieveSingle(limit: Int, start: Int, step: Int) {\n        var start = start\n        while (start < limit) {\n            set(start)\n            start += step\n        }\n    }\n\n    /**\n     * Test probable primes in the sieve and return successful candidates.\n     */\n    fun retrieve(initValue: BigInteger, certainty: Int, random: Random): BigInteger? {\n        // Examine the sieve one long at a time to find possible primes\n        var offset = 1\n        for (i in bits!!.indices) {\n            var nextLong = bits!![i].inv()\n            for (j in 0..63) {\n                if (nextLong and 1 == 1L) {\n                    val candidate = initValue.plus(\n                        BigInteger.of(offset.toLong())\n                    )\n                    if (candidate.primeToCertainty(certainty, random))\n                        return candidate\n                }\n                nextLong = nextLong ushr 1\n                offset += 2\n            }\n        }\n        return null\n    }\n\n    companion object {\n\n        /**\n         * A small sieve used to filter out multiples of small primes in a search\n         * sieve.\n         */\n        private val smallSieve = BitSieve()\n\n        /**\n         * Given a bit index return unit index containing it.\n         */\n        private fun unitIndex(bitIndex: Int): Int {\n            return bitIndex.ushr(6)\n        }\n\n        /**\n         * Return a unit that masks the specified bit in its unit.\n         */\n        private fun bit(bitIndex: Int): Long {\n            return 1L shl (bitIndex and (1 shl 6) - 1)\n        }\n    }\n}\n","/*\n * Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n * Portions Copyright IBM Corporation, 1997, 2001. All Rights Reserved.\n */\n\npackage org.gciatto.kt.math\n\n/**\n * Immutable objects which encapsulate the context settings which\n * describe certain rules for numerical operators, such as those\n * implemented by the [BigDecimal] class.\n *\n *\n * The base-independent settings are:\n *\n *  1. `precision`:\n * the number of digits to be used for an operation; results are\n * rounded to this precision\n *\n *  1. `roundingMode`:\n * a [RoundingMode] object which specifies the algorithm to be\n * used for rounding.\n *\n *\n * @see BigDecimal\n *\n * @see RoundingMode\n *\n * @author  Mike Cowlishaw\n * @author  Joseph D. Darcy\n * @since 1.5\n */\n\ndata class MathContext(val precision: Int = 9, val roundingMode: RoundingMode = RoundingMode.HALF_UP) {\n    init {\n        require(precision >= 0)\n    }\n\n    companion object {\n        /**\n         * A `MathContext` object whose settings have the values\n         * required for unlimited precision arithmetic.\n         * The values of the settings are:\n         * `\n         * precision=0 roundingMode=HALF_UP\n        ` *\n         */\n        val UNLIMITED = MathContext(0, RoundingMode.HALF_UP)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal32 format, 7 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL32 = MathContext(7, RoundingMode.HALF_EVEN)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal64 format, 16 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL64 = MathContext(16, RoundingMode.HALF_EVEN)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal128 format, 34 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL128 = MathContext(34, RoundingMode.HALF_EVEN)\n    }\n\n    override fun toString(): String {\n        return \"precision=\" + precision + \" \" +\n                \"roundingMode=\" + roundingMode.toString()\n    }\n}\n/*\nclass MathContext {\n\n    /* ----- Shared Properties ----- */\n    /**\n     * The number of digits to be used for an operation.  A value of 0\n     * indicates that unlimited precision (as many digits as are\n     * required) will be used.  Note that leading zeros (in the\n     * coefficient of a number) are never significant.\n     *\n     *\n     * `precision` will always be non-negative.\n     *\n     * @serial\n     */\n    /**\n     * Returns the `precision` setting.\n     * This value is always non-negative.\n     *\n     * @return an `int` which is the value of the `precision`\n     * setting\n     */\n    val precision: Int\n\n    /**\n     * The rounding algorithm to be used for an operation.\n     *\n     * @see RoundingMode\n     *\n     * @serial\n     */\n    /**\n     * Returns the roundingMode setting.\n     * This will be one of\n     * [RoundingMode.CEILING],\n     * [RoundingMode.DOWN],\n     * [RoundingMode.FLOOR],\n     * [RoundingMode.HALF_DOWN],\n     * [RoundingMode.HALF_EVEN],\n     * [RoundingMode.HALF_UP],\n     * [RoundingMode.UNNECESSARY], or\n     * [RoundingMode.UP].\n     *\n     * @return a `RoundingMode` object which is the value of the\n     * `roundingMode` setting\n     */\n\n    val roundingMode: RoundingMode?\n\n    /* ----- Constructors ----- */\n\n    /**\n     * Constructs a new `MathContext` with the specified\n     * precision and the [HALF_UP][RoundingMode.HALF_UP] rounding\n     * mode.\n     *\n     * @param setPrecision The non-negative `int` precision setting.\n     * @throws IllegalArgumentException if the `setPrecision` parameter is less\n     * than zero.\n     */\n    constructor(setPrecision: Int) : this(setPrecision, DEFAULT_ROUNDINGMODE) {\n        return\n    }\n\n    /**\n     * Constructs a new `MathContext` with a specified\n     * precision and rounding mode.\n     *\n     * @param setPrecision The non-negative `int` precision setting.\n     * @param setRoundingMode The rounding mode to use.\n     * @throws IllegalArgumentException if the `setPrecision` parameter is less\n     * than zero.\n     * @throws NullPointerException if the rounding mode argument is `null`\n     */\n    constructor(\n        setPrecision: Int,\n        setRoundingMode: RoundingMode?\n    ) {\n        if (setPrecision < MIN_DIGITS)\n            throw IllegalArgumentException(\"Digits < 0\")\n        if (setRoundingMode == null)\n            throw NullPointerException(\"null RoundingMode\")\n\n        precision = setPrecision\n        roundingMode = setRoundingMode\n        return\n    }\n\n    /**\n     * Constructs a new `MathContext` from a string.\n     *\n     * The string must be in the same format as that produced by the\n     * [.toString] method.\n     *\n     *\n     * An `IllegalArgumentException` is thrown if the precision\n     * section of the string is out of range (`< 0`) or the string is\n     * not in the format created by the [.toString] method.\n     *\n     * @param val The string to be parsed\n     * @throws IllegalArgumentException if the precision section is out of range\n     * or of incorrect format\n     * @throws NullPointerException if the argument is `null`\n     */\n    constructor(`val`: String?) {\n        val bad = false\n        val setPrecision: Int\n        if (`val` == null)\n            throw NullPointerException(\"null String\")\n        try { // any error here is a string format problem\n            if (!`val`.startsWith(\"precision=\")) throw RuntimeException()\n            val fence = `val`.indexOf(' ')    // could be -1\n            var off = 10                     // where value starts\n            setPrecision = `val`.substring(10, fence).toInt()\n\n            if (!`val`.startsWith(\"roundingMode=\", fence + 1))\n                throw RuntimeException()\n            off = fence + 1 + 13\n            val str = `val`.substring(off, `val`.length)\n            roundingMode = RoundingMode.valueOf(str)\n        } catch (re: RuntimeException) {\n            throw IllegalArgumentException(\"bad string format\")\n        }\n\n        if (setPrecision < MIN_DIGITS)\n            throw IllegalArgumentException(\"Digits < 0\")\n        // the other parameters cannot be invalid if we got here\n        precision = setPrecision\n    }\n\n    /**\n     * Compares this `MathContext` with the specified\n     * `Object` for equality.\n     *\n     * @param  x `Object` to which this `MathContext` is to\n     * be compared.\n     * @return `true` if and only if the specified `Object` is\n     * a `MathContext` object which has exactly the same\n     * settings as this object\n     */\n    override fun equals(x: Any?): Boolean {\n        val mc: MathContext\n        if (x !is MathContext)\n            return false\n        mc = x\n        return mc.precision == this.precision && mc.roundingMode == this.roundingMode // no need for .equals()\n    }\n\n    /**\n     * Returns the hash code for this `MathContext`.\n     *\n     * @return hash code for this `MathContext`\n     */\n    override fun hashCode(): Int {\n        return this.precision + roundingMode!!.hashCode() * 59\n    }\n\n    /**\n     * Returns the string representation of this `MathContext`.\n     * The `String` returned represents the settings of the\n     * `MathContext` object as two space-delimited words\n     * (separated by a single space character, `'&#92;u0020'`,\n     * and with no leading or trailing white space), as follows:\n     *\n     *  1.\n     * The string `\"precision=\"`, immediately followed\n     * by the value of the precision setting as a numeric string as if\n     * generated by the [Integer.toString]\n     * method.\n     *\n     *  1.\n     * The string `\"roundingMode=\"`, immediately\n     * followed by the value of the `roundingMode` setting as a\n     * word.  This word will be the same as the name of the\n     * corresponding public constant in the [RoundingMode]\n     * enum.\n     *\n     *\n     *\n     * For example:\n     * <pre>\n     * precision=9 roundingMode=HALF_UP\n    </pre> *\n     *\n     * Additional words may be appended to the result of\n     * `toString` in the future if more properties are added to\n     * this class.\n     *\n     * @return a `String` representing the context settings\n     */\n    override fun toString(): String {\n        return \"precision=\" + precision + \" \" +\n                \"roundingMode=\" + roundingMode!!.toString()\n    }\n\n    companion object {\n\n        /* ----- Constants ----- */\n\n        // defaults for constructors\n        private const val DEFAULT_DIGITS = 9\n        private val DEFAULT_ROUNDINGMODE = RoundingMode.HALF_UP\n        // Smallest values for digits (Maximum is Integer.MAX_VALUE)\n        private const val MIN_DIGITS = 0\n\n        /* ----- Public Properties ----- */\n        /**\n         * A `MathContext` object whose settings have the values\n         * required for unlimited precision arithmetic.\n         * The values of the settings are:\n         * `\n         * precision=0 roundingMode=HALF_UP\n        ` *\n         */\n        val UNLIMITED = MathContext(0, RoundingMode.HALF_UP)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal32 format, 7 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL32 = MathContext(7, RoundingMode.HALF_EVEN)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal64 format, 16 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL64 = MathContext(16, RoundingMode.HALF_EVEN)\n\n        /**\n         * A `MathContext` object with a precision setting\n         * matching the IEEE 754R Decimal128 format, 34 digits, and a\n         * rounding mode of [HALF_EVEN][RoundingMode.HALF_EVEN], the\n         * IEEE 754R default.\n         */\n        val DECIMAL128 = MathContext(34, RoundingMode.HALF_EVEN)\n    }\n\n}\n*/","/*\n * Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\n/*\n * Portions Copyright IBM Corporation, 2001. All Rights Reserved.\n */\npackage org.gciatto.kt.math\n\n/**\n * Specifies a *rounding behavior* for numerical operations\n * capable of discarding precision. Each rounding mode indicates how\n * the least significant returned digit of a rounded result is to be\n * calculated.  If fewer digits are returned than the digits needed to\n * represent the exact numerical result, the discarded digits will be\n * referred to as the *discarded fraction* regardless the digits'\n * contribution to the value of the number.  In other words,\n * considered as a numerical value, the discarded fraction could have\n * an absolute value greater than one.\n *\n *\n * Each rounding mode description includes a table listing how\n * different two-digit decimal values would round to a one digit\n * decimal value under the rounding mode in question.  The result\n * column in the tables could be gotten by creating a\n * `BigDecimal` number with the specified value, forming a\n * [MathContext] object with the proper settings\n * (`precision` set to `1`, and the\n * `roundingMode` set to the rounding mode in question), and\n * calling [round][BigDecimal.round] on this number with the\n * proper `MathContext`.  A summary table showing the results\n * of these rounding operations for all rounding modes appears below.\n *\n * <table class=\"striped\">\n * <caption>**Summary of Rounding Operations Under Different Rounding Modes**</caption>\n * <thead>\n * <tr><th scope=\"col\" rowspan=\"2\">Input Number</th><th scope=\"col\" colspan=8>Result of rounding input to one digit with the given\n * rounding mode</th>\n</tr> * <tr style=\"vertical-align:top\">\n * <th>`UP`</th>\n * <th>`DOWN`</th>\n * <th>`CEILING`</th>\n * <th>`FLOOR`</th>\n * <th>`HALF_UP`</th>\n * <th>`HALF_DOWN`</th>\n * <th>`HALF_EVEN`</th>\n * <th>`UNNECESSARY`</th>\n</tr></thead> *\n * <tbody style=\"text-align:right\">\n *\n * <tr><th scope=\"row\">5.5</th>  <td>6</td>  <td>5</td>    <td>6</td>    <td>5</td>  <td>6</td>      <td>5</td>       <td>6</td>       <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">2.5</th>  <td>3</td>  <td>2</td>    <td>3</td>    <td>2</td>  <td>3</td>      <td>2</td>       <td>2</td>       <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>  <td>1</td>    <td>2</td>    <td>1</td>  <td>2</td>      <td>2</td>       <td>2</td>       <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">1.1</th>  <td>2</td>  <td>1</td>    <td>2</td>    <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>  <td>1</td>    <td>1</td>    <td>1</td>  <td>1</td>      <td>1</td>       <td>1</td>       <td>1</td>\n</tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td> <td>-1</td>   <td>-1</td>   <td>-1</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>-1</td>\n</tr> * <tr><th scope=\"row\">-1.1</th> <td>-2</td> <td>-1</td>   <td>-1</td>   <td>-2</td> <td>-1</td>     <td>-1</td>      <td>-1</td>      <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td> <td>-1</td>   <td>-1</td>   <td>-2</td> <td>-2</td>     <td>-2</td>      <td>-2</td>      <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">-2.5</th> <td>-3</td> <td>-2</td>   <td>-2</td>   <td>-3</td> <td>-3</td>     <td>-2</td>      <td>-2</td>      <td>throw `ArithmeticException`</td>\n</tr> * <tr><th scope=\"row\">-5.5</th> <td>-6</td> <td>-5</td>   <td>-5</td>   <td>-6</td> <td>-6</td>     <td>-5</td>      <td>-6</td>      <td>throw `ArithmeticException`</td>\n</tr></tbody> *\n</table> *\n *\n *\n *\n * This `enum` is intended to replace the integer-based\n * enumeration of rounding mode constants in [BigDecimal]\n * ([BigDecimal.ROUND_UP], [BigDecimal.ROUND_DOWN],\n * etc. ).\n *\n * @see BigDecimal\n *\n * @see MathContext\n *\n * @author  Josh Bloch\n * @author  Mike Cowlishaw\n * @author  Joseph D. Darcy\n * @since 1.5\n */\n// Legacy rounding mode constants in BigDecimal\n@Suppress(\"DEPRECATION\")\nenum class RoundingMode {\n\n    /**\n     * Rounding mode to round away from zero.  Always increments the\n     * digit prior to a non-zero discarded fraction.  Note that this\n     * rounding mode never decreases the magnitude of the calculated\n     * value.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode UP Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `UP` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>6</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>3</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-3</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-6</td>\n    </tr></tbody> *\n    </table> *\n     */\n    UP,\n\n    /**\n     * Rounding mode to round towards zero.  Never increments the digit\n     * prior to a discarded fraction (i.e., truncates).  Note that this\n     * rounding mode never increases the magnitude of the calculated value.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode DOWN Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `DOWN` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>5</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-5</td>\n    </tr></tbody> *\n    </table> *\n     */\n    DOWN,\n\n    /**\n     * Rounding mode to round towards positive infinity.  If the\n     * result is positive, behaves as for `RoundingMode.UP`;\n     * if negative, behaves as for `RoundingMode.DOWN`.  Note\n     * that this rounding mode never decreases the calculated value.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode CEILING Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th>Input Number</th>\n     * <th>Input rounded to one digit<br></br> with `CEILING` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>6</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>3</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-5</td>\n    </tr></tbody> *\n    </table> *\n     */\n    CEILING,\n\n    /**\n     * Rounding mode to round towards negative infinity.  If the\n     * result is positive, behave as for `RoundingMode.DOWN`;\n     * if negative, behave as for `RoundingMode.UP`.  Note that\n     * this rounding mode never increases the calculated value.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode FLOOR Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `FLOOR` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>5</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-3</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-6</td>\n    </tr></tbody> *\n    </table> *\n     */\n    FLOOR,\n\n    /**\n     * Rounding mode to round towards &quot;nearest neighbor&quot;\n     * unless both neighbors are equidistant, in which case round up.\n     * Behaves as for `RoundingMode.UP` if the discarded\n     * fraction is  0.5; otherwise, behaves as for\n     * `RoundingMode.DOWN`.  Note that this is the rounding\n     * mode commonly taught at school.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode HALF_UP Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `HALF_UP` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>6</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>3</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-3</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-6</td>\n    </tr></tbody> *\n    </table> *\n     */\n    HALF_UP,\n\n    /**\n     * Rounding mode to round towards &quot;nearest neighbor&quot;\n     * unless both neighbors are equidistant, in which case round\n     * down.  Behaves as for `RoundingMode.UP` if the discarded\n     * fraction is &gt; 0.5; otherwise, behaves as for\n     * `RoundingMode.DOWN`.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode HALF_DOWN Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `HALF_DOWN` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>5</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-5</td>\n    </tr></tbody> *\n    </table> *\n     */\n    HALF_DOWN,\n\n    /**\n     * Rounding mode to round towards the &quot;nearest neighbor&quot;\n     * unless both neighbors are equidistant, in which case, round\n     * towards the even neighbor.  Behaves as for\n     * `RoundingMode.HALF_UP` if the digit to the left of the\n     * discarded fraction is odd; behaves as for\n     * `RoundingMode.HALF_DOWN` if it's even.  Note that this\n     * is the rounding mode that statistically minimizes cumulative\n     * error when applied repeatedly over a sequence of calculations.\n     * It is sometimes known as &quot;Banker&#39;s rounding,&quot; and is\n     * chiefly used in the USA.  This rounding mode is analogous to\n     * the rounding policy used for `float` and `double`\n     * arithmetic in Java.\n     *\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode HALF_EVEN Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `HALF_EVEN` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>6</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>2</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>-2</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>-6</td>\n    </tr></tbody> *\n    </table> *\n     */\n    HALF_EVEN,\n\n    /**\n     * Rounding mode to assert that the requested operation has an exact\n     * result, hence no rounding is necessary.  If this rounding mode is\n     * specified on an operation that yields an inexact result, an\n     * `ArithmeticException` is thrown.\n     *\n     * Example:\n     * <table class=\"striped\">\n     * <caption>Rounding mode UNNECESSARY Examples</caption>\n     * <thead>\n     * <tr style=\"vertical-align:top\"><th scope=\"col\">Input Number</th>\n     * <th scope=\"col\">Input rounded to one digit<br></br> with `UNNECESSARY` rounding\n    </th></tr></thead> *\n     * <tbody style=\"text-align:right\">\n     * <tr><th scope=\"row\">5.5</th>  <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">2.5</th>  <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">1.6</th>  <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">1.1</th>  <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">1.0</th>  <td>1</td>\n    </tr> * <tr><th scope=\"row\">-1.0</th> <td>-1</td>\n    </tr> * <tr><th scope=\"row\">-1.1</th> <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">-1.6</th> <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">-2.5</th> <td>throw `ArithmeticException`</td>\n    </tr> * <tr><th scope=\"row\">-5.5</th> <td>throw `ArithmeticException`</td>\n    </tr></tbody> *\n    </table> *\n     */\n    UNNECESSARY;\n\n    /**\n     * The `BigDecimal` constant corresponding to\n     * this mode\n     */\n    internal val oldMode: Int\n        get() = when (this) {\n                CEILING -> BigDecimal.ROUND_CEILING\n                UP -> BigDecimal.ROUND_UP\n                DOWN -> BigDecimal.ROUND_DOWN\n                FLOOR -> BigDecimal.ROUND_FLOOR\n                HALF_UP -> BigDecimal.ROUND_HALF_UP\n                HALF_EVEN -> BigDecimal.ROUND_HALF_EVEN\n                HALF_DOWN -> BigDecimal.ROUND_HALF_DOWN\n                UNNECESSARY -> BigDecimal.ROUND_UNNECESSARY\n            }\n\n\n    companion object {\n\n        /**\n         * Returns the `RoundingMode` object corresponding to a\n         * legacy integer rounding mode constant in [BigDecimal].\n         *\n         * @param  rm legacy integer rounding mode to convert\n         * @return `RoundingMode` corresponding to the given integer.\n         * @throws IllegalArgumentException integer is out of range\n         */\n        fun valueOf(rm: Int): RoundingMode {\n            when (rm) {\n\n                BigDecimal.ROUND_UP -> return UP\n\n                BigDecimal.ROUND_DOWN -> return DOWN\n\n                BigDecimal.ROUND_CEILING -> return CEILING\n\n                BigDecimal.ROUND_FLOOR -> return FLOOR\n\n                BigDecimal.ROUND_HALF_UP -> return HALF_UP\n\n                BigDecimal.ROUND_HALF_DOWN -> return HALF_DOWN\n\n                BigDecimal.ROUND_HALF_EVEN -> return HALF_EVEN\n\n                BigDecimal.ROUND_UNNECESSARY -> return UNNECESSARY\n\n                else -> throw IllegalArgumentException(\"Argument out of range: $rm\")\n            }\n        }\n    }\n}\n","/*\n * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage org.gciatto.kt.math\n\n/**\n * A class used to represent multiprecision integers that makes efficient\n * use of allocated space by allowing a number to occupy only part of\n * an array so that the arrays do not have to be reallocated as often.\n * When performing an operation with many iterations the array used to\n * hold a number is only increased when necessary and does not have to\n * be the same size as the number it represents. A mutable number allows\n * calculations to occur on the same number without having to create\n * a new number for every step of the calculation as occurs with\n * BigIntegers.\n *\n * Note that SignedMutableBigIntegers only support signed addition and\n * subtraction. All other operations occur as with MutableBigIntegers.\n *\n * @see BigInteger\n *\n * @author  Michael McCloskey\n * @since   1.3\n */\n\ninternal class SignedMutableBigInteger : MutableBigInteger {\n\n    /**\n     * The sign of this MutableBigInteger.\n     */\n    var sign = 1\n\n    // Constructors\n\n    /**\n     * The default constructor. An empty MutableBigInteger is created with\n     * a one word capacity.\n     */\n    constructor() : super() {}\n\n    /**\n     * Construct a new MutableBigInteger with a magnitude specified by\n     * the int val.\n     */\n    constructor(`val`: Int) : super(`val`) {}\n\n    /**\n     * Construct a new MutableBigInteger with a magnitude equal to the\n     * specified MutableBigInteger.\n     */\n    constructor(`val`: MutableBigInteger) : super(`val`) {}\n\n    // Arithmetic Operations\n\n    /**\n     * Signed addition built upon unsigned plus and minus.\n     */\n    fun signedAdd(addend: SignedMutableBigInteger) {\n        if (sign == addend.sign)\n            add(addend)\n        else\n            sign = sign * subtract(addend)\n\n    }\n\n    /**\n     * Signed addition built upon unsigned plus and minus.\n     */\n    fun signedAdd(addend: MutableBigInteger) {\n        if (sign == 1)\n            add(addend)\n        else\n            sign = sign * subtract(addend)\n\n    }\n\n    /**\n     * Signed subtraction built upon unsigned plus and minus.\n     */\n    fun signedSubtract(addend: SignedMutableBigInteger) {\n        if (sign == addend.sign)\n            sign = sign * subtract(addend)\n        else\n            add(addend)\n\n    }\n\n    /**\n     * Signed subtraction built upon unsigned plus and minus.\n     */\n    fun signedSubtract(addend: MutableBigInteger) {\n        if (sign == 1)\n            sign = sign * subtract(addend)\n        else\n            add(addend)\n        if (intLen == 0)\n            sign = 1\n    }\n\n    /**\n     * Print out the first intLen ints of this MutableBigInteger's value\n     * array starting at offset.\n     */\n    override fun toString(): String {\n        return this.toBigInteger(sign).toString()\n    }\n\n}\n","package org.gciatto.kt.math\n\ninternal actual fun logImpl(lazyObject: () -> Any) {\n    console.warn(lazyObject())\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(870);\n"],"sourceRoot":""}